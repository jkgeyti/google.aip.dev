{"text": "---\nid: 145\nstate: approved\ncreated: 2020-05-28\nplacement:\n  category: fields\n  order: 60\n---\n\n# Ranges\n\nServices often need to represent ranges of discrete or continuous values. These\nhave wide differences in meaning, and come in many types: integers, floats, and\ntimestamps, just to name a few, and the expected meaning of a range can vary in\nsubtle ways depending on the type of range being discussed.\n\n## Guidance\n\nA resource or message representing a range **should** ordinarily use two\nseparate fields of the same type, with prefixes `start_` and `end_`:\n\n```proto\n// A representation of a chapter in a book.\nmessage Chapter {\n  string title = 1;\n\n  // The page where this chapter begins.\n  int32 start_page = 2;\n\n  // The page where the next chapter or section begins.\n  int32 end_page = 3;\n}\n```\n\n### Inclusive or exclusive ranges\n\nFields representing ranges **should** use inclusive start values and exclusive\nend values (half-closed intervals) in most situations; in interval notation:\n`[start_xxx, end_xxx)`.\n\nExclusive end values are preferable for the following reasons:\n\n- It conforms to user expectations, particularly for continuous values such as\n  timestamps, and avoids the need to express imprecise \"limit values\" (e.g.\n  `2012-04-20T23:59:59`).\n- It is consistent with most common programming languages, including C++, Java,\n  Python, and Go.\n- It is easier to reason about abutting ranges: `[0, x), [x, y), [y, z)`, where\n  values are chainable from one range to the next.\n\n### Timestamp intervals\n\nThe following section describes the use of the [google.type.Interval][interval]\ntype, found amongst the common protos that are described in [AIP-213][].\nThis type represents a range between two timestamps, with an inclusive start\nvalue and exclusive end value.\n\nRanges between two timestamps which conform to the expectations of the\n`Interval` message **should** use this rather than having separate start and\nend fields. This allows client code to be written against the `Interval`\nmessage (such as checking whether a given timestamp occurs within the interval)\nand reused across multiple intervals in the same API, or even across multiple\nAPIs.\n\nAPIs **may** use start and end timestamp fields instead. In particular, if a\nmessage within an API is inherently describing an interval with extra\ninformation about that interval, the additional level of nesting introduced\nby using the `Interval` message may be undesirable.\n\n### Exceptions\n\nIn some cases, there is significant colloquial precedent for inclusive start\nand end values (closed intervals), to the point that using an exclusive end\nvalue would be confusing even for people accustomed to them.\n\nFor example, when discussing dates (not to be confused with timestamps), most\npeople use inclusive end: a conference with dates \"April 21-23\" is expected to\nrun for three days: April 21, April 22, and April 23. This is also true for\ndays of the week: a business that is open \"Monday through Friday\" is open, not\nclosed, on Fridays.\n\nIn this situation, the prefixes `first` and `last` **should** be used instead:\n\n```proto\n// A representation of a chapter in a book.\nmessage Chapter {\n  string title = 1;\n\n  // The first page of the chapter.\n  int32 first_page = 2;\n\n  // The last page of the chapter.\n  int32 last_page = 3;\n}\n```\n\nFields representing ranges with significant colloquial precedent for inclusive\nstart and end values **should** use inclusive end values with `first_` and\n`last_` prefixes for those ranges only. The service **should** still use\nexclusive end values for other ranges where this does not apply, and **must**\nclearly document each range as inclusive or exclusive.\n\n[aip-213]: ./0213.md\n[interval]: https://github.com/googleapis/googleapis/blob/master/google/type/interval.proto\n"}