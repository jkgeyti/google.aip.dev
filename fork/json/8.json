{"text": "---\nid: 8\nstate: approved\ncreated: 2019-05-28\nplacement:\n  category: meta\n  order: 40\n---\n\n# AIP Style and Guidance\n\nAIP stands for **API Improvement Proposal**, which is a design document\nproviding high-level, concise documentation for API design and development. The\ngoal is for these documents to serve as the source of truth for API-related\ndocumentation at Google and the way API teams discuss and come to consensus on\nAPI guidance.\n\nAIPs are most useful when they are clear and concise, and cover a single topic\nor inquiry well. In the same way that AIPs describe consistent patterns and\nstyle for use in APIs, they also _follow_ consistent patterns and style.\n\n## Guidance\n\n- AIPs **must** cover a single, discrete topic, and provide clear, actionable\n  guidance.\n- AIPs **must not** duplicate or contradict guidance in another AIP.\n- AIPs **may** also cover what _not_ to do, but **should not** cover _only_\n  anti-patterns.\n- If AIP guidance is conditional (e.g. a design pattern such as Jobs), the\n  guidance **must** clearly explain under what conditions the guidance should be\n  followed.\n\nGuidance contained within an AIP **must** be beneficial to one or more\ntypes of clients or their authors, including but not limited to:\n\n- Asset inventories which can be used to audit and analyze resources.\n- Command line interfaces for exploration and simple automation.\n- Custom controllers (e.g. auto-scalers) which poll live state and adjust\n  resource configuration accordingly.\n- [IaC][] clients for orchestration and automation of multiple resources.\n- Recommendation tools which provide guidance on which APIs are useful for\n  specific use cases, and how to use them.\n- SDKs to interact with an API from a programming language, often used heavily\n  for data-plane operations.\n- Security orchestration, automation, and remediation tools.\n- Simple scripts to automate or orchestrate tasks.\n- Test frameworks.\n- Tools that operate on resource data at rest.\n- Visual User Interfaces for visualization and one-off manual actions.\n- Users.\n\nExamples of improvements include:\n\n- Requiring new proto annotations that enable more descriptive interfaces on\n  clients (e.g. requiring `singular` and `plural` on a `google.api.resource`\n  annotation).\n\nAIP guidance **must not** be a significant detriment to a client's usability or\nimplementation difficulty, or maintenance difficulty.\n\nExamples of detriments include:\n\n- Introduction of a non-uniform pattern in a standard method such that all\n  clients must introduce additional code without sufficient benefit (e.g. List\n  behaves like this *except* for resources that start with the name Foo).\n- Renames of well-established fields for minor improvements in readability (e.g.\n  rename `expire_time` to `lapse_time` since `lapse` is a common term in my\n  service).\n\nWhile the length of AIPs will necessarily vary based on the complexity of the\nquestion, most AIPs **should** be able to cover their content in roughly two\nprinted pages.\n\n### File structure\n\nAIPs **must** be written in Markdown, and **must** be named using their\nfour-digit number (example: `0008.md`). AIPs that serve a specific scope\n**must** be in the subdirectory for that scope.\n\nAIPs **must** have appropriate front matter.\n\n```yaml\n---\nid: 8\nstate: reviewing\ncreated: 2019-05-28\npermalink: /8\nredirect_from:\n  - /08\n  - /008\n  - /0008\n---\n\n```\n\nFront matter for AIPs **must** include:\n\n- The `aip` key:\n  - `id`: Required. The ID for the given AIP, as an integer.\n  - `state`: Required. The current state of the AIP, in all lower-case. The\n    valid states are listed in [AIP-1][], and common states are `draft`,\n    `reviewing`, and `approved`.\n  - `created`: Required. The ISO-8601 date (`yyyy-mm-dd`) when the AIP was\n    originally drafted, with no quotes.\n  - `updated`: The ISO-8601 date (`yyyy-mm-dd`) when the AIP was last revised.\n  - `scope`: The scope for the AIP. This **must** match the directory name for\n    that scope. Required for AIPs with IDs >= 1000, prohibited otherwise.\n- The `permalink` key (required): This **must** be set to\n  `/{aip.scope}/{aip.id}`. If there is no scope, use `/{aip.id}` instead.\n- The `redirect_from` key: This should include a list of any `/{aip.id}`\n  permutations that a reader would be likely to enter, including:\n  - `/{aip.id}` (for AIPs where the permalink includes the scope)\n  - AIP IDs with zero-padding, for each level of zero-padding up to four digits\n    (for example: `/08`, `/008`, `/0008`).\n\n### Document structure\n\nAIPs **must** begin with a top-level heading with the AIP's title (`# Title`).\nThe title **should** be a noun (not an imperative). For example, \"Bad API\nprecedents\" not \"Avoid breaking API precedent\".\n\nAIPs **should** then begin with an introduction (with no additional heading),\nfollowed by a `## Guidance` heading. If necessary, the AIP **may** include any\nof the following after the guidance, in the following order:\n\n- \"Further reading\" is a bulleted list of links to other AIPs that are useful to\n  fully understand the current AIP.\n- \"Appendices\" covering further explanation in the same AIP. These are\n  relatively rare but are important in cases where an AIP requires a lot of\n  justification for the decision. Often this is primarily an explanation of\n  alternatives considered to help explain the guidance.\n- \"Changelog\" is a bulleted list of changes made to the AIP since the first\n  writing.\n\nThe guidance section **may** include subsections that elaborate further on\ndetails. Subsections will automatically create an entry in the table of\ncontents, and an anchor for citations.\n\nBelow is an example AIP shell that uses each major section:\n\n```md\n# AIP title\n\nThe introductory text explains the background and reason why the AIP exists. It\nlays out the basic question, but does not tell the reader what to do.\n\n## Guidance\n\nThe \"guidance\" section helps the reader know what to do. A common format for\nthe guidance section is a high-level imperative, followed by an example,\nfollowed by a bulleted list explaining the example.\n\n### Subsection\n\nIndividual subsections can be cited individually, and further elaborate\ndetails.\n\n## Rationale\n\nThe \"rationale\" section is optional, and helps the reader understand the\nmotivation behind specific guidance within the AIP.\n\nDeeper explanations of design justification and tradeoffs **must** be in the\nrationale instead of other sections, to ensure the rest of the document acts as\nan easily actionable reference.\n\n## History\n\nThe \"history\" section is optional, and documents events and context around a\nsignificant edit to an AIP. For example, explanation of rewrite would be\nincluded in this section\n\nWhile the changelog is a dotted list of one-line summaries of changes to an AIP,\nthe history section should elaborate on significant events in a descriptive\nformat.\n\nThe section **must not** be used to exhaustively enumerate all changes. This\nis what the changelog provides.\n\n## Further reading\n\nA bulleted list of (usually) other AIPs, in the following format:\n\n- [AIP-1](./0001.md): AIP purpose and guidelines\n\n## Changelog\n\nA bulleted list of changes in reverse chronological order, using the following\nformat:\n\n- **2020-02-18**: Specified ordering.\n- **2019-07-01**: Added a subsection clarifying XYZ.\n```\n\nAIPs **should** attempt to follow this overall format if possible, but AIPs\n**may** deviate from it if necessary (in particular, if the AIP would be more\ndifficult to understand, even for a reader already accustomed to reading AIPs in\nthe usual format).\n\n**Note:** Except for the title, AIPs **must** only use the second heading level\n(`##`) and above. AIPs **should** only use the second and third heading levels\n(`##`, `###`).\n\n### Requirement keywords\n\nAIPs **should** use the following requirement level keywords: \"MUST\", \"MUST\nNOT\", \"SHOULD\", \"SHOULD NOT\", and \"MAY\", which are to be interpreted as\ndescribed in [RFC 2119][].\n\nWhen using these terms in AIPs, they **must** be lower-case and **bold**. These\nterms **should not** be used in other ways.\n\nIf \"SHOULD\" or \"SHOULD NOT\" are used, they **must** include valid examples of\nwhere other concerns may override the guidance.\n\n**Important:** If rationale is used, it exists to provide background and a more\ncomplete understanding, but **must not** contain guidance (and RFC-2119 terms\n**must not** be used).\n\n### Code examples\n\nAPI design examples in AIPs **should** use [protocol buffers][]. Examples\n**should** cover only enough syntax to explain the concept. When using RPCs in\nexamples, a `google.api.http` annotation **should** be included.\n\n### Referencing AIPs\n\nWhen AIPs reference other AIPs, the prosaic text **must** use the format\n`AIP-XXXX` without zero-padding (e.g., `AIP-8`, not `AIP-0008`), and **must**\nlink to the relevant AIP. AIP links **may** point to a particular section of the\nAIP if appropriate.\n\n**Important:** AIP links **must** use the relative path to the file in the\nrepository (such as `./0008.md` for core AIPs, or `../0008.md` for AIPs in a\nsubdirectory); this ensures that the link works both on the AIP site, when\nviewing the Markdown file on GitHub, using the local development server, or a\nbranch.\n\n## Rationale\n\n### Designing for a broad set of clients\n\nAPI guidance, similar to any software, is most beneficial when there is a clear\npurpose and target beneficiary.\n\nThe beneficiaries of improved API design are users. These users interact with\nAPIs via a variety of clients, depending on their use case as enumerated above.\n\nAPI guidance must in turn consider the impact broadly across these clients.\n\n[aip-1]: ./0001.md\n[Infrastructure as Code]: ./0009.md#iac\n[IaC]: ./0009.md#iac\n[protocol buffers]: https://developers.google.com/protocol-buffers/\n[rfc 2119]: https://www.ietf.org/rfc/rfc2119.txt\n\n## Changelog\n\n- **2023-05-20**: Increase API guidance scope to include broad set of clients.\n- **2023-03-30**: Removed appendix, added rationale and history to the template.\n- **2020-02-18**: Specified reverse chronological ordering for changelog items.\n- **2019-08-23**: Added guidance for internal AIP links."}