{"text": "---\nid: 140\nstate: approved\ncreated: 2019-07-22\nplacement:\n  category: fields\n  order: 0\n---\n\n# Field names\n\nNaming fields in a way that is intuitive to users can often be one of the most\nchallenging aspects of designing an API. This is true for many reasons; often a\nfield name that seems entirely intuitive to the author can baffle a reader.\n\nAdditionally, users rarely use only one API; they use many APIs together. As a\nresult, a single company using the same name to mean different things (or\ndifferent names to mean the same thing) can often cause unnecessary confusion,\nbecause users can no longer take what they've already learned from one API and\napply that to another.\n\nIn short, APIs are easiest to understand when field names are simple,\nintuitive, and consistent with one another.\n\n## Guidance\n\nField names **should** be in correct American English.\n\nField names **should** clearly and precisely communicate the concept being\npresented and avoid overly general names that are ambiguous. That said, field\nnames **should** avoid including unnecessary words. In particular, avoid\nincluding adjectives that always apply and add little cognitive value. For\nexample, a `proxy_settings` field might be as helpful as\n`shared_proxy_settings` if there is no unshared variant.\n\n### Case\n\nField definitions in protobuf files **must** use `lower_snake_case` names.\nThese names are mapped to an appropriate naming convention in JSON and in\ngenerated code.\n\nAdditionally, each word in the field **must not** begin with a number, because\nit creates ambiguity when converting between snake case and camel case.\nSimilarly, fields **must not** contain leading, trailing, or adjacent\nunderscores.\n\n### Uniformity\n\nAPIs **should** endeavor to use the same name for the same concept and\ndifferent names for different concepts wherever possible. This includes names\nacross multiple APIs, in particular if those APIs are likely to be used\ntogether.\n\n### Repeated fields\n\nRepeated fields **must** use the proper plural form, such as `books` or\n`authors`. On the other hand, non-repeated fields **should** use the singular\nform such as `book` or `author`. This implies that resource names **should**\nuse the singular form as well, since the field name should follow the resource\nname (e.g., use `repeated Book books`, **not** `Books books = 1`).\n\n### Prepositions\n\nField names **should not** include prepositions (such as \"with\", \"for\", \"at\",\n\"by\", etc). For example:\n\n- `error_reason` (**not** `reason_for_error`)\n- `author` (**not** `written_by`)\n\nIt is easier for field names to match more often when following this\nconvention. Additionally, prepositions in field names may also indicate a\ndesign concern, such as an overly-restrictive field or a sub-optimal data type.\nThis is particularly true regarding \"with\": a field named `book_with_publisher`\nlikely indicates that the book resource may be improperly structured and worth\nredesigning.\n\n**Note:** The word \"per\" is an exception to this rule, particularly in two\ncases. Often \"per\" is part of a unit (e.g. \"miles per hour\"), in which case the\npreposition must be present to accurately convey the unit. Additionally, \"per\"\nis often appropriate in reporting scenarios (e.g. \"nodes per instance\" or\n\"failures per hour\").\n\n### Adjectives\n\nFor uniformity, field names that contain both a noun and an adjective\n**should** place the adjective _before_ the noun. For example:\n\n- `collected_items` (**not** `items_collected`)\n- `imported_objects` (**not** `objects_imported`)\n\n### Verbs\n\nField names **must not** be named to reflect an intent or action. They\n**must not** be verbs. Rather, because the field defines the *desired\nvalue* for mutations, e.g. Create and Update, and the *current value*\nfor reads, e.g.  Get and List, the name **must** be a noun. It defines\nwhat is so, not what to do.\n\n- `collected_items` (**not** `collect_items`)\n- `disabled` (**not** `disable`)\n\nIn contrast, method names, whether standard or custom, change facets of\nresources and are named as verbs.\n\n### Booleans\n\nBoolean fields **should** omit the prefix \"is\". For example:\n\n- `disabled` (**not** `is_disabled`)\n- `required` (**not** `is_required`)\n\n**Note:** Field names that would otherwise be [reserved words](#reserved-words)\nare an exception to this rule. For example, `is_new` (**not** `new`).\n\n### String vs. bytes\n\nWhen using `bytes`, the contents of the field are base64-encoded when using\nJSON on the wire. Services **should** use `bytes` when there is a need to send\nbinary contents over the wire, and **should not** ask the user to manually\nbase64-encode a field into a `string` field.\n\n### URIs\n\nField names representing URLs or URIs **should** always use `uri` rather than\n`url`. This is because while all URLs are URIs, not all URIs are URLs. Field\nnames **may** use a prefix in front of `uri` as appropriate.\n\n### Reserved words\n\nField names **should** avoid using names that are likely to conflict with\nkeywords in common programming languages, such as `new`, `class`, `function`,\n`import`, etc. Reserved keywords can cause hardship for developers using the\nAPI in that language.\n\n### Conflicts\n\nMessages **should not** include a field with the same name as the enclosing\nmessage (ignoring case transformations). This causes conflicts when generating\ncode in some languages.\n\n### Display names\n\nMany resources have a human-readable name, often used for display in UI. This\nfield **should** be called `display_name`, and **should not** have a uniqueness\nrequirement.\n\nIf an entity has an official, formal name (such as a company name or the title\nof a book), an API **may** use `title` as the field name instead. The `title`\nfield **should not** have a uniqueness requirement.\n\n## Further reading\n\n- For naming resource fields, see [AIP-122][].\n- For naming fields representing quantities, see [AIP-141][].\n- For naming fields representing time, see [AIP-142][].\n\n## Changelog\n\n- **2023-04-25**: Field names **must not** be expressed as verbs.\n- **2021-07-12**: Normalized display name guidance to \"should\".\n- **2021-04-07**: Added base64 and bytes guidance.\n- **2021-03-05**: Added prohibition on leading, trailing, or adjacent\n  underscores.\n- **2020-06-10**: Added prohibition on starting any word with a number.\n- **2020-05-29**: Added guidance around URIs.\n- **2020-03-24**: Added guidance around conflicting field and message names.\n- **2020-01-30**: Added guidance around `display_name` and `title`.\n\n[aip-122]: ./0122.md\n[aip-141]: ./0141.md\n[aip-142]: ./0142.md\n"}