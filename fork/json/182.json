{"text": "---\nid: 182\nstate: reviewing\ncreated: 2021-08-13\nplacement:\n  category: compatibility\n  order: 30\n---\n\n# External software dependencies\n\nSome services have a particular type of dependency on external software: they\nallow users to create resources that run on or expose the external software in\nsome way. For example:\n\n- A database admin service can allow users to create databases running on a\n  particular version of a particular database engine (for example, PostgreSQL\n  13.4).\n- A virtual machine service can allow users to create VMs running a particular\n  operating system (for example, Ubuntu 20.04).\n- An application or function platform service can allow users to write code\n  that runs against a particular version of a programming language (for\n  example, Node.js 16.6).\n\nServices that provide external software to users in this way will eventually\nneed to address the fact that all of these types of software have release\nlifecycles, and the versions they currently expose will eventually reach\nend-of-life.\n\n## Guidance\n\nServices that expose external software dependencies **should** allow users to\ncreate resources using any currently-supported LTS (long-term support) version\nof the supported software, and **may** allow users to create resources using\nnon-LTS versions.\n\nServices **should not** indefinitely allow users to create new resources using\nversions that have reached end-of-life, although they **may** have a transition\nperiod between when the software version reaches end-of-life and when support\nfor creating new resources with that version is removed.\n\n**Note:** Restricting or removing the ability to create resources using\nend-of-life versions of software is **not** considered a breaking change for\nthe service for the purpose of AIP-181, even though it actually is one.\nHowever, because the change can break existing users' workflows, services\n**must** notify users who are using resources approaching end-of-life.\n\nIf possible, services **should** allow previously-created resources to remain,\nand **may** warn users of the risks associated with continuing to use\nend-of-life software. Services **should not** proactively remove resources\nusing end-of-life software, or impose other restrictions on existing resources,\nunless critical security concerns require the service to do so.\n\n### Continued support\n\nIf supporting a version that has reached end-of-life is necessary for business\nreasons (usually because the end-of-life software still has significant\nadoption), the service **may** choose to officially support the end-of-life\nversion, but **must** take on the responsibility of patching and maintaining\nthe software if it does so.\n"}