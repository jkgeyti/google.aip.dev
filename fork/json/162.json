{"text": "---\nid: 162\nstate: draft\ncreated: 2019-09-17\nupdated: 2023-09-01\nplacement:\n  category: design-patterns\n  order: 88\n---\n\n# Resource Revisions\n\nSome APIs need to have resources with a revision history, where users can\nreason about the state of the resource over time. There are several reasons for\nthis:\n\n- Users may want to be able to roll back to a previous revision, or diff\n  against a previous revision.\n- An API may create data which is derived in some way from a resource at a\n  given point in time. In these cases, it may be desirable to snapshot the\n  resource for reference later.\n\n**Note:** We use the word _revision_ to refer to a historical reference for a\nparticular resource, and intentionally avoid the term _version_, which refers\nto the version of an API as a whole.\n\n## Guidance\n\nAPIs **may** store a revision history for a resource. Examples of when it is\nuseful include:\n\n- When it is valuable to expose older versions of a resource via an API. This\n  can avoid the overhead of the customers having to write their own API to store\n  and enable retrieval of revisions.\n- Other resources depend on different revisions of a resource.\n- There is a need to represent the change of a resource over time.\n\nAPIs implementing resources with a revision history **should** abstract resource\nrevisions as nested collection of the resource. Sometimes, the revisions\ncollection can be a top level collection, exceptions include:\n\n- If resource revisions are meant to have longer lifespan than the parent\nresource. In other words, resource revisions exist after resource deletion.\n\n\n```proto\nmessage BookRevision {\n  // The name of the book revision.\n  string name = 1;\n\n  // The snapshot of the book\n  Book snapshot = 2\n    [(google.api.field_behavior) = OUTPUT_ONLY];\n\n  // The timestamp that the revision was created.\n  google.protobuf.Timestamp create_time = 3\n    [(google.api.field_behavior) = OUTPUT_ONLY];\n\n  // Other revision IDs that share the same snapshot.\n  repeated string alternate_ids = 4\n    [(google.api.field_behavior) = OUTPUT_ONLY];\n}\n```\n\n- The `message` **must** be annotated as a resource (AIP-123).\n- The `message` name **must** be named `{ResourceType}Revision`.\n- The resource revision **must** contain a field with a message type of the\n  parent resource, with a field name of `snapshot`.\n    - The value of `snapshot` **must** be the configuration of the parent\n      at the point in time the revision was created.\n- The resource revision **must** contain a `create_time` field (see [AIP-142][]).\n- The resource revision **may** contain a repeated field `alternate_ids`, which would\n  contain a list of resource IDs that the revision is also known by (e.g. `latest`)\n\n### Creating Revisions\n\nDepending on the resource, different APIs may have different strategies for\n\n- Create a new revision any time that there is a change to the parent resource\n- Create a new revision when important system state changes\n- Create a new revision when specifically requested\n\nAPIs **may** use any of these strategies. APIs **must**\ndocument their revision creation strategy.\n\n### Resource names for revisions\n\nWhen referring to specific revision of a resource, the subcollection name\n**must** be named `revisions`. Resource revisions have names with the format\n`{resource_name}/revisions/{revision_id}`. For example:\n```\npublishers/123/books/les-miserables/revisions/c7cfa2a8\n```\n\n### Server-specified Aliases\n\nServices **may** reserve specific IDs to be [aliases][alias] (e.g.\n`latest`). These are read-only and managed by the service.\n\n```\nGET /v1/publishers/{publisher}/books/{book}/revisions/{revision_id}\n```\n\n- If a `latest` ID exists, it **must** represent the most recently created\nrevision. The content of `publishers/{publisher}/books/{book}/revisions/latest`\nand `publishers/{publisher}/books/{book}` can differ, as the latest revision may\nbe different from the current state of the resource.\n\n### User-Specified Aliases\n\nAPIs **may** provide a mechanism for users to assign an [alias][] ID to an\nexisting revision with a custom method \"alias\":\n\n```proto\nrpc AliasBookRevision(TagBookRevisionRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*/revisions/*}:alias\"\n    body: \"*\"\n  };\n}\n```\n\n```proto\nmessage AliasBookRevisionRequest {\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/BookRevision\"\n    }];\n\n  // The ID of the revision to alias to, e.g. `CURRENT` or a semantic\n  // version.\n  string alias_id = 2 [(google.api.field_behavior) = REQUIRED];\n}\n```\n\n- The request message **must** have a `name` field:\n  - The field **must** be [annotated as required][aip-203].\n  - The field **must** identify the [resource type][aip-123] that it\n    references.\n- The request message **must** have a `alias_id` field:\n  - The field **must** be [annotated as required][aip-203].\n- If the user calls the method with an existing `alias_id`, the request **must**\n  succeed and the alias will be updated to refer to the provided revision. This\n  allows users to write code against a specific alias (e.g. `published`) and the\n  revision can change with no code change.\n\n### Rollback\n\nA common use case for a resource with a revision history is the ability to roll\nback to a given revision. APIs **should** handle this with a `Rollback` custom\nmethod:\n\n```proto\nrpc RollbackBook(RollbackBookRequest) returns (BookRevision) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*/revisions/*}:rollback\"\n    body: \"*\"\n  };\n}\n```\n\n- The method **must** use the `POST` HTTP verb.\n- The method **should** return a resource revision.\n\n```proto\nmessage RollbackBookRequest {\n  // The revision that the book should be rolled back to.\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/BookRevision\"\n    }];\n}\n```\n\n- The request message **must** have a `name` field, referring to the resource\n  revision whose configuration the resource should be rolled back to.\n  - The field **must** be [annotated as required][aip-203].\n  - The field **must** identify the [resource type][aip-123] that it\n    references.\n\n### Child resources\n\nResources with a revision history **may** have child resources. If they do,\nthere are two potential variants:\n\n- Child resources where each child resource is a child of the parent resource\n  as a whole.\n- Child resources where each child resource is a child of _a single revision\n  of_ the parent resource.\n\nAPIs **should not** include multiple levels of resources with revisions, as\nthis quickly becomes difficult to reason about.\n\n### Standard methods\n\nAny standard methods **must** implement the corresponding AIPs (AIP-131,\nAIP-132, AIP-133, AIP-134, AIP-135), with the following additional behaviors:\n\n- List methods: By default, revisions in the list response **must** be ordered\n  in reverse chronological order. User can supply `order_by` to override the\n  default behavior.\n- If the revision supports aliasing, a delete method with the resource name\n  of the alias (e.g. `revisions/1.0.2`) **must** remove the alias instead of\n  deleting the resource.\n\nAs revisions are nested under the resource, also see [cascading delete][].\n\n## Rationale\n\n### Abstract revisions as nested collection\n\nRevisions being resources under nested collection make revisions a first class\ncitizen.\n\n- Revisions can offer standard get, list, and delete methods.\n- It retains the flexibility of extending new fields to revision in addition to\n  the resource message.\n\n### Tagging to Aliases\n\nPreviously, a concept of `tag` existed. This concept was redundant with that of\nan [alias][], and the terms were consolidated to reduce complexity in the AIPs.\n\n### Output only resource configuration\n\nAlthough it was an option to have the revision take in the resource\nconfiguration as part of the create method, doing so would have allowed users to\nsubmit resource configuration for a revision that the resource was never in.\n\n`OUTPUT_ONLY` and requiring that a created revision represents the resource at\ncurrent point in time eliminates that issue.\n\n## History\n\n### Switching from a collection extension to a subcollection\n\nIn 2023-09, revisions are abstracted as a nested resource collection. Prior to\nthis, revisions are more like extension of an existing resource by using `@`\nsymbol. List and delete revisions were custom methods on the resource\ncollection. A single Get method was used to retrieve either the resource\nrevision, or the resource.\n\nIts primary advantage was allowing a resource reference to seamlessly refer to\na resource, or its revision.\n\nIt also had several disadvantages:\n\n-  List revisions is a custom method (:listRevisions) on the resource collection\n-  Delete revision is a custom method on the resource collection\n-  Not visible in API discovery doc\n-  Resource ID cannot use `@`\n\nThe guidance was modified ultimately to enable revisions to behave like a\nresource, which reduces the users cognitive load and allows resource-oriented\nclients to easily list, get, create, and update revisions.\n\n### Using resource ID instead of tag\n\nIn the previous design, revisions had a separate identifer for a revision known\nas a `tag`, that would live in a revision.\n\nTags were effectively a shadow resource ID, requiring methods to create, get and\nfilter revisions based on the value of the tag.\n\nBy consolidating the concept of a tag into the revision ID, the user no longer\nneeds to be familiar with a second set of retrieval and identifier methods.\n\n## Changelog\n\n- **2023-09-01**: AIP was updated to be a sub-collection.\n- **2021-04-27**: Added guidance on returning the resource from Delete Revision.\n\n[alias]: ./0122.md#resource-id-aliases\n[cascading delete]: ./0135.md#cascading-delete\n[UUID4]: https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)\n"}