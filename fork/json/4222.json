{"text": "---\nid: 4222\nstate: approved\ncreated: 2018-06-22\n---\n\n# Routing headers\n\nIn some situations, a gRPC API backend is able to route traffic more\nefficiently if it knows about some values in the request; however, the request\npayload can not be reasonably deconstructed on the wire to perform that\nrouting.\n\n## Guidance\n\nCode generators **must** use the annotations to generate client libraries that,\non a per-RPC basis, extract routing information from the request payload and\nadd that information to the routing header.\n\nThere are two annotations that specify how to extract routing information from\nthe request payload:\n\n* the [`google.api.routing`][routing] annotation that specifies how to construct \nrouting headers explicitly \n* the [`google.api.http`][http] annotation that may specify how to construct \nrouting headers implicitly.\n\nFor any given RPC, if the explicit routing headers annotation is present, the code\ngenerators **must** use it and ignore any routing headers that might be implicitly\nspecified in the [`google.api.http`][http] annotation. If the explicit routing\nheaders annotation is absent, the code generators **must** parse the\n[`google.api.http`][http] annotation to see if it specifies routing headers\nimplicitly, and use that specification.\n\n## Explicit Routing Headers (`google.api.routing`)\n\nFor an unary or server-streaming RPC the code generator **must** look at the routing\nparameters specified in the [`google.api.routing`][routing] annotation, if present.\nAny given routing parameter specifies a field name and a pattern with exactly one\nnamed resource ID path segment. For example:\n\n```proto\nrpc CreateTopic(CreateTopicRequest) {\n  option (google.api.routing) = {\n    routing_parameters {\n      field: \"parent\"\n      path_template: \"{project=projects/*}/**\"\n    }\n  }\n}\n```\n\nThe value of the field `field` **must** be one of the following:\n\n1. a name of a field in the top-level of the request message\n1. a dot-separated path of field names leading to a field in a sub-message of\nthe request message e.g. `\"book.author.name\"` where `book` is a message field in\nthe request message, `author` is a message field in the `book` message, and\n`name` is a `string` field in the `author` message\n\nThe _actual field_ specified in the field `field` **must** have the following\ncharacteristics:\n- it is type `string`\n- it either has a path-like value format resembling a resource name or contains\n  an unstructured value that would be appropriate as an individual path segment\n  e.g. a `project_id`. \n\n**Note:** An empty `google.api.routing` annotation is acceptable. It means that no\nrouting headers should be generated for the RPC, when they otherwise would be\ne.g. implicitly from the `google.api.http` annotation.\n\n**Note:** It is acceptable to omit the pattern in the resource ID segment, `{parent}`\nfor example, is equivalent to `{parent=*}` and **must** be parsed, e.g.:\n```proto\nrouting_parameters {\n  field: \"parent\"\n  path_template: \"projects/{parent}\"\n}\n```\n\nis the same as\n\n```proto\nrouting_parameters {\n  field: \"parent\"\n  path_template: \"projects/{parent=*}\"\n}\n```\n\n**Note:** It is acceptable to omit the `path_template` field altogether. An omitted \n`path_template` is equivalent to a `path_template` with the same resource ID name as\nthe field and the pattern `**`, and **must** be parsed, e.g.:\n```proto\nrouting_parameters {\n  field: \"parent\"\n}\n```\n\nis the same as\n\n```proto\nrouting_parameters {\n  field: \"parent\"\n  path_template: \"{parent=**}\"\n}\n```\n\n**Note:** An omitted `path_template` field does not indicate that key-value\npairs with empty values can be sent. It's merely a shorthand.\n\nWhen the user supplies an instance of `CreateTopicRequest` to the method, the\nclient library **must** match all the routing parameters in the order specified\nto the fields of that instance. For each routing parameter, the pattern in the\n`path_template` **must** be matched to the input message field specified by the\nrouting parameter's `field` field. In case of a match, the name of the resource ID\npath segment must be used as a key, and the value of the resource ID path segment match \nmust be used as a value of a key-value pair to be appended to the `x-goog-request-params`\nheader. \n\nBoth the key and the value **must** be URL-encoded per [RFC 6570 \u00a73.2.2][].\nThis can be done with standard library URL encoding. For example, adding this header\nto a gRPC request in Ruby:\n\n```ruby\nheader_params = {}\nif (pattern_matches(\"{project=projects/*}/**\", request.parent))\n  header_params[\"project\"] = extract_match_value(\"{project=projects/*}/**\", request.parent)\nend\nrequest_params_header = URI.encode_www_form header_params\nmetadata[:\"x-goog-request-params\"] = request_params_header\n```\n\nIn cases when multiple routing parameters have the same resource ID path segment name,\nthus referencing the same header key, the \"last one wins\" rule is used to determine\nwhich value to send. The \"last\" here is meant in terms of the order in which they're specified in the annotation. If some of the routing parameters with the same resource ID segment\nname have failed to match the field, or if the field was unset, or if the extracted matched value\nis an empty string, these parameters are not considered when determining which value\nto send.\n\nExample:\n\n```proto\noption (google.api.routing) = {\n  routing_parameters {\n    field: \"parent\"\n    path_template: \"{project=projects/*}/**\"\n  }\n  routing_parameters {\n    field: \"parent\"\n    path_template: \"{project=projects/*/subprojects/*}/**\"\n  }\n  routing_parameters {\n    field: \"billing_project\"\n    path_template: \"{project=**}\"\n  }\n}\n```\n\nIn this case if in a given request the `billing_project` field is set to an non-empty value,\nits value will be sent with the `project` key because the routing parameter looking at `billing_project` field is specified last. If the `billing_project` field is not set, the `parent` field will be considered, first trying to send a\nproject with a subproject specified, and then without. Note that if a given request has a\n`parent` field with a value e.g. `projects/100/subprojects/200/foo`, patterns in both first and second `routing_parameters` will match it, but the second one will \"win\" since it is specified \"last\".\n\nIf all the routing parameters with the same resource ID segment name have failed\nto match the field, the key-value pair corresponding to those routing parameters'\nresource ID path segment name **must not** be sent.\n\nIf none of the routing parameters matched their respective fields, the routing header\n**must not** be sent.\n\nMuch like URL parameters, if there is more than one key-value pair to be sent, the `&`\ncharacter is used as the separator.\n\n### `path_template` syntax\n\nAs seen in the above examples, the `path_template` can use a variety of symbols\nthat are interpreted by code generators during conversion to regular expressions\nor non-regular expression matcher implementations. The `path_template` consists\nof segments delimited by the segment delimiter. The syntax for `path_template`\nis as follows:\n\n- The only acceptable segment delimiter is `/`.\n  - The last symbol in a `path_template` **may** be a delimiter - it will be \n    ignored.\n- A segment **must** be of one of the following types:\n  - `*`: A single-segment wildcard. Corresponds to 1 or more non-`/` symbols.\n    The regex describing it is `[^/]+`.\n    - A Single-segment wildcard typically represents a resource ID.\n  - `**`: A multi-segment wildcard. Corresponds to 0 or more segments. \n    - A multi-segment wildcard **must** only appear as the final segment or\n      make up the entire `path_template`.\n    - In a multi-segment `path_template`, a multi-segment wildcard **must**\n      appear immediately following a segment delimiter. This delimiter is\n      consumed while matching so a `path_template` like `foo/**` matches all of\n      the following: `foo`, `foo/`, `foo/bar/baz`.\n    - In a multi-segment `path_template`, when used as the last segment the\n      regex describing it is `([:/].*)?`.\n    - When used as the entire `path_template`, the regex describing it is `.*`.\n    - Segment delimiters are consumed while matching, including any preceding\n      delimiter.\n  - `LITERAL`: A literal segment. A literal segment can contain any\n    alphanumeric symbol.\n    - A literal segment **must not** contain a symbol reserved in this syntax.\n    - Literal segments typically represent a resource collection ID or base\n      path.\n  - `{}`: A variable segment. This matches part of the path as specified by its\n    template.\n    - A variable segment can be either of the following:\n      - `{key}`, where `key` is the name to be used in the key-value pair of the\n        header\n      - `{key=template}`, where the `template` is the segment(s) (expressed in\n        this `path_template` syntax) to extract as the value paired with `key`\n    - A variable segment of just `{key}` defaults to a template of `*` which\n      matches 1 or more non-`/` symbols.\n      - While `{key=*}` is technically valid syntax, the simpler syntax of\n        `{key}` **should** be used.\n    - A variable segment **must not** contain other variable segments. This\n      syntax is not recursive.\n- A segment **must not** represent a complex resource ID as described in\n  [AIP-4231][]. A Generator **should** emit an error in this case.\n\n## Implicit Routing Headers (`google.api.http`)\n\n**Note:** For an RPC annotated with the [`google.api.routing`][routing] annotation,\nthe [`google.api.http`][http] annotation must be ignored for the purpose of adding\nrouting headers.\n\nIf an unary or server-streaming RPC is not annotated with the [`google.api.routing`][routing]\nannotation, code generators **must** look at URI-based variables declared in the\n[`google.api.http`][http] annotation and transcribe these into the\n`x-goog-request-params` header in unary calls. A URI-based variable is a\nvariable declared as a key in curly braces in the URI string. For example:\n\n```proto\nrpc CreateTopic(CreateTopicRequest) {\n  option (google.api.http).post = \"{parent=projects/*}/topics\";\n}\n```\n\n**Note:** It is acceptable to omit the pattern in the resource ID segment, `{parent}`\nfor example, is equivalent to `{parent=*}` and **must** be parsed.\n\nIn this case, the applicable variable is `parent`, and it refers to the\n`parent` field in `CreateTopicRequest`. When the user provides an instance of\n`CreateTopicRequest` to the method (or once the client library has built it, in\nthe case of method overloads), the client library must extract the key and\nvalue, and append them to the `x-goog-request-params` header. Both the key and\nthe value **must** be URL-encoded per [RFC 6570 \u00a73.2.2][rfc 6570 \u00a73.2.2]. This can be done\nwith standard library URL encoding. For example, adding this header to a gRPC\nrequest in Go:\n\n```go\nmd := metadata.Pairs(\"x-goog-request-params\",\n  url.QueryEscape(\"parent\") + \"=\" + url.QueryEscape(req.GetParent()))\n```\n\nAt runtime, if a field with the same name as the named parameter is unset on the\nrequest message, the key-value pair corresponding to that parameter **must not**\nbe included in the routing header. If none of the parameters must be included in\nthe routing header, the routing header **must not** be sent.\n\nIf the [`google.api.http`][http] annotation contains `additional_bindings`,\nthese patterns **must** be parsed for additional request parameters. Fields\nnot duplicated in the top-level (or `additional_bindings`) pattern **must**\nbe included in request parameters, encoded in the same way.\n\nMuch like URL parameters, if there is more than one key-value pair, the `&`\ncharacter is used as the separator.\n\n<!-- prettier-ignore -->\n[http]: https://github.com/googleapis/googleapis/blob/master/google/api/http.proto\n[routing]: https://github.com/googleapis/googleapis/blob/master/google/api/routing.proto\n[rfc 6570 \u00a73.2.2]: https://tools.ietf.org/html/rfc6570#section-3.2.2\n[AIP-4231]: ./4231.md#complex-resource-id-path-segments\n\n## Changelog\n- **2023-07-07**: Include `path_template` syntax.\n- **2022-07-13**: Updated to include the new `google.api.routing` annotation.\n- **2020-04-21**: Explicitly parse path variables missing a trailing segment.\n- **2019-11-27**: Include `additional_bindings` as a request parameter source.\n- **2019-06-26**: Fix wording and example of key-value pair encoding.\n- **2019-06-20**: Specify encoding of header parameters.\n"}