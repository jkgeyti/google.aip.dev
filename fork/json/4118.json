{"text": "---\nid: 4118\nscope: auth\nstate: draft\ncreated: 2022-09-09\n---\n\n# Mutual Authentication Using Workload Credentials\n\nMutual TLS (a.k.a mTLS) authentication enables authentication of both client and\nserver identities in a TLS handshake. With workload credentials, applications\nrunning in Google Cloud can authenticate to Google APIs using [X.509 SPIFFE\nVerifiable Identity Documents][0] (SVIDs). These SVIDs are X.509 certificates\nthat contain [SPIFFE IDs][1] specifying the identity of the certificate owners.\nmTLS authentication using X.509 SVIDs occurs when the client uses an X.509 SVID\nwhen performing the TLS handshake.\n\n**Note:** Because this AIP describes guidance and requirements in a\nlanguage-neutral way, it uses generic terminology which may be imprecise or\ninappropriate in certain languages or environments.\n\n## Guidance\n\nIf users enable token binding, they **should** do so via [ADC][2]. This section\ndescribes the general guidance of supporting such authentication.\n\n### Provisioning Workload Credentials in Google Cloud\n\nOn Google Cloud, workload credentials should be provisioned using one of the\nfollowing methods:\n\n- [Set up service security with Envoy][3].\n\n- [Set up service security with proxyless gRPC][4].\n\nIn order for workload credentials to be properly used, the auth libraries\n**must** support the automatic switching of the service endpoint to its mTLS\ncounterpart.\n\n### Using Workload Credentials\n\nUsers **should** configure [ADC][2] to use workload credentials via the\ncertificate configuration gcloud metadata file. Workload credentials can be\nadded as a **\"cert_configs\"** type as follows:\n\n```json\n{\n  \"version\": 1\n  \"cert_configs\": {\n    \"workload\": {\n      \"cert_path\": \"path/to/cert/file\"\n      \"key_path\": \"path/to/key/file\"\n      \"workload_identity_provider\": \"...\"\n      \"authenticate_as_identity_type\": \"gsa/native\"\n      \"service_account_email\": \"...\"\n    },\n    \"keychain\": {\n      ...\n    },\n    \"pkcs11\": {\n      ...\n    },\n    \"windows\": {\n      ...\n    },\n  },\n  \"libs\": {\n   ...\n  }\n}\n```\n\nFor Linux and macOS platforms, the above metadata file is located in the\nwell-known gcloud config directory at\n**\"~/.config/gcloud/certificate_config.json\"**. Note that the default location\nof this file can be changed using the `GOOGLE_API_CERTIFICATE_CONFIG`\nenvironment variable.\n\nThe following lists the fields of the **\"workload\"** certificate info type that\nare relevant to workload credentials:\n\n- **\"cert_path\"**: The specified value will be used as the full path to locate\nthe workload certificate file. This file **must** contain a PEM-encoded\nX.509 certificate chain (ordered from leaf to root) where the leaf\ncertificate is a valid X.509 SVID. The chain __may__ consist of only the\nleaf certificate.\n\n- **\"key_path\"**: The specified value will be used as the full path to locate\nthe workload private key file. This file must contain a PEM-formatted\nprivate key associated with the X.509 certificate specified by\n**\u201ccert_path\u201d**.\n\nThe description of the **\"workload_identity_provider\"**,\n**\"authenticate_as_identity_type\"** and **\"service_account_email\"** fields can\nbe found in [mTLS Token Binding][5].\n\nTo enable mutual authentication to Google APIs using workload credentials, the\n**\"workload\"** section and its **\"cert_path\"** and **\"key_path\"** values must be\npresent in the **\"~/.config/gcloud/certificate_config.json\"** configuration\nfile.\n\n### Expected Behavior\n\nSupport for mTLS authentication to Google APIs using workload credentials\n**must** give priority to user mTLS endpoint override via client options. The\nauth libraries **must** follow the steps below:\n\n- Locate the workload certificate and private key files using the above\nconfig file. If one of these files is not present, mTLS using workload\ncredentials may be disabled. The auth libraries **must** check that the\npublic and private keys in the certificate and key files match before\npassing them to the TLS library.\n\n  - Occasional mismatches may happen, since during certificate rotation the\n    client library may read the two files while another process is replacing\n    them. In that case, the library **must** retry reading the certificate\n    and private key files and checking their match status, up to a maximum\n    of four attempts. The library **should** wait for 5 seconds between\n    attempts.\n  - If the certificate and private key files are loaded in memory (as\n    opposed to being read from disk for every mTLS connection), the auth\n    libraries **must** periodically reload them (at least every 10 minutes\n    or when the certificate expires) to refresh their copies in memory after\n    the infrastructure rotates them. Refreshing the credentials **must** be\n    done in a background thread and not upon usage.\n    \n- Configure the TLS library to use the found, and matched, certificate and\nkey for client authentication during the TLS handshake.\n\n- If the user specifies the endpoint override via client options, use it as is\nand connect to the specified endpoint using mTLS.\n\n- If the user does not specify the endpoint override, use the default mTLS\nendpoint if the certificate and key files exist and the default regular\nendpoint otherwise.\n    \nNote that mTLS 1.3 **must** be the only supported version to preserve client\nidentity and certificate confidentiality.\n\nOne implication of the above logic is that if the user enables mTLS\nauthentication using workload credentials, provides valid certificate and key\nfiles, and specifies a non-mTLS endpoint override, the client libraries\n**should** use the certificate and key anyway and let the server decide what to\ndo. This avoids introducing client-side logic that parses whether the endpoint\noverride is an mTLS URL, since the URL pattern may change at any time.\n\n### Obtaining the Default mTLS Endpoint\n\nThe default mTLS endpoint for a service **should** be read from the Discovery\nDocument field **\"mtlsRootUrl\"** instead of generated via regex patterns.\n\n<!-- prettier-ignore-start -->\n[0]: https://github.com/spiffe/spiffe/blob/main/standards/X509-SVID.md\n[1]: https://github.com/spiffe/spiffe/blob/main/standards/SPIFFE-ID.md#2-spiffe-identity\n[2]: https://google.aip.dev/auth/4110\n[3]: https://cloud.google.com/traffic-director/docs/security-envoy-setup\n[4]: https://cloud.google.com/traffic-director/docs/security-proxyless-setup\n[5]: https://google.aip.dev/auth/4119\n<!-- prettier-ignore-end -->\n"}