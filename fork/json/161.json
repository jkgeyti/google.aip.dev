{"text": "---\nid: 161\nstate: approved\ncreated: 2021-03-01\nplacement:\n  category: design-patterns\n  order: 85\n---\n\n# Field masks\n\nOften, when updating resources (using an update method as defined in AIP-134 or\nsomething reasonably similar), it is desirable to specify exactly which fields\nare being updated, so that the service can ignore the rest, even if the user\nsends new values.\n\nIt is tempting to define a mask format to handle the precise needs for each\nAPI. However, masking requirements evolve, and therefore it is prudent to use a\nstructured syntax. This allows updates to be able to be made transparently,\nwithout waiting for UI or client updates.\n\n## Guidance\n\nThese masks of field names are called \"field masks\". Fields representing a field\nmask **must** use the `google.protobuf.FieldMask` type. Field masks are most\ncommon on Update requests (AIP-134).\n\nField masks **must** always be relative to the resource:\n\n**Warning:** Read masks as a single field on the request message, for\nexample: `google.protobuf.FieldMask read_mask` are **DEPRECATED**.\n\n```proto\nmessage UpdateBookRequest {\n  // The book to update.\n  //\n  // The book's `name` field is used to identify the book to update.\n  // Format: publishers/{publisher}/books/{book}\n  Book book = 1 [(google.api.field_behavior) = REQUIRED];\n\n  // The list of fields to update.\n  // Fields are specified relative to the book\n  // (e.g. `title`, `rating`; *not* `book.title` or `book.rating`).\n  google.protobuf.FieldMask update_mask = 2;\n}\n```\n\n### Read-write consistency\n\nRead and write behavior for field masks **must** be self-consistent if a mask\nis present:\n\n- If a user updates a resource with a given mask, and then reads the same\n  resource with the same mask, the exact same data **must** be returned.\n  - Exception: [Output only fields](#output-only-fields).\n- Similarly, reading a resource with a given mask and then updating the\n  resource with the returned data and the same mask **must** be a no-op.\n\n**Note:** This implies that any mask that is valid for either read or write\n**must** be valid for both.\n\n### Specifying specific fields\n\nField masks **must** permit the specification of specific fields in a defined\nstruct, using the `.` character for traversal.\n\nBecause field masks are always relative to the resource, direct fields on the\nresource require no traversal (examples: `title`, `rating`). Traversal is used\nwhen resources contain messages (example: `author.given_name`).\n\n**Note:** A user **must** be able to specify either a field as a whole, or one\nof its subfields: `author` and `author.given_name` are both valid.\n\n### Map fields\n\nField masks **may** permit the specification of specific fields in a map, if\nand only if the map's keys are either strings or integers, using the `.`\ncharacter for traversal.\n\nField masks **should** support string keys that contain characters that are\nproblematic for the field mask syntax, using the backtick character.\n\n```proto\nmessage Book {\n  // The name of the book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1;\n\n  // Reviews for the back cover. The key is the author of the review,\n  // and the value is the text of the review.\n  //\n  // Valid field masks: reviews, reviews.smith, reviews.`John Smith`\n  map<string, string> reviews = 2;\n}\n```\n\n### Wildcards\n\nField masks **may** permit the use of the `*` character on a repeated field or\nmap to indicate the specification of particular sub-fields in the collection:\n\n```proto\nmessage Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // The name of the book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The author or authors of the book.\n  // Valid field masks: authors, authors.*.given_name, authors.*.family_name\n  // Invalid field masks: authors.0, authors.0.given_name\n  repeated Author authors = 2;\n}\n\nmessage Author {\n  // The author's given name.\n  string given_name = 1;\n\n  // The author's family name.\n  string family_name = 2;\n}\n```\n\n**Note:** Field masks **must not** permit accessing a particular element of a\nrepeated field by index, and **must** return an `INVALID_ARGUMENT` error if\nthis is attempted.\n\n### Output only fields\n\nIf a user includes an output only field in an update mask indirectly (by using\na wildcard or specifying an overall message that includes an output-only\nsubfield), the service **must** ignore any output only fields provided as\ninput, even if they are cleared or modified.\n\nIf a user directly specifies an output only field in an update mask, the\nservice **must** ignore the output only fields provided as input, even if\nthey are cleared or modified, to permit the same field mask to be used for\ninput and output.\n\n### Invalid field mask entries\n\nWhen reading data, field masks **may** ignore entries that point to a value\nthat can not exist (either a field that does not exist, or a map key that the\nservice considers invalid).\n\nWhen writing data, field masks **should** return an `INVALID_ARGUMENT` error if\nan entry points to a value that can not exist; however, the service **may**\npermit deletions.\n\n## Changelog\n\n- **2023-10-18**: Update guidance for presence of output only fields in update\n  mask.\n- **2023-07-17**: Move `update_mask` guidance to AIP-134.\n"}