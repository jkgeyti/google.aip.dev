{"text": "---\nid: 3020\nstate: approved\ncreated: 2020-03-11\n---\n\n# BII Schema Principles\n\nBuilt-in intents (BIIs) allow third party developers to declare what their\nActions can do. When a developer registers an Action for a BII, Google can then\ninvoke that action to fulfill user requests matching that built-in intent.\n\n## Terminology\n\nIn the general principles below, we use the following terms:\n\n- **Built-in intents (BII)**: Fulfillment schemas that are used to call\n  compatible APIs to perform Actions in response to a user query. Built-in\n  intents allow your service to express its fulfillment capabilities to Google.\n  By registering for built-in intents and mapping intent parameters to the\n  fulfillment, it becomes possible for the Google Assistant to invoke the\n  service to perform a task in response to natural language queries.\n\n  A BII comprises an operation (full list below) and a Schema.org entity,\n  otherwise known as a type. For example, `CREATE_RESERVATION` would be a BII\n  for initiating a new reservation; this intent applies to various domains such\n  as airline, hotel, restaurant, and other reservations.\n\n- **Operation**: An Action which acts as a wrapper around a type.\n- **Type**: The object on which the operation is acting upon.\n\n## General principles\n\nEach BII **should** be treated like an API. While BIIs are technically\nfulfillment schemas, they fill the same role as an API, in that they tell third\nparty developers about the structure of the request that their Action handles.\n\nThis AIP details principles for schema creation, with operation-specific and\ntype-specific information, followed by a list of operations for BIIs.\n\n### Schema creation\n\n- Existing Schema.org types and properties **should** be reused whenever the\n  semantics needed already exist.\n- The formula for naming a BII **must** be:\n  - **Operation + Type** `:=` `VERB` [\"Operation\" from list below] + '\\_' +\n    `NOUN` [\"Type\" from Schema.org].\n  - Types can be compound nouns which have more than one token. Types with more\n    than one token have tokens separated by '\\_'.\n    - _Example: `CREATE` + '\\_' + `MONEY_TRANSFER` = `CREATE_MONEY_TRANSFER`_\n- BII names **must** be in CAPITAL_SNAKE_CASE (e.g. VERB_NOUN_NOUN).\n- For more detail, see [here](https://schema.org/docs/documents.html).\n\n#### Operations\n\n- Operations comprise a small catalog of simple, generalizable verbs. These can\n  be found at the bottom of the AIP under \"List of BII Operations.\"\n- There **must not** be overlap between the scope covered by any operations\n  (mutual exclusivity).\n  - _Example: `GET` and `CREATE` do not overlap in scope; while both involve\n    presenting an object, `GET` is for retrieving an existing object, while\n    `CREATE` assumes no object yet exists and creates one._\n- Operation + type combos **should** make semantic sense. If there is no\n  operation that can work with the type chosen, either:\n  - Choose a new type that is in semantic scope for the Action to attach to an\n    existing operation, with a semantically sensible result.\n    - _Example: Say you want to fulfill a request for checking into a\n      reservation. `CREATE_CHECKIN` does not seem to make the most semantic\n      sense, since nothing is being created. Upon further thought, you decide\n      to choose a different operation and call the BII `UPDATE_RESERVATION`\n      instead, which makes more sense with the semantics of checking into a\n      reservation._\n  - Or, Create a new operation. Take this step only when there is no operation\n    in the list that can cover the Action requested for the schema.\n    - _Example: Imagine you only had the operations `START`, `STOP`, and\n      `RESUME` for controlling an ongoing activity. A fulfillment request comes\n      in for temporarily stopping an ongoing activity of media playback but not\n      terminating it. You try to create a BII called `STOP_MEDIA`, but then\n      realize that this operation means the API must terminate the activity.\n      You then create a new operation, `PAUSE`, which acts to \"temporarily\n      stop/pause activity\", and does not overlap in scope with the existing\n      operation, `STOP`. Your new BII is `PAUSE_MEDIA`._\n\n#### Types\n\n- Types **must** be defined as Schema.org types.\n- The type **must** be the _object_ upon which the operation is carried out.\n- Semantic scope of the type **should** be generalizable, specificity **may**\n  be in properties.\n  - _Example: [Reservation][] is a type, which has a property named `provider`.\n    The `provider` property specifies the service provider, service operator,\n    or service performer. This ensures that any BII created using the type\n    [Reservation][] is generalizable to any service provider, and that the\n    service provider information is still passed forward through\n    [Reservation][]\u2019s property `provider`._\n- Different types **should** take distinctly different properties.\n- BIIs **must** be specific enough to avoid semantic ambiguity when calling an\n  API. That is, we shouldn\u2019t inadvertently trigger an Action that the user\n  isn\u2019t expecting.\n  - _Example: brokerage account vs. account: If we do not specify brokerage\n    account, a `GET_ACCOUNT` BII could call an API that fulfills the Action for\n    getting another sort of account\u2019s information, such as a social media\n    account. `GET_BROKERAGE_ACCOUNT` ensures the correct scope of financial\n    account is retrieved by the API._\n- The function prototype/set of parameters **should** be bound to the\n  operation. That is, the operation decides the fulfillment boundaries of the\n  Action.\n- Each BII operation **must** take a Schema.org type.\n- In BII schemas, the same Schema.org type, when combined with different verbs,\n  **may** take different properties.\n  - _Example: `GET_MESSAGE` and `CREATE_MESSAGE` use a different but\n    overlapping set of properties of [Message][]._\n\n## Handling User Queries\n\n- Generic/unresolved search criteria at the level of an object **should** be\n  passed through the Description field.\n- If a query argument can be recognized as a property of a type, it **should**\n  be passed through as a property; if, on the other hand, an argument is\n  recognized as just a description of the type, it **should** be passed through\n  Description field.\n  - _Example: \"find funky blues songs on YouTube\" ->\n    get_media_object(description=\"funky blues\")._\n\n## List of BII Operations\n\n| Verb   | Definition                                                    | Example BII schema |\n| ------ | ------------------------------------------------------------- | ------------------ |\n| GET    | retrieve & present an object; if ambiguous, a list of objects | GET_CALL_HISTORY   |\n| CREATE | create an object                                              | CREATE_ORDER       |\n| DELETE | remove or terminate an existing object                        | DELETE_RESERVATION |\n| START  | control an ongoing activity: start activity                   | START_GAME         |\n| STOP   | control an ongoing activity: stop activity                    | STOP_ALARM         |\n| PAUSE  | control an ongoing activity: temporarily stop/pause activity  | PAUSE_SONG         |\n| RESUME | control an ongoing activity: continue activity                | RESUME_TIMER       |\n\n<!-- prettier-ignore-start -->\n[message]: http://schema.org/Message\n[reservation]: http://schema.org/Reservation\n<!-- prettier-ignore-end -->\n"}