{"text": "---\nid: 148\nstate: approved\ncreated: 2020-10-06\nplacement:\n  category: fields\n  order: 90\n---\n\n# Standard fields\n\nCertain concepts are common throughout any corpus of APIs. In these situations,\nit is useful to have a standard field name and behavior that is used\nconsistently to communicate that concept.\n\n## Guidance\n\nStandard fields **should** be used to describe their corresponding concept, and\n**should not** be used for any other purpose.\n\n### Resource names and IDs\n\n#### name\n\nEvery resource **must** have a `string name` field, used for the resource name\n(AIP-122), which **should** be the first field in the resource.\n\n**Note:** The `_name` suffix **should not** be used to describe other types of\nnames unless otherwise covered in this AIP.\n\n#### parent\n\nThe `string parent` field refers to the resource name of the parent of a\ncollection, and **should** be used in most `List` (AIP-132) and `Create`\n(AIP-133) requests.\n\n### Other names\n\n#### display_name\n\nThe `string display_name` field **must** be a mutable, user-settable field\nwhere the user can provide a human-readable name to be used in user interfaces.\n[Declarative-friendly resources][] **should** include this field.\n\nDisplay names **should not** have uniqueness requirements, and **should** be\nlimited to <= 63 characters.\n\n#### title\n\nThe `string title` field **should** be the official name of an entity, such as\na company's name. This is a more formal variant of `string display_name`.\n\n#### given_name\n\nThe `string given_name` field **must** refer to a human or animal's given name.\nResources **must not** use `first_name` for this concept, because the given\nname is not placed first in many cultures.\n\n#### family_name\n\nThe `string family_name` field **must** refer to a human or animal's family\nname. Resources **must not** use `last_name` for this concept, because the\nfamily name is not placed last in many cultures.\n\n### Timestamps\n\n#### create_time\n\nThe output only `google.protobuf.Timestamp create_time` field **must**\nrepresent the timestamp when the resource was created. This **may** be either\nthe time creation was initiated or the time it was completed.\n[Declarative-friendly resources][] **should** include this field.\n\n#### update_time\n\nThe output only `google.protobuf.Timestamp update_time` field **must**\nrepresent the timestamp when the resource was most recently updated. Any change\nto the resource made by users **must** refresh this value; changes to a\nresource made internally by the service **may** refresh this value.\n[Declarative-friendly resources][] **should** include this field.\n\n#### delete_time\n\nThe output only `google.protobuf.Timestamp delete_time` field **must** represent\nthe timestamp that a resource was soft deleted. This **may** correspond to either\nthe time when the user requested deletion, or when the service successfully\nsoft deleted the resource. If a resource is not soft deleted, the `delete_time`\nfield **must** be empty.\n\nResources that support soft delete (AIP-164) **should** provide this field.\n\n#### expire_time\n\nThe `google.protobuf.Timestamp expire_time` field **should** represent the time\nthat a given resource or resource attribute is no longer useful or valid (e.g. a\nrotating security key). It **may** be used for similar forms of expiration as\ndescribed in AIP-214.\n\nServices **may** provide an `expire_time` value that is inexact, but the\nresource **must not** expire before that time.\n\n#### purge_time\n\nThe `google.protobuf.Timestamp purge_time` field **should** represent the time\nwhen a soft deleted resource will be purged from the system (see AIP-164).\nIt **may** be used for similar forms of expiration as described in AIP-214.\nResources that support soft delete **should** include this field.\n\nServices **may** provide a `purge_time` value that is inexact, but the resource\n**must not** be purged from the system before that time.\n\n### Annotations\n\nTo store small amounts of arbitrary data, a `map<string, string> annotations`\nfield **may** be added.\n\nThe `annotations` field **must** use the [Kubernetes limits][] to maintain wire\ncompatibility, and **should** require dot-namespaced annotation keys to prevent\ntools from trampling over one another.\n\nExamples of information that might be valuable to store in annotations include:\n\n- For CI/CD, an identifier of the pipeline run or version control identifier\n  used to propagate.\n\n**Note:** Annotations are distinct from various forms of labels. Labels can be\nused by server-side policies, such as IAM conditions. Annotations exist to\nallow client tools to store their own state information without requiring a\ndatabase.\n\n### Well known string fields\n\n#### IP address\n\nA field that represents an IP address **must** comply with the following:\n\n* use type `string`\n* use the name `ip_address` or end with the suffix `_ip_address` e.g.\n  `resolved_ip_address`\n* specify the IP address version format via one of the supported formats `IPV4`,\n  `IPV6`, or if it can be either, `IPV4_OR_IPV6` (see [AIP-202][aip-202])\n\n#### uid\n\nThe output only `string uid` field refers to a system-assigned unique\nidentifier for a resource. When provided, this field **must** be a [UUID4][]\nand **must** specify this format via the `UUID4` format extension (see\n[AIP-202][aip-202]). [Declarative-friendly resources][] **should** include this\nfield.\n\n## Further reading\n\n- For standardized codes, see AIP-143.\n- For the `etag` field, see AIP-154.\n- For the `request_id` field, see AIP-155.\n- For the `filter` field, see AIP-160.\n- For fields related to resource revisions, see AIP-162.\n- For the `validate_only` field, see AIP-163.\n- For fields related to soft delete and undelete, see AIP-164.\n\n## Rationale\n\n### Well known string fields\n\nSome fields represent very well defined concepts or artifacts that sometimes\nalso have strict governance of their semantics. For such fields, presenting an\nequally standardized API surface is important. This enables development of\nimproved API consumer tools and documentation, as well as a more unified user\nexperience across the platform.\n\n## History\n\nBefore 2023-07, `purge_time` for soft-deleted resources was also called\n`expire_time`. `purge_time` was introduced to reduce user confusion.\n\n## Changelog\n\n- **2023-10-05**: Introduce well known string fields with IP Address and `uid`.\n- **2023-08-14**: Introduce the term `annotations` from AIP-128.\n- **2023-07-13**: Introduce the term `purge_time`.\n- **2021-04-06**: Require output only field behavior for `uid` and `delete_time`\n  fields.\n\n<!-- prettier-ignore -->\n[aip-202]: ./0202.md\n[declarative-friendly resources]: ./0128.md#resources\n[kubernetes limits]: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set\n[uuid4]: https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)"}