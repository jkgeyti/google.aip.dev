{"text": "---\nid: 4290\nstate: approved\ncreated: 2018-11-08\n---\n\n# Docker interface\n\nA consequence of using individual generators for API client library generation\nis that each generator has its own set of dependencies and requirements in\norder to run.\n\nThis is reasonable for a user who wishes to generate many libraries for a\nsingle environment, but presents challenges for a user wishing to generate a\nsingle API for many languages or environments. Users need a way to generate\nlibraries easily and quickly, with minimal ramp-up per language.\n\n## Guidance\n\nClient library generators **should** ship [Docker][] images providing the\ngenerator and exposing a common interface, so that generating the same API in\nmultiple languages usually only requires substituting in the appropriate Docker\nimage. Docker images for Google-authored generators will follow a consistent\nscheme.\n\n### CLI usage\n\nThe expected user command to invoke the code generator in a Docker image (from\nthe proto import root, on a POSIX machine):\n\n```bash\n$ docker run --rm --user $UID \\\n  --mount type=bind,source=`pwd`/a/b/c/v1/,destination=/in/a/b/c/v1/,readonly \\\n  --mount type=bind,source=/path/to/dest/,destination=/out/ \\\n  gcr.io/gapic-images/{GENERATOR} \\\n  [-- additional options...]\n```\n\n**Note:** Even though each component of this is standard in the Docker\necosystem (other than the destination path issue, which is a result of how\nprotoc handles imports), this is still a rather long command. We can provide a\n[shortcut script][] to further simplify this, but such a script would be for\nconvenience and not a replacement for this interface.\n\n### Container composition\n\nContainers **must** include:\n\n- A current version of protoc, the protocol buffer compiler.\n- Common protos permitted to be used by all APIs ([googleapis][]).\n- The applicable code generator plugin, as well as any dependencies it\n  requires.\n  - The code generator plugin itself **should** be added using an `ADD` or\n    `COPY` statement from the host machine at build time and installed locally;\n    it **should not** pull from a package manager. (This leads to catch-22\n    situations when cutting releases.)\n  - Images **may** include either a pre-compiled binary of the plugin, or the\n    installed source code, depending on the needs of the applicable ecosystem.\n  - Installation of dependencies **should** use appropriate package managers.\n\nThe common protos and the protoc compiler are supplied by an independent image\n(`gcr.io/gapic-images/api-common-protos`). Both `protoc` and the common protos\ncan be retrieved from this image into a generator's image using the\n`COPY --from` syntax (see [multi-stage builds][]). This is the preferred\napproach as it follows Docker conventions, and allows the protos to be\nversioned independently.\n\n### Base images\n\n**TL;DR:** Each language probably wants `language:x.y-alpine` or\n`language:x.y-slim`. For example, `ruby:2.5-alpine` or `python:3.7-slim`.\n(Alpine images are smaller but idiosyncratic.)\n\nThe following guidelines apply to selecting base images (sorted roughly from\nmost important to least important):\n\n- Images **should** generally be based off an official image for the latest\n  stable version of the language in which the generator is implemented.\n- Images **should** be able to install required system dependencies from a\n  well-understood package manager.\n- Images **should** be ultimately based off of Alpine, Debian, or Ubuntu. This\n  is to ensure we benefit from GCR's [vulnerability scanning][].\n- Images should endeavor to be as small as possible, in line with the general\n  expectations of the Docker community:\n  - Use the smallest base image you can. Alpine-based images are great if\n    possible, but may not always be reasonable. \"Slim\" Debian images are\n    usually the next best (and probably significantly more feasible in many\n    situations).\n\n### Mount points\n\n`protoc` must read protos (representing the API to be generated) from disk, and\nmust write the final output (the client library) to disk. Because the user has\nthe API protos on the host machine, and will ultimately need the output to go\nto said host machine, Docker images **should** use two mount points. This\ncreates a hole in the abstraction layer: the user must mount the appropriate\nlocations on the host machine to the appropriate locations in the container.\n\nThe expected locations in the container **must** be constant, and consistent\nbetween all generator container images:\n\n- `/in/`: The location of the protos to be generated. This **must** be the\n  import root.\n  - Example: If generating protos for the Language API, the protos in the\n    Docker image must live in `/in/google/cloud/language/v1/`.\n- `/out/`: The location to which the client library shall be written.\n\n### Plugin options\n\nSome micro-generators support configuration provided via protoc plugin options.\nIn such cases, the options must be routed from the CLI input to the protoc\ncommand.\n\nThe ultimate protoc invocation could look like the following:\n\n```bash\nprotoc --proto_path {path/to/common/protos} --proto_path /in/ \\\n       --{LANG}_gapic_out /out/ \\\n       --{LANG}_gapic_opt \"go-gapic-package=GO_PACKAGE_VALUE\" \\\n       `find /in/ -name *.proto`\n```\n\nA resulting invocation of the Docker image would be as follows:\n\n```bash\n$ docker run --rm --user $UID \\\n      --mount type=bind,source=`pwd`/a/b/c/v1/,destination=/in/a/b/c/v1/,readonly \\\n      --mount type=bind,source=/path/to/dest/,destination=/out/ \\\n      gcr.io/gapic-images/{GENERATOR} \\\n      --go-gapic-package GO_PACKAGE_VALUE\n```\n\nThus shortcut scripts written to wrap the Docker image invocation **must** pass\nall options occurring after `--` to the underlying docker run command. The\ninternal Docker image **must** provide the conversion from usual shell syntax\nto the protoc option syntax.\n\nClient library generators that make use of plugin options **must** accept those\noptions as either flags or `key=value` pairs. (If a generator receives a string\nwithout an `=` character, that is a flag, and the implied value is `true`.) If\nmultiple options are provided, they are comma-separated, to conform with the\nprotoc behavior if multiple `--opt` flags are specified.\n\nAdditionally, generators **should** prefix all understood option keys with the\ntarget language for that generator (e.g. `go-gapic-package`,\n`java-gapic-package`), and **should** use `kebab-case` for keys (in order to\nmatch Docker, since protoc is inconsistent).\n\nMicrogenerators **must not** error on option keys that they do not recognize,\nalthough they **may** issue a warning.\n\n### Publishing images\n\nImages for Google-created generators **should** be published in\n`gcr.io/gapic-images`, a dedicated project in [Google Container Registry][].\n\nImages **should** follow the naming scheme:\n\n    gcr.io/gapic-images/gapic-generator-{lang}\n\nCI **should** be configured to push a new Docker image to the registry when\nreleases are made. When a release is tagged in GitHub (with a version number,\nsuch as 1.0.3), the CI service should build an image based on the code at that\ntag.\n\nThe resulting image **should** be tagged with each component of the version\nnumber, as well as `latest`, and the resulting tags pushed the registry. (This\nis in addition to pushing to a package manager if appropriate, which is outside\nthe scope of this AIP.)\n\nThis means that a release tag of `1.0.3` in GitHub would result in pushing the\nfollowing four tags to GCR:\n\n- `gcr.io/gapic-images/gapic-generator-{lang}:1`\n- `gcr.io/gapic-images/gapic-generator-{lang}:1.0`\n- `gcr.io/gapic-images/gapic-generator-{lang}:1.0.3`\n- `gcr.io/gapic-images/gapic-generator-{lang}:latest`\n\n**Note:** These rules assumes that releases have ever-increasing version\nnumbers; this process will need to be amended slightly if a generator needs to\nmaintain multiple version streams simultaneously.\n\n<!-- prettier-ignore-start -->\n[googleapis]: https://github.com/googleapis/googleapis\n[docker]: https://docker.com/\n[google container registry]: https://cloud.google.com/container-registry/\n[multi-stage builds]: https://docs.docker.com/develop/develop-images/multistage-build/\n[shortcut script]: https://github.com/googleapis/gapic-generator-python/blob/master/gapic.sh\n[vulnerability scanning]: https://cloud.google.com/container-registry/docs/container-analysis#vulnerability_source\n<!-- prettier-ignore-end -->\n"}