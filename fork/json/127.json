{"text": "---\nid: 127\nstate: approved\ncreated: 2019-08-22\nplacement:\n  category: protobuf\n  order: 10\n---\n\n# HTTP and gRPC Transcoding\n\nAPIs that follow [resource-oriented design][aip-121] are defined using\n[RPCs][rpc], but the resource-oriented design framework allows them to also be\npresented as APIs that largely follow REST/JSON conventions. This is important\nin order to help developers use their existing knowledge: over 80% of the\npublic APIs available follow most REST conventions, and developers are\naccustomed to that pattern.\n\n## Guidance\n\nAPIs **must** provide HTTP definitions for each RPC that they define, except\nfor bi-directional streaming RPCs, which can not be natively supported using\nHTTP/1.1. When providing a bi-directional streaming method, an API **should**\nalso offer an alternative method that does not rely on bi-directional\nstreaming.\n\n### HTTP method and path\n\nWhen using protocol buffers, each RPC **must** define the HTTP method and path\nusing the `google.api.http` annotation:\n\n```proto\nrpc CreateBook(CreateBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n  };\n}\n\nmessage CreateBookRequest {\n  // The publisher who will publish this book.\n  // When using HTTP/JSON, this field is automatically populated based\n  // on the URI, because of the `{parent=publishers/*}` syntax.\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The book to create.\n  // When using HTTP/JSON, this field is populated based on the HTTP body,\n  // because of the `body: \"book\"` syntax.\n  Book book = 2 [(google.api.field_behavior) = REQUIRED];\n\n  // The user-specified ID for the book.\n  // When using HTTP/JSON, this field is populated based on a query string\n  // argument, such as `?bookId=foo`. This is the fallback for fields that\n  // are not included in either the URI or the body.\n  // Note that clients use camelCase format to communicate the field names\n  // to the service.\n  string book_id = 3;\n}\n```\n\n- The first key (`post` in this example) corresponds to the HTTP method. RPCs\n  **may** use `get`, `post`, `patch`, or `delete`.\n  - RPCs **must** use the prescribed HTTP verb for each standard method, as\n    discussed in [AIP-131][], [AIP-132][], [AIP-133][], [AIP-134][], and\n    [AIP-135][]\n  - RPCs **should** use the prescribed HTTP verb for custom methods, as\n    discussed in [AIP-136][].\n  - RPCs **should not** use `put` or `custom`.\n- The corresponding value represents the URI.\n  - URIs **must** use the `{foo=bar/*}` syntax to represent a variable that\n    should be populated in the request proto. When extracting a [resource\n    name][aip-122], the variable **must** include the entire resource name, not\n    just the ID component.\n  - URIs **may** use nested fields for their variable names. (Additionally,\n    AIP-134 mandates this for `Update` requests.)\n  - URIs **must** use the `*` character to represent ID components, which\n    matches all URI-safe characters except for `/`. URIs **may** use `**` as\n    the final segment of a URI if matching `/` is required.\n- The `body` key defines which single top-level field in the request will be\n  sent as the HTTP body. If the body is `*`, then this indicates that the\n  request object itself is the HTTP body. The request body is encoded as JSON\n  as defined by protocol buffers' canonical [JSON encoding][].\n  - RPCs **must not** define a `body` at all for RPCs that use the `GET` or\n    `DELETE` HTTP verbs.\n  - RPCs **must** use the prescribed `body` for Create ([AIP-133][]) and Update\n    ([AIP-134][]) requests.\n  - RPCs **should** use the prescribed `body` for custom methods ([AIP-136][]).\n  - The `body` **must not** contain a nested field (or use the `.` character),\n  - The `body` **must not** be the same as a URI parameter.\n  - The `body` **must not** be a `repeated` field.\n  - Fields **should not** use the `json_name` annotation to alter the field\n    name in JSON, unless doing so for backwards-compatibility reasons.\n\n**Note:** Bi-directional streaming RPCs should not include a `google.api.http`\nannotation at all. If feasible, the service **should** provide non-streaming\nequivalent RPCs.\n\n### Multiple URI bindings\n\nOccasionally, an RPC needs to correspond to more than one URI:\n\n```proto\nrpc CreateBook(CreateBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n    additional_bindings: {\n      post: \"/v1/{parent=authors/*}/books\"\n      body: \"book\"\n    }\n    additional_bindings: {\n      post: \"/v1/books\"\n      body: \"book\"\n    }\n  };\n}\n```\n\n- RPCs **may** define any number of additional bindings. The structure is\n  identical to the `google.api.http` annotation (in fact, it is a recursive\n  reference).\n- RPCs **must not** define an additional binding within an additional binding.\n- The `body` clause **must** be identical in the top-level annotation and each\n  additional binding.\n\n## Changelog\n\n- **2022-08-18**: Added the comment that query string parameter names are\n  in camelCase.\n- **2021-01-06**: Added clarification around `body` and nested fields.\n- **2019-09-23**: Added a statement about request body encoding, and guidance\n  discouraging `json_name`.\n\n<!-- prettier-ignore-start -->\n[aip-121]: ./0121.md\n[aip-122]: ./0122.md\n[aip-131]: ./0131.md\n[aip-132]: ./0132.md\n[aip-133]: ./0133.md\n[aip-134]: ./0134.md\n[aip-135]: ./0135.md\n[aip-136]: ./0136.md\n[json encoding]: https://developers.google.com/protocol-buffers/docs/proto3#json\n[rpc]: https://en.wikipedia.org/wiki/Remote_procedure_call\n<!-- prettier-ignore-end -->\n"}