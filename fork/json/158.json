{"text": "---\nid: 158\nstate: approved\ncreated: 2019-02-18\nplacement:\n  category: design-patterns\n  order: 60\n---\n\n# Pagination\n\nAPIs often need to provide collections of data, most commonly in the [List][]\nstandard method. However, collections can often be arbitrarily sized, and also\noften grow over time, increasing lookup time as well as the size of the\nresponses being sent over the wire. Therefore, it is important that collections\nbe paginated.\n\n## Guidance\n\nRPCs returning collections of data **must** provide pagination _at the outset_,\nas it is a [backwards-incompatible change](#backwards-compatibility) to add\npagination to an existing method.\n\n```proto\n// The request structure for listing books.\nmessage ListBooksRequest {\n  // The parent, which owns this collection of books.\n  // Format: publishers/{publisher}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The maximum number of books to return. The service may return fewer than\n  // this value.\n  // If unspecified, at most 50 books will be returned.\n  // The maximum value is 1000; values above 1000 will be coerced to 1000.\n  int32 page_size = 2;\n\n  // A page token, received from a previous `ListBooks` call.\n  // Provide this to retrieve the subsequent page.\n  //\n  // When paginating, all other parameters provided to `ListBooks` must match\n  // the call that provided the page token.\n  string page_token = 3;\n}\n\n// The response structure from listing books.\nmessage ListBooksResponse {\n  // The books from the specified publisher.\n  repeated Book books = 1;\n\n  // A token that can be sent as `page_token` to retrieve the next page.\n  // If this field is omitted, there are no subsequent pages.\n  string next_page_token = 2;\n}\n```\n\n- Request messages for collections **should** define an `int32 page_size`\n  field, allowing users to specify the maximum number of results to return.\n  - The `page_size` field **must not** be required.\n  - If the user does not specify `page_size` (or specifies `0`), the API\n    chooses an appropriate default, which the API **should** document. The API\n    **must not** return an error.\n  - If the user specifies `page_size` greater than the maximum permitted by the\n    API, the API **should** coerce down to the maximum permitted page size.\n  - If the user specifies a negative value for `page_size`, the API **must**\n    send an `INVALID_ARGUMENT` error.\n  - The API **may** return fewer results than the number requested (including\n    zero results), even if not at the end of the collection.\n- Request messages for collections **should** define a `string page_token`\n  field, allowing users to advance to the next page in the collection.\n  - The `page_token` field **must not** be required.\n  - If the user changes the `page_size` in a request for subsequent pages, the\n    service **must** honor the new page size.\n  - The user is expected to keep all other arguments to the RPC the same; if\n    any arguments are different, the API **should** send an `INVALID_ARGUMENT`\n    error.\n- The response **must not** be a streaming response.\n- Response messages for collections **should** define a\n  `string next_page_token` field, providing the user with a page token that may\n  be used to retrieve the next page.\n  - The field containing pagination results **should** be the first field in\n    the message and have a field number of `1`. It **should** be a repeated\n    field containing a list of resources constituting a single page of results.\n  - If the end of the collection has been reached, the `next_page_token` field\n    **must** be empty. This is the _only_ way to communicate\n    \"end-of-collection\" to users.\n  - If the end of the collection has not been reached (or if the API can not\n    determine in time), the API **must** provide a `next_page_token`.\n- Response messages for collections **may** provide an `int32 total_size`\n  field, providing the user with the total number of items in the list.\n  - This total **may** be an estimate (but the API **should** explicitly\n    document that).\n\n### Skipping results\n\nThe request definition for a paginated operation **may** define an `int32 skip`\nfield to allow the user to skip results.\n\nThe `skip` value **must** refer to the number of individual resources to skip,\nnot the number of pages.\n\nFor example:\n\n- A request with no page token and a `skip` value of `30` returns a single page\n  of results starting with the 31st result.\n- A request with a page token corresponding to the 51st result (because the\n  first 50 results were returned on the first page) and a `skip` value of `30`\n  returns a single page of results starting with the 81st result.\n\nIf a `skip` value is provided that causes the cursor to move past the end of\nthe collection of results, the response **must** be `200 OK` with an empty\nresult set, and not provide a `next_page_token`.\n\n### Opacity\n\nPage tokens provided by APIs **must** be opaque (but URL-safe) strings, and\n**must not** be user-parseable. This is because if users are able to\ndeconstruct these, _they will do so_. This effectively makes the implementation\ndetails of your API's pagination become part of the API surface, and it becomes\nimpossible to update those details without breaking users.\n\n**Warning:** Base-64 encoding an otherwise-transparent page token is **not** a\nsufficient obfuscation mechanism.\n\nFor page tokens which do not need to be stored in a database, and which do not\ncontain sensitive data, an API **may** obfuscate the page token by defining an\ninternal protocol buffer message with any data needed, and send the serialized\nproto, base-64 encoded.\n\nPage tokens **must** be limited to providing an indication of where to continue\nthe pagination process only. They **must not** provide any form of\nauthorization to the underlying resources, and authorization **must** be\nperformed on the request as with any other regardless of the presence of a page\ntoken.\n\n### Expiring page tokens\n\nMany APIs store page tokens in a database internally. In this situation, APIs\n**may** expire page tokens a reasonable time after they have been sent, in\norder not to needlessly store large amounts of data that is unlikely to be\nused. It is not necessary to document this behavior.\n\n**Note:** While a reasonable time may vary between APIs, a good rule of thumb\nis three days.\n\n## Backwards compatibility\n\nAdding pagination to an existing RPC is a backwards-incompatible change. This\nmay seem strange; adding fields to proto messages is generally backwards\ncompatible. However, this change is _behaviorally_ incompatible.\n\nConsider a user whose collection has 75 resources, and who has already written\nand deployed code. If the API later adds pagination fields, and sets the\ndefault to 50, then that user's code breaks; it was getting all resources, and\nnow is only getting the first 50 (and does not know to advance pagination).\nEven if the API set a higher default limit, such as 100, the user's collection\ncould grow, and _then_ the code would break.\n\nFor this reason, it is important to always add pagination to RPCs returning\ncollections _up front_; they are consistently important, and they can not be\nadded later without causing problems for existing users.\n\n**Warning:** This also entails that, in addition to presenting the pagination\nfields, they **must** be _actually implemented_ with a non-infinite default\nvalue. Implementing an in-memory version (which might fetch everything then\npaginate) is reasonable for initially-small collections.\n\n[list]: ./0132.md\n\n## Changelog\n\n- **2020-05-13**: Added guidance for skipping results.\n- **2020-08-24**: Clarified that responses are not streaming responses.\n- **2020-06-24**: Clarified that page size is always optional for users.\n- **2019-02-12**: Added guidance on the field being paginated over.\n- **2019-08-01**: Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership.\n- **2019-07-19**: Update the opacity requirement from \"should\" to \"must\".\n"}