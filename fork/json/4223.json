{"text": "---\nid: 4223\nstate: approved\ncreated: 2022-05-13\n---\n\n# Client-side payload validation\n\nClient-side payload validation is the practice of inspecting the request payload\nfor any misconfigurations (e.g. missing required fields, attempting to update an\nimmutable field) prior to executing a network call with the payload. Typically,\ndocumentation communicates the expectations of the service with regards to each\nrequest field, including any requirements on presence or format. The\n`google.api.field_behavior` annotation defined in AIP-203 is the\nmachine-readable format that services use to document behavior in relation to\nspecific request fields.\n\n## Guidance\n\nClient libraries **must not** implement client-side payload validation based\non the `google.api.field_behavior` annotation, except to prevent\n[local failures](4223.md#local-failures).\n\nThe reason for this is that the `google.api.field_behavior` annotation is\nprimarily a machine-readable form of _documentation_, and **not** a\nconfiguration for payload validation. The annotation conveys how the service\n_already_ handles the field, and alludes to a service's own payload validation\nor expectations.\n\nAdmittedly, depending on services to implement payload validation means clients\nwill sometimes make network calls that are bound to result in errors. Furthermore, users\nthen depend on services to provide actionable errors, when the client could have\nprovided a language-idiomatic, localized error. However, robust server-side\npayload validation means that _all types_ of client (first party, third party,\n`curl`, etc.) will benefit from the **same** validation, and that there is no\nlag between service and clients when the field behavior changes.\n\n### Local failures\n\nClient libraries **may** implement client-side payload validation based on the\n`google.api.field_behavior` annotation only to the extent that it prevents\nlocal failures, such as crashes within the client library code itself.\n"}