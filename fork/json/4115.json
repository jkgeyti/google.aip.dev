{"text": "---\nid: 4115\nscope: auth\nstate: approved\ncreated: 2020-08-13\n---\n\n# Default Credentials For Google Cloud Virtual Environments\n\nIf the client runs on Google cloud virtual environments such as [Google Compute Engine (GCE)][0], \n[Serverless][1], or [Google Kubernetes Engine (GKE)][2], the auth library **may** leverage \nGoogle\u2019s default mutual TLS (mTLS) credentials and obtain bound tokens for the instance. \nThe auth library **may** use the default mTLS credentials and bound tokens to access Google APIs. \n\nmTLS authentication enables authentication of both client and server identities in a TLS handshake. \nApplications running in Google virtual environments can authenticate to Google APIs using X.509 \nSPIFFE Verifiable Identity Documents (SVIDs). These SVIDs are X.509 certificates that contain SPIFFE \nIDs specifying the identity of the certificate owner.\n\nBound tokens are access tokens that are bound to some property of the credentials used to establish \nthe mTLS connection. The advantage of bound tokens is that they can be used over secure channels \nestablished via mTLS credentials with the correct binding information, when appropriate access \npolicies have been put in place. Therefore, using bound tokens is more secure than bearer tokens,\nwhich can be stolen and adversarially replayed.\n\nThis AIP describes the flow of:\n\n1. Retrieving a configuration through a metadata server (MDS) endpoint. The configuration specifies \n   how to access Google\u2019s default mTLS credentials.\n2. Requesting bound tokens.\n\n**Note:** Because this AIP describes guidance and requirements in a language-neutral way, it uses \ngeneric terminology which may be imprecise or inappropriate in certain languages or environments.\n\n## Guidance\n\n### Access Default mTLS Credentials\n\n**Note:** Before trying to use Google\u2019s default mTLS credentials, the client **must** first check if the remote \nGoogle API endpoint supports mTLS. If the remote endpoint does NOT support mTLS, the client **should** \nconnect to the endpoint using TLS. How to check if an endpoint supports mTLS is out of the scope of this \nAIP. If the remote endpoint does support mTLS, the client **should** try to connect using mTLS first \nbefore falling back to TLS. How to find the remote API\u2019s mTLS endpoint is out of the scope of this AIP.\nIf users enabled [Device Certificate Authentication (DCA)](4), the client **should** give priority to DCA\nas mTLS credentials.\n\nTo leverage Google\u2019s default mTLS credentials, the client **should** retrieve configurations from \nMDS. The MDS in all virtual environments (GCE, Serverless, and GKE) exposes an HTTP endpoint that \nserves a configuration that specifies how to access Google's default mTLS credentials. This endpoint \nis called the mTLS configuration endpoint.\n\nThe URL of the MDS's mTLS configuration endpoint is: \n```\nhttp://metadata.google.internal/computeMetadata/v1/googleAutoMtlsConfiguration\n```\n\nThe request to the MDS's mTLS configuration endpoint **should** be an HTTP GET request without any \nparameter or payload.\n\nThe response from the MDS's mTLS configuration endpoint **should** contain the following \ninformation:\n\n* The **Secure Session Agent** address: the client doesn\u2019t have direct access to mTLS credentials. \n  The Secure Session Agent manages default mTLS credentials. The client can only use mTLS \n  credentials through the Secure Session Agent. The address can be an IP:port address or a file path \n  representing a Unix Domain Socket (UDS).\n\nThe client **must** follow the steps below to access Google\u2019s default mTLS credentials.\n\n1. Check if the remote endpoint supports mTLS. \n   * If yes, go to step (2).\n   * If not, go to step (3). \n2. Send a request to the MDS's mTLS configuration endpoint. If the request is successful and the \n   response contains a Secure Session Agent address, use the address to access Google's default mTLS\n   credentials, and go to step (4). If the request fails or the response contains an empty address,\n   go to step (3).\n3. Fall back to TLS [END].\n4. Configure the TLS library to use the Secure Session Agent ([example][3]) for client authentication\n   during the mTLS handshake.\n\n### Request Bound Tokens\n\nTo access Google APIs with bound tokens, the client **should** request tokens from MDS. The MDS in \nall virtual environments (GCE, Serverless, and GKE) exposes an HTTP endpoint that serves access tokens.\nThis endpoint is called the access token endpoint.\n\nThe URL of the MDS's access token endpoint is: \n```\nhttp://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\n```\n\nThe request to the MDS's access token endpoint **should** be an HTTP GET request. The request **may**\nhave a \u201cscopes\u201d URL parameter with a list of comma-separated scopes. The auth library **should** allow\nthe caller to optionally specify a list of custom scopes, and add the \u201cscopes\u201d parameter to the request \nwhen needed. Depending on the runtime environment, the request for custom scopes **may** be transparently \nignored or fulfilled by the server.\n\nThe response from the MDS's access token endpoint **should** contain an access token in the following \nJSON format:\n\n```json\n{\n      \"access_token\": \"YOUR_ACCESS_TOKEN\",\n      \"expires_in\": 3599,\n      \"token_type\": \"Bearer\"\n }\n```\n\nThe client **must** follow the steps below to request new access tokens for Google APIs if existing \ntokens expire.\n\n1. Send an HTTP request to the MDS access token endpoint, retrieve the access token from the response \n   and go to step (2).\n2. Attach the token from step (1) to the request to Google APIs.\n\n## Changelog\n\n- **2020-12-14**: Replace note on scopes with more detailed discussion.\n- **2021-07-13**: Clarify GCE equivalent runtimes\n- **2023-02-16**: Add mTLS configuration endpoint and unify the token binding flow.\n\n<!-- prettier-ignore-start -->\n[0]: https://cloud.google.com/compute\n[1]: https://cloud.google.com/serverless\n[2]: https://cloud.google.com/kubernetes-engine\n[3]: https://github.com/google/s2a-go/tree/main/example\n[4]: https://google.aip.dev/auth/4114\n<!-- prettier-ignore-end -->\n"}