{"text": "---\nid: 2510\nstate: approved\ncreated: 2018-12-26\nplacement:\n  category: gcp\n---\n\n# Project identifiers\n\nHistorically, Google had two kinds of projects: API projects and App Engine\nprojects. API projects used project numbers (e.g. `12345`) as identifiers, and\nApp Engine projects used project IDs (e.g. `happy-armadillo-789`) as\nidentifiers. Later, Google converged API projects and App Engine projects, so\nnow each project has _both_ unique and immutable identifiers.\n\nThe two types of identifiers are used differently in different contexts, and\ncreate a lot of complexity for application development. One critical issue is\nthat applications cannot reliably join data from different services, because\ndifferent services use different project identifiers.\n\n## Guidance\n\n**TL;DR:** The project number is the canonical identifier, and the project ID\nis an [alias][]; however, unlike normal aliases, it **should** be returned if it\nis what the user sent. Additionally, third-party services are unable to\n_accept_ project IDs.\n\nThe rationale for this is:\n\n- Each resource should always have one canonical identifier.\n- Because Google's privacy policy restricts the use of project IDs, both\n  internally and with partners, only the project number can be the canonical\n  identifier.\n- However, even though the project number is the canonical identifier, a policy\n  of returning it even if the user sent a project ID has proven to be\n  unfriendly to both humans and declarative tools.\n\n### Google APIs\n\nExternally-facing Google APIs **should** accept both project IDs and project\nnumbers for incoming API requests.\n\nHowever, even though the project number is the canonical identifier as\ndescribed in AIP-122, services **should** return whichever ID the user sent.\nThe reason for this is because automatic translation between user-friendly\nproject IDs and user-unfriendly project numbers has proven to cause real-world\ndifficulty for users, and also for declarative tools (see AIP-128 for more on\ndeclarative-friendliness).\n\nTwo additional points:\n\n- Error responses **must** return the originally-provided value without\n  modification. Error responses **must not** perform any translation between\n  project IDs and project numbers.\n- If a service receives a resource name for a resource that the service does\n  not own, it **should not** perform any translation between project IDs and\n  project numbers for those resource names.\n\n### Internal Google services\n\nInternal Google services **must** use project numbers for internal data storage\nand for output. Project identifiers are widely used as storage keys, which\noften appear in logs and metrics. Project IDs are user-settable and thus\nconsidered PII and user data, but project numbers are not.\n\nTherefore, when an internal service calls an external Google APIs, it\n**should** use project numbers for making API requests.\n\n### Resource References\n\nProject identifiers also appear in [resource names][]. These resource\nnames are used both to identify the resource itself and can refer to\nother resources ([example][]).\n\nWhen project identifiers are provided, the response **should**\ninclude the identifier as it occurred in the request: if the project ID\nwas provided it should be returned, and if the project number was\nprovided, that is what should be in the response.\n\nFor example, consider a `Book` resource,\n\n```proto\nmessage Book {\n  option (google.api.resource) = {\n    type: \"pubsub.googleapis.com/Book\"\n    pattern: \"projects/{project}/books/{book}\"\n  };\n\n  // The resource name of the Book.\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // A reference to another resource, a Shelf.\n  string shelf = 2 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Shelf\"\n  }];\n\n  // Other fields...\n}\n```\n\nwith the following book submitted from a previous create request (represented as\nJSON in this example),\n\n```json\n{\n  \"name\": \"projects/my-project/books/les-miserables\",\n  \"shelf\": \"projects/12345/shelves/top-shelf\"\n}\n```\n\nand a `GetBookRequest`,\n\n```proto\nmessage GetBookRequest {\n  // The name of the Book to retrieve.\n  // Format: projects/{project}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n}\n\n```\n\nand if the value of `name` on such a request is,\n\n```\nprojects/my-project/books/les-miserables\n```\n\nthen the value of the field, `name`, returned for the `Book`, **should** match:\nthe project ID and not the number should be returned. But, the value for the\nfield, `shelf` should use the project number, as the create request had\nsubmitted a shelf with the project number in the resource name.\n\nIn other words, the following values should be returned:\n\n```\nbook: projects/my-project/books/les-miserables\nshelf: projects/12345/shelves/top-shelf\n```\n\nThis guidance is to ensure that there is a minimal difference between user\ninput and output.\n\n### Third-party services\n\n[Third-party services](https://cloud.google.com/marketplace) that are\nintegrated with Google Cloud Platform **must** only store or provide project\nnumbers. Google's privacy policy prohibits sharing project IDs with third-party\nservices, or providing a service for third-party services to translate between\nproject IDs and project numbers at runtime.\n\n### Project identifier format\n\nServices **must** use project resource names as defined by the [Resource\nManager API][] to refer to projects, such as `projects/123456`. This allows the\nsame API to work with other resources similar to projects, such as\norganizations and folders.\n\n[alias]: ../0122.md#resource-id-aliases\n[resource manager api]: https://cloud.google.com/resource-manager/\n[resource names]: ../0122.md\n[example]: ../0122.md#fields-representing-another-resource\n\n## Changelog\n\n- **2022-10-19**: Clarified guidance for project identifiers in resource\n  references.\n- **2021-07-29**: Reversed previous guidance on returning project IDs; this AIP\n  now advocates returning what the user sent.\n- **2019-08-11**: Add an exception for resources that a service does not own.\n- **2019-06-19**: Clarify how error messages should be treated\n- **2019-06-10**: Minor language and organization tweaks\n"}