{"text": "---\nid: 4117\nscope: auth\nstate: approved\ncreated: 2020-12-10\n---\n\n# External Account Credentials (Workload Identity Federation)\n\nUsing workload identity federation, your application can access Google Cloud\nresources from Amazon Web Services (AWS), Microsoft Azure or any identity\nprovider that supports OpenID Connect (OIDC) or SAML 2.0.\n\nTraditionally, applications running outside Google Cloud have used service\naccount keys to access Google Cloud resources. Using identity federation,\nyou can allow your workload to impersonate a service account. This lets you\naccess Google Cloud resources directly, eliminating the maintenance and\nsecurity burden associated with service account keys.\n\n**Note:** Because this AIP describes guidance and requirements in a\nlanguage-neutral way, it uses generic terminology which may be imprecise or\ninappropriate in certain languages or environments.\n\n## Guidance\n\nThis section describes the general guidance of supporting non-Google external\ncredentials (AWS, Azure, OIDC and SAML IdPs, etc) as a means of authentication.\n\n### Prerequisite\n\nIn order to use workload identity federation to access Google cloud resources\nfrom non-Google cloud platforms, the following steps are needed to configure\nworkload identity pools, providers, service account impersonation and generate\nthe JSON configuration file to be used by the auth libraries.\n\n- [Configure Workload Identity Federation from AWS][0]\n- [Configure Workload Identity Federation from Microsoft Azure][1]\n- [Configure Workload Identity Federation from an OIDC identity provider][2]\n- [Configure Workload Identity Federation from a SAML identity provider][3]\n\n### Configuration File Generation and Usage\n\nAfter workload identity federation is configured, the JSON configuration file\nshould be generated. This sample shows how an AWS configuration file is\ngenerated:\n\n```bash\n$ gcloud iam workload-identity-pools create-cred-config \\\n    projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID \\\n    --service-account=$SERVICE_ACCOUNT_EMAIL \\\n    --aws \\\n    --output-file=$FILEPATH.json\n```\n\nThe following values would need to be replaced:\n\n- **PROJECT_NUMBER**: Project number of the project that contains the workload\n  identity pool.\n- **POOL_ID**: ID of the workload identity pool.\n- **PROVIDER_ID**: ID of the workload identity pool provider.\n- **SERVICE_ACCOUNT_EMAIL**: Email address of the service account to\n  impersonate.\n- **FILEPATH**: File to save configuration to.\n\nIf you are using [AWS IMDSv2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html),\nan additional flag `--enable-imdsv2` should be added to the [`gcloud iam workload-identity-pools create-cred-config`](/sdk/gcloud/reference/iam/workload-identity-pools/create-cred-config) command:\n\n```bash\n$ gcloud iam workload-identity-pools create-cred-config \\\n    projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID \\\n    --service-account=$SERVICE_ACCOUNT_EMAIL \\\n    --aws \\\n    --enable-imdsv2 \\\n    --output-file=$FILEPATH.json\n```\n\nIf you wish to configure the service account access token lifetime,\nan additional flag `--service-account-token-lifetime-seconds` should be added to the [`gcloud iam workload-identity-pools create-cred-config`](/sdk/gcloud/reference/iam/workload-identity-pools/create-cred-config) command (this example uses an AWS configuration, but the token lifetime can be configured for all workload identity federation providers):\n\n```bash\n$ gcloud iam workload-identity-pools create-cred-config \\\n    projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID \\\n    --service-account=$SERVICE_ACCOUNT_EMAIL \\\n    --aws \\\n    --service-account-token-lifetime-seconds=$TOKEN_LIFETIME \\\n    --output-file=$FILEPATH.json\n```\n\nThe service-account-token-lifetime-seconds flag is optional. If not provided, this defaults to one hour. The minimum allowed value is 600 (10 minutes) and the maximum allowed value is 43200 (12 hours). If a lifetime greater than one hour is required, the service account must be added as an allowed value in an Organization Policy that enforces the `constraints/iam.allowServiceAccountCredentialLifetimeExtension` constraint.\n\nThe external identities configuration file can be used with\n[Application Default Credentials][6]. In order to use external identities with\nApplication Default Credentials, the full path to this file should be stored\nin the `GOOGLE_APPLICATION_CREDENTIALS` environment variable.\n\n```bash\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/config.json\n```\n\nThe library can now automatically choose the right type of client and initialize\ncredentials from the context provided in the configuration file:\n\n```python\nimport google.auth\n\ncredentials, project = google.auth.default()\n```\n\nExternal account credentials can also be initialized explicitly using the\ngenerated configuration file.\n\n```python\n# Sample for Azure or OIDC/SAML providers.\nimport json\n\nfrom google.auth import identity_pool\n\njson_config_info = json.loads(function_to_get_json_config())\ncredentials = identity_pool.Credentials.from_info(json_config_info)\nscoped_credentials = credentials.with_scopes(\n    ['https://www.googleapis.com/auth/cloud-platform'])\n```\n\n```python\n# Sample for AWS.\nimport json\n\nfrom google.auth import aws\n\njson_config_info = json.loads(function_to_get_json_config())\ncredentials = aws.Credentials.from_info(json_config_info)\nscoped_credentials = credentials.with_scopes(\n    ['https://www.googleapis.com/auth/cloud-platform'])\n```\n\n## Expected Behavior\n\nThe auth libraries should use the information in the JSON configuration file to\nretrieve the external credentials and exchange them for Google access tokens\nusing the GCP Security Token Service (via the token exchange endpoint\n`https://sts.googleapis.com/v1/token`) and then impersonating a service account\nby calling the **IamCredentials** [generateAccessToken][5] API to access GCP\nresources.\n\nAll external account JSON files must share the following fields:\n\n| Field Name                        | Required | Description |\n|-----------------------------------|----------|:------------|\n| type                              | Yes      | This identifies the new type of credential object. This must be \"external_account\" |\n| audience                          | Yes      | This is the STS audience which contains the resource name for the workload identity pool and the provider identifier in that pool. |\n| subject_token_type                | Yes      | This is the STS subject token type based on the [OAuth 2.0 token exchange spec][7]. |\n| service_account_impersonation_url | No       | This is the URL for the service account impersonation request. If this is not available, the STS returned access token should be directly used without impersonation. |\n| service_account_impersonation.*   | No       | This object defines additional service account impersonation options. Only one field is currently supported: \u201ctoken_lifetime_seconds\": This is the requested access token lifetime, e.g. `2800`.  |\n| token_url                         | Yes      | This is the STS token exchange endpoint. |\n| credential_source.*               | Yes      | This object defines the mechanism used to retrieve the external credential from the local environment so that it can be exchanged for a GCP access token via the STS endpoint. |\n\nThe auth libraries and applications **must** follow the steps below for all\ntypes of external account credentials:\n\n- Check **credential_source** to determine the necessary logic to retrieve the\n  external credential which should be used to construct the subject token to\n  pass to the STS endpoint. This is covered in detail for every credential\n  configuration below.\n- Construct the STS request, based on [rfc8693][4]:\n  - STS audience should be constructed using the **audience** field.\n  - **grant_type** must be `urn:ietf:params:oauth:grant-type:token-exchange`\n  - **requested_token_type** must be\n    `urn:ietf:params:oauth:token-type:access_token`\n  - **subject_token_type** is the **subject_token_type** field as described in\n    the RFC.\n  - **subject_token** is the retrieved external credentials. Check the\n    subsequent sections on how this is retrieved in various environments.\n  - **scope**: the list of space-delimited, case-insensitive OAuth scopes that\n    specify the desired scopes of the requested security token in the context\n    of the service or resource where the token should be used. If service\n    account impersonation is used, the cloud platform or IAM scope should be\n    passed to STS and then the customer provided scopes should be passed in the\n    **IamCredentials** call to [generateAccessToken][5].\n  - The STS token exchange URL should be the **token_url** (e.g.\n    `https://sts.googleapis.com/v1/token`).\n- Send the STS token exchange request to get the Google access token and its\n  expiration.\n- If the **service_account_impersonation_url** is available, trigger service\n  account impersonation flow by POSTing to that endpoint with the previously\n  returned Google access token.\n  - If this is not available, end the flow and just use the STS access token\n    for authorization.\n  - The list of scopes also need to be provided for this endpoint. The customer\n    provided scopes should be used for this endpoint.\n  - In order to access this API, the (Cloud platform\n    `https://www.googleapis.com/auth/cloud-platform` or IAM scope\n    `https://www.googleapis.com/auth/iam`) are required in the underlying\n    access token.\n  - The service account access token lifetime also needs to be provided for this endpoint. The value in\n    **service_account_impersonation.token_lifetime_seconds** will be used if it\n    was provided, otherwise it will default to 1 hour.\n\n### Determining the subject token in AWS\n\nExternal account configuration JSON files should contain the following\ninformation in the `credential_source` object to facilitate retrieval of AWS\ncredentials to be passed as subject tokens to the GCP STS token exchange\nendpoint.\n\n| Field Name                                       | Required | Description |\n|--------------------------------------------------|----------|:------------|\n| environment_id                 | Yes      | This is the environment identifier, of format `aws${version}`. A version should be specified to indicate to the auth library whether breaking changes were introduced to the underlying AWS implementation. So if aws1 is supported in the current version of the library but a credential file with aws2 is provided, an error should be thrown instructing the developer to upgrade to a newer version of the library. |\n| region_url                     | No       | This URL should be used to determine the current AWS region needed for the signed request construction when the region environment variables are not present. |\n| url                            | No       | This AWS metadata server URL should be used to retrieve the access key, secret key and security token needed to sign the `GetCallerIdentity` request. The $ROLE_NAME should be retrieved from calling this endpoint without any parameter and then calling again with the returned role name appended to this URL: http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE_NAME |\n| regional_cred_verification_url | Yes      | This defines the regional AWS `GetCallerIdentity` action URL. This URL should be used to determine the AWS account ID and its roles. This should not actually be called by the Auth libraries. It should be called on the STS token server. The region should be substituted by SDK, e.g. `sts.eu-west-1.amazonaws`.com. |\n| imdsv2_session_token_url       | No       | Presence of this URL enforces the auth libraries to fetch a Session Token from AWS. This field is required for EC2 instances using IMDSv2. This Session Token would later be used while making calls to the metadata endpoint. |\n\nThe JSON file for AWS configuration files should have the following form:\n\n```json\n{\n  \"type\": \"external_account\",\n  \"audience\": \"//iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID\",\n  \"subject_token_type\": \"urn:ietf:params:aws:token-type:aws4_request\",\n  \"service_account_impersonation_url\": \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$EMAIL:generateAccessToken\",\n  \"token_url\": \"https://sts.googleapis.com/v1/token\",\n  \"credential_source\": {\n    \"environment_id\": \"aws1\",\n    \"region_url\": \"http://169.254.169.254/latest/meta-data/placement/availability-zone\",\n    \"url\": \"http://169.254.169.254/latest/meta-data/iam/security-credentials\",\n    \"regional_cred_verification_url\": \"https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15\",\n    \"imdsv2_session_token_url\": \"http://169.254.169.254/latest/api/token\"\n  }\n}\n```\n\nThe auth libraries and applications **must** follow the steps below:\n\n- Check **credential_source** for environment ID. If the environment ID is\n  `aws${version}`, this should be an AWS native credential.\n- Inspect the version in the environment ID. If this is a newer unexpected\n  error, trigger an error that the auth library needs to be updated to handle\n  this type of credentials.\n- Validate the host for the **url**, **regional_url** and\n  **imdsv2_session_token_url** fields if they are provided. The host should\n  either be **169.254.169.254** or **fd00:ec2::254**.\n- If **imdsv2_session_token_url** is available, then fetch session token\n  from **imdsv2_session_token_url**.\n- Check the environment variables in the following order (`AWS_REGION` and\n  then the `AWS_DEFAULT_REGION`) to determine the AWS region. If found, skip\n  using the AWS metadata server to determine this value.\n- If the region environment variables are not provided, use the **region_url**\n  to determine the current AWS region. The API returns the zone name, e.g.\n  `us-east-1d`. The region should be determined by stripping the last\n  character, e.g. `us-east-1`.\n- Check the environment variables `AWS_ACCESS_KEY_ID`,\n  `AWS_SECRET_ACCESS_KEY` and the optional `AWS_SESSION_TOKEN` for the AWS\n  security credentials. If found, skip using the AWS metadata server to\n  determine these values.\n- If **url** is available and the security credentials environment variables\n  are not provided:\n  - Call **url** to retrieve the attached AWS IAM role name to the current\n    instance.\n  - Call **url/$ROLE_NAME** to get the access key, secret key and security\n    token needed to sign the `GetCallerIdentity` request.\n- Construct the AWS signed request ([AWS Signature Version 4][8]) using the\n  [GetCallerIdentity][9] **regional_cred_verification_url** (with the region\n  substituted). This should be serialized by formatting it as a url-encoded\n  JSON and passed as the **subject_token** to STS endpoint.\n  Here is a sample of the JSON format used:\n\n  ```json\n  {\n    \"url\": \"https://sts.us-east-1.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15\",\n    \"headers\": [\n      {\n        \"value\": \"//iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID\",\n        \"key\": \"x-goog-cloud-target-resource\"\n      },\n      {\n        \"value\": \"20200228T225005Z\",\n        \"key\": \"x-amz-date\"\n      },\n      {\n        \"value\": \"AWS4-HMAC-SHA256 Credential=AKIASOZTBDV4D7ABCDEDF/20200228/us-east-1/sts/aws4_request, SignedHeaders=host;x-amz-date,Signature=abcedefdfedfd\",\n        \"key\": \"Authorization\"\n      },\n      {\n        \"value\": \"sts.us-east-1.amazonaws.com\",\n        \"key\": \"host\"\n      },\n      {\n        \"value\": \"IQoJb3JpZ2luX2VjEIz//////////wEaCXVzLWVh...\",\n        \"key\": \"x-amz-security-token\"\n      }\n    ],\n    \"method\": \"POST\",\n    \"body\": \"\"\n  }\n  ```\n  For the AWS token, STS requires a special header `x-goog-cloud-endpoint` to recognize that the token is for a specific workload identity provider.\n\n### Determining the subject token in Microsoft Azure and URL-sourced credentials\n\nExternal account configuration JSON files should contain the following\ninformation in the `credential_source` object to facilitate retrieval of Azure\nand other URL-sourced credentials to be passed as subject tokens to the GCP STS\ntoken exchange endpoint.\n\n| Field Name                                        | Required | Description  |\n|---------------------------------------------------|----------|:-------------|\n| url                             | Yes      | This defines the local metadata server to retrieve the external credentials from. For Azure, this should be the Azure Instance Metadata Service (IMDS) URL used to retrieve the Azure AD access token. |\n| headers                         | No       | This defines the headers to append to the GET request to credential_source.url. |\n| format.type                     | No       | This indicates the format of the URL response. This can be either \"text\" or \"json\". The default should be \"text\". |\n| format.subject_token_field_name | No       | Required for JSON URL responses. This indicates the JSON field name where the subject_token should be stored. |\n\nThe JSON file for URL-sourced configuration files (OIDC / SAML) should have the\nfollowing form:\n\n```json\n{\n  \"type\": \"external_account\",\n  \"audience\": \"//iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID\",\n  \"subject_token_type\": \"urn:ietf:params:oauth:token-type:jwt\",\n  \"service_account_impersonation_url\": \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$EMAIL:generateAccessToken\",\n  \"token_url\": \"https://sts.googleapis.com/v1/token\",\n  \"credential_source\": {\n    \"url\": \"http://localhost:5000/token\",\n    \"format\": {\n      \"type\": \"json\",\n      \"subject_token_field_name\": \"id_token\"\n    }\n  }\n}\n```\n\nAzure configuration files are a type of OIDC URL-sourced credentials.\n\n```json\n{\n  \"type\": \"external_account\",\n  \"audience\": \"//iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID\",\n  \"subject_token_type\": \"urn:ietf:params:oauth:token-type:jwt\",\n  \"service_account_impersonation_url\": \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$EMAIL:generateAccessToken\",\n  \"token_url\": \"https://sts.googleapis.com/v1/token\",\n  \"credential_source\": {\n    \"headers\": {\n      \"Metadata\": \"True\"\n    },\n    \"url\": \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID\",\n    \"format\": {\n      \"type\": \"json\",\n      \"subject_token_field_name\": \"access_token\"\n    }\n  }\n}\n```\n\nThe auth libraries and applications **must** follow the steps below:\n\n- Check **credential_source** has a **url** field and no **environment_id**,\n  otherwise skip the rest of the steps.\n- An HTTP GET request should be sent to this local **url** while injecting\n  the **headers** key/values (if provided in the configuration file) in the\n  request header. The request should respond with the external credentials\n  subject token to be passed to STS token endpoint.\n- Before parsing the token, check the **format** field.\n- If the **format** is not available, assume the external credential returned\n  by the URL response is provided in plain text format.\n- If available, check if the type is **json**\n  - If json, check the **subject_token_field_name**.\n    For Azure, this is set to **access_token**.\n  - Parse the file as JSON and then retrieve the external credential from\n    the field name based on the value of **subject_token_field_name**.\n\n### Determining the subject token in file-sourced credentials\n\nExternal account configuration JSON files contain the following information\nin the `credential_source` object to facilitate retrieval of file-sourced\ncredentials to be passed as subject tokens to the GCP STS token exchange\nendpoint.\n\n| Field Name                                        | Required | Description |\n|---------------------------------------------------|----------|:------------|\n| file                            | Yes      | This is the source of the credential. This should be used for a credential locally available. This should take precedence over `url` when both are provided. |\n| format.type                     | No       | This indicates the format of the file where the token is stored. This can be either \"text\" or \"json\". The default should be \"text\". |\n| format.subject_token_field_name | No       | Required for JSON file formats. This indicates the JSON field name where the `subject_token` should be stored. |\n\nThe JSON file for file-sourced configuration files (OIDC / SAML) should have\nthe following form:\n\n```json\n{\n  \"type\": \"external_account\",\n  \"audience\": \"//iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID\",\n  \"subject_token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n  \"service_account_impersonation_url\": \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$EMAIL:generateAccessToken\",\n  \"token_url\": \"https://sts.googleapis.com/v1/token\",\n  \"credential_source\": {\n    \"file\": \"/var/run/saml/assertion/token\"\n  }\n}\n```\n\nThe auth libraries and applications **must** follow the steps below:\n\n- Check **credential_source** has a **file** field and no **environment_id**. If not,\n    this is not a file-sourced credential and the proceeding steps do not apply.\n- Get the external credential from the file location specified by the\n  `credential_source.file` field.\n- Before parsing the token, check the **format** field.\n- If the **format** is not available, assume the external credential is\n  provided in plain text format.\n- If available, check if the type is **json**\n  - If json, check the **subject_token_field_name**.\n  - Parse the file as JSON and then retrieve the external credential from\n    the field name based on the value of **subject_token_field_name**.\n\n\n### Determining the subject token in executable-sourced credentials\n\nExternal account configuration JSON files contain the following information\nin the `credential_source` object to facilitate retrieval of executable-sourced\ncredentials to be passed as subject tokens to the GCP STS token exchange\nendpoint.\n\n| Field Name                | Required | Description                                                                                                                                                                                                                                                                                              |\n|---------------------------|----------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| executable                | Yes      | Holds the information necessary to run the executable.                                                                                                                                                                                                                                                   |\n| executable.command        | Yes      | Specifies the full command to run to retrieve the subject token. This can include arguments. Must be an absolute path for the program.                                                                                                                                                                   |\n| executable.timeout_millis | No       | Specifies the timeout duration, in milliseconds. Defaults to 30 seconds when not provided.                                                                                                                                                                                                               |\n| executable.output_file    | No       | Specifies the absolute path to the output file where the executable will cache the response. By specifying this path, the auth libraries will first check this location before running the executable. The format of the file should match the JSON format expected by the auth libraries defined below. |\n\nThe JSON file for executable-sourced configuration files (OIDC / SAML) should have\nthe following form:\n\n```json\n{\n  \"type\": \"external_account\",\n  \"audience\": \"//iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID\",\n  \"subject_token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n  \"token_url\": \"https://sts.googleapis.com/v1/token\",\n  \"service_account_impersonation_url\": \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$EMAIL@project.iam.gserviceaccount.com:generateAccessToken\",\n  \"credential_source\": {\n    \"executable\": {\n      \"command\": \"/path/to/executable --arg1=value1 --arg2=value2\",\n      \"timeout_millis\": 5000,\n      \"output_file\": \"/path/to/cached/credentials\"\n    }\n  }\n}\n```\n\nTo use executable-sourced credentials, the `GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES` environment variable must be set to `1`.\n\nAdditionally, the executable **must** adhere to the following response format:\n\nSuccessful responses:\n\n| Field Name                | Type    | Description                                                                                                                                                                        |\n|---------------------------|---------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| version                   | number  | The version of the JSON output. Currently only version 1 is supported.                                                                                                             |\n| success                   | boolean | The status of the response. True in this case.                                                                                                                                     |\n| token_type                | string  | The 3rd party subject token type. Must be *urn:ietf:params:oauth:token-type:jwt*, *urn:ietf:params:oauth:token-type:id_token*, or *urn:ietf:params:oauth:token-type:saml2*.        |\n| id_token OR saml_response | string  | The 3rd party OIDC token or SAML response.                                                                                                                                         |\n| expiration_time           | number  | The optional 3rd party subject token expiration time in seconds (unix epoch time). Only required in the response when an output file is specified in the credential configuration. |\n\nA sample successful executable OIDC response:\n```json\n{\n  \"version\": 1,\n  \"success\": true,\n  \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n  \"id_token\": \"...\",\n  \"expiration_time\": 1620499962\n}\n```\n\nA sample successful executable SAML response:\n```json\n{\n  \"version\": 1,\n  \"success\": true,\n  \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n  \"saml_response\": \"...\",\n  \"expiration_time\": 1620499962\n}\n```\n\nError responses:\n\n| Field Name | Type    | Description                                                            |\n|------------|---------|:-----------------------------------------------------------------------|\n| version    | number  | The version of the JSON output. Currently only version 1 is supported. |\n| success    | boolean | The status of the response. False in this case.                        |                                                                                                                                                                  |\n| code       | string  | The error code.                                                        |\n| message    | string  | The error message.                                                     |\n\nA sample executable error response:\n```json\n{\n  \"version\": 1,\n  \"success\": false,\n  \"code\": \"401\",\n  \"message\": \"Caller not authorized.\"\n}\n```\n\nThe auth libraries and applications **must** follow the steps below:\n\n- Check **credential_source** has an **executable** field and no **environment_id**. If not,\n  this is not a executable-sourced credential and the proceeding steps do not apply.\n- Retrieve the external credential's executable information from the\n  **credential_source.executable** field.\n- Check that the `GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES` environment variable is set to **1**. If not, error out.\n- Before the next step, check if **credential_source.executable.output_file** was specified in the credential configuration.\n  - If present, check if there is an executable response at that location.\n  - If the response is valid and unexpired, or there is no response at that location, continue execution.\n  - If the response is malformed or invalid, error out.\n- Ensure the following environment variables will be available to the executable:\n  - `GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE`: The audience field from the credential configuration. Must always be present.\n  - `GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE`: The subject token type. Must always be present.\n  - `GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL`: The service account email. Only present when service account impersonation is used.\n  - `GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE`: The output file location from the credential configuration. Only present when specified in the credential configuration.\n- Run the command specified at **credential_source.executable.command**.\n  - Fail in the following scenarios:\n    - The executable failed to complete in the timeout duration specified.\n    - The executable's response is invalid, was unsuccessful or expired.\n    - The executable finished with a non-zero exit code.\n- Parse the executable response as JSON and then retrieve the external credential from\n  the field name based on the value of **token_type**.\n  - The token_type value must be **urn:ietf:params:oauth:token-type:jwt**,\n    **urn:ietf:params:oauth:token-type:id_token**, or **urn:ietf:params:oauth:token-type:saml2**.\n  - If the **token_type** is **urn:ietf:params:oauth:token-type:saml2**, the subject token will be parsed from the **saml_response** field.\n  - Otherwise it will be parsed from the **id_token** field.\n\n## Changelog\n\n- **2021-12-10**: Add AIP for External Account Credentials (AIP 4117).\n- **2022-05-18**: Document executable-sourced credentials (AIP 4117).\n- **2022-08-31**: Document configurable token lifetime (AIP 4117).\n- **2023-09-12**: Mark region_url as optional (AIP 4117).\n\n<!-- prettier-ignore-start -->\n[0]: https://cloud.google.com/iam/docs/configuring-workload-identity-federation#aws\n[1]: https://cloud.google.com/iam/docs/configuring-workload-identity-federation#azure\n[2]: https://cloud.google.com/iam/docs/configuring-workload-identity-federation#oidc\n[3]: https://cloud.google.com/iam/docs/configuring-workload-identity-federation#saml_1\n[4]: https://tools.ietf.org/html/rfc8693\n[5]: https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateAccessToken\n[6]: https://google.aip.dev/auth/4110\n[7]: https://tools.ietf.org/html/rfc8693#section-3\n[8]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n[9]: https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html\n<!-- prettier-ignore-end -->\n"}