{"text": "---\nid: 154\nstate: approved\ncreated: 2019-07-24\nplacement:\n  category: design-patterns\n  order: 30\n---\n\n# Resource freshness validation\n\nAPIs often need to validate that a client and server agree on the current state\nof a resource before taking some kind of action on that resource. For example,\ntwo processes updating the same resource in parallel could create a race\ncondition, where the latter process \"stomps over\" the effort of the former one.\n\nETags provide a way to deal with this, by allowing the server to send a\nchecksum based on the current content of a resource; when the client sends that\nchecksum back, the server can ensure that the checksums match before acting on\nthe request.\n\n## Guidance\n\nA resource **may** include an `etag` field on any resource where it is\nimportant to ensure that the client has an up to date resource before acting on\ncertain requests:\n\n```proto\n// A representation of a book.\nmessage Book {\n  // Other fields...\n\n  // This checksum is computed by the server based on the value of other\n  // fields, and may be sent on update and delete requests to ensure the\n  // client has an up-to-date value before proceeding.\n  string etag = 99;\n}\n```\n\n- The etag field **must** be a string, and **must** be named `etag`.\n- The etag field on the _resource_ **should not** be given any behavior\n  annotations.\n- The etag field **must** be provided by the server on output, and values\n  **should** conform to [RFC 7232][].\n- If a user sends back an etag which matches the current etag value, the\n  service **must** permit the request (unless there is some other reason for\n  failure).\n- If a user sends back an etag which does not match the current etag value, the\n  service **must** send an `ABORTED` error response (unless another error takes\n  precedence, such as `PERMISSION_DENIED` if the user is not authorized).\n- If the user does not send an etag value at all, the service **should** permit\n  the request. However, services with strong consistency or parallelism\n  requirements **may** require users to send etags all the time and reject the\n  request with an `INVALID_ARGUMENT` error in this case.\n\n**Note:** ETag values **should** include quotes as described in [RFC 7232][].\nFor example, a valid etag is `\"foo\"`, not `foo`.\n\n### Declarative-friendly resources\n\nA resource that is declarative-friendly (AIP-128) **must** include an `etag`\nfield.\n\n### Etags on request methods\n\nIn some situations, the etag needs to belong on a request message rather than\nthe resource itself. For example, an `Update` standard method can \"piggyback\"\noff the `etag` field on the resource, but the `Delete` standard method can not:\n\n```proto\nmessage DeleteBookRequest {\n  // The name of the book.\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n\n  // The current etag of the book.\n  // If an etag is provided and does not match the current etag of the book,\n  // deletion will be blocked and an ABORTED error will be returned.\n  string etag = 2 [(google.api.field_behavior) = OPTIONAL];\n}\n```\n\nOn a request message, the `etag` field **should** be given a behavior annotation\n- either `REQUIRED` or `OPTIONAL`. See AIP-203 for more information.\n\nAn `etag` field **may** also be used on custom methods, similar to the example\nabove.\n\n### Strong and weak etags\n\nETags can be either \"strongly validated\" or \"weakly validated\":\n\n- A strongly validated etag means that two resources bearing the same etag are\n  byte-for-byte identical.\n- A weakly validated etag means that two resources bearing the same etag are\n  equivalent, but may differ in ways that the service does not consider to be\n  important.\n\nResources **may** use either strong or weak etags, as it sees fit, but\n**should** document the behavior. Additionally, weak etags **must** have a `W/`\nprefix as mandated by [RFC 7232][].\n\n[rfc 7232]: https://tools.ietf.org/html/rfc7232#section-2.3\n\n## Further reading\n\n- For how to retry on errors in client libraries, see AIP-194.\n\n## Changelog\n- **2021-04-01**: Updated an additional reference to `FAILED_PRECONDITION`\n  to `ABORTED`.\n- **2021-03-05**: Changed the etag error from `FAILED_PRECONDITION` (which\n  becomes HTTP 400) to `ABORTED` (409).\n- **2020-10-06**: Added declarative-friendly resource requirement.\n- **2020-09-02**: Clarified that other errors may take precedence over\n  `FAILED_PRECONDITION` for etag mismatches.\n- **2020-09-02**: Add guidance for etags on request messages.\n- **2019-09-23**: Changed the title to \"resource freshness validation\".\n"}