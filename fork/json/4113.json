{"text": "---\nid: 4113\nscope: auth\nstate: approved\ncreated: 2020-07-31\n---\n\n# gcloud CLI Integration\n\n[gcloud][0] is the CLI that manages authentication, local configuration,\ndeveloper workflow, and interactions with the Google Cloud Platform (GCP) APIs.\ngcloud can generate default credentials by obtaining user access credentials\nvia 3-legged OAuth (3LO) web flow and saving them to well-known locations in\nJSON format. These credentials are intended to be consumed by applications\nother than gcloud. [Application Default Credentials (ADC) and Google Unified\nAuth Clients (GUAC)][1] **must** support the gcloud default credentials.\n\n**Note:** Although the sample code is written in Python, this AIP describes\nguidance and requirements in a language-neutral way. It uses generic\nterminology which may be imprecise or inappropriate in certain languages or\nenvironments.\n\n## Guidance\n\nThis section describes the general guidance of supporting the gcloud default\ncredentials.\n\n### Credentials Generation\n\ngcloud default credentials can be generated via command \u2018[gcloud auth\napplication-default login][2]\u2019.\n\n```\n$ gcloud auth application-default login\n```\n\nThe generated credentials are saved to well-known locations which vary as\nplatforms:\n\n- **Linux, Mac**: \\$HOME/.config/gcloud/application_default_credentials.json\n- **Windows**: %APPDATA%/gcloud/application_default_credentials.json\n\nBelow is an example of the gcloud default credentials,\n\n```json\n{\n  \"client_id\": \"fake_id.apps.googleusercontent.com\",\n  \"client_secret\": \"fake_secret\",\n  \"quota_project_id\": \"fake_project\",\n  \"refresh_token\": \"fake_token\",\n  \"type\": \"authorized_user\"\n}\n```\n\nAll the fields are populated by the login response from the Google\nauthorization backend except for \u2018quota_project_id\u2019 which is retrieved from\ngcloud\u2019s context. Additionally, the users can override \u2018quota_project_id\u2019 with\nthe \u2018--client-id-file\u2019 flag,\n\n```\n$ gcloud auth application-default login --client-id-file=clientid.json\n```\n\n### Expected Behaviors\n\nThe auth libraries will use the information in the gcloud default credentials\nto exchange access tokens with Google authorization backend. The resulting\naccess tokens will be further used by applications to call GCP APIs.\n\nThe auth libraries and applications **must** follow the steps below:\n\n- The auth library loads the gcloud default credentials from the well-known\n  location (see previous [section](#credentials-generation)) of the platform on\n  which it runs.\n\n- The auth library calls Google authorization backend with the refresh token,\n  client ID and client secret in the gcloud default credentials and procures an\n  access token. The URL for acquiring access tokens from Google authorization\n  backend is https://oauth2.googleapis.com/token. Below is an example code with\n  [google-auth][3] as the auth library and [urllib3][4] as the http transport.\n\n```python\nfrom google.oauth2 import _client as google_auth_client\nimport google.auth.transport.urllib3 as google_auth_urllib3\nimport urllib3\n\n# Create an http transport for communicating with Google authorization backend.\nhttp = urllib3.PoolManager()\nrequest = google_auth_urllib3.Request(http)\n\n# Build parameters for the access token request. Assume the gcloud default\n# credentials are deserialized are into a dictionary \u2018gcloud_default\u2019\n# in the previous step.\ntoken_uri = 'https://oauth2.googleapis.com/token'\nrefresh_token = gcloud_default['refresh_token']\nclient_id = gcloud_default['client_id']\nclient_secret = gcloud_default['client_secret']\nscopes = ['https://www.googleapis.com/auth/cloud-platform']\n\n# Obtain an access token.\naccess_token, _, _, _ = google_auth_client.refresh_grant(\n\trequest, token_uri, refresh_token, client_id, client_secret, scopes)\n```\n\n- The application calls GCP API with the access token obtained from the\n  previous step. \u2018quota_project_id\u2019 in the gcloud default credentials\n  **should** be added to the \u2018X-Goog-User-Project\u2019 http header so that the\n  associated account will be charged for billing and quota.\n\n<!-- prettier-ignore-start -->\n[0]: https://cloud.google.com/sdk/gcloud/reference\n[1]: https://google.aip.dev/auth/4110\n[2]: https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login\n[3]: https://google-auth.readthedocs.io/en/latest/index.html\n[4]: https://urllib3.readthedocs.io/en/latest/\n<!-- prettier-ignore-end -->\n"}