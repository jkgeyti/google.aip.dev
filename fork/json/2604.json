{"text": "---\nid: 2604\nstate: approved\ncreated: 2019-06-13\nplacement:\n  category: sdk\n---\n\n# Numeric arguments\n\nSome API fields refer to either a percentage or a fixed number. For example, in\nGCE a group can be created with a configurable limit for either the percentage\nor number of instances in the group that can undergo maintenance\nsimultaneously:\n\n```proto\nmessage ConcurrencyControl {\n  enum LimitType {\n    INVALID = 0;\n    PERCENT = 1;\n    FIXED = 2;\n  }\n  optional int32 concurrency_limit = 1;\n  optional LimitType limit_type = 2;\n}\n```\n\n## Guidance\n\n### Flag layout\n\nIn gcloud, such API fields should correspond to a mutually exclusive group\nconsisting of two flags: one for specifying a number, and the other for\nspecifying a percentage. The API field in the example above would thus\ncorrespond to the following surface specification in gcloud:\n\n```yaml\n- group:\n    mutex: true\n    arguments:\n      - name: concurrency-limit\n        help_text: |\n          Maximum number of instances in the group that can undergo maintenance\n          simultaneously.\n      - name: concurrency-limit-percent\n        help_text: |\n          Integer from 0 to 100 representing the maximum percentage of instances\n          in the group that can undergo maintenance simultaneously.\n```\n\n### Flag naming\n\nAny flag taking a percentage should end with `-percent` (not `-percentage`).\n\n### Flag type\n\nAny flag taking a percentage should take an integer from 0 to 100. If more\nprecision is required, it is acceptable to take a float from 0 to 100.\n\n## Alternatives considered\n\n### One flag, where percentage is specified if the flag value ends with '%', and number is assumed otherwise\n\nIn other words, to specify 10% one would use `--concurrency-limit=10%`, and to\nspecify 10 instances one would use `--concurrency-limit=10`.\n\nThis would be a cleaner design since it naturally maps a single concept (the\nlimit) to a single flag (`--concurrency-limit`), avoiding the need for\nadditional flags that clutter the help text.\n\nHowever, the main reason not to prefer this approach is that it significantly\nincreases the risk of user error. For instance, suppose a group currently\ncontains 20 instances with a concurrency limit of 10%, and a user wishes to\nupdate the limit to 20%. If the user issues a describe command (or performs a\nGET request) to see the existing limit, the API response will contain something\nlike:\n\n```yaml\nconcurrencyControl:\n  concurrencyLimit: 10\n  limitType: PERCENT\n```\n\nIt's easy for the user to gloss over limitType and just assume that\n`--concurrency-limit=20` will update the limit to 20%. However, in reality this\nwould set the limit to 20 instances (100% of the group), potentially leading to\ncatastrophic consequences.\n\nThe recommend approach avoids this ambiguity at the expense of some elegance,\nbut we deem this tradeoff necessary.\n\n### One flag, where percentage is specified if the flag value ends with '%', and number is specified if the flag value ends with 'n'\n\nIn other words, to specify 10% one would use `--concurrency-limit=10%`, and to\nspecify 10 instances one would use `--concurrency-limit=10n`. It would be an\nerror to provide a value that doesn't end in '%' or 'n'.\n\nWhile this avoids the potential for a user to confuse percentages and numbers,\nrequiring 'n' at the end of a number is inelegant UX. A number should obviously\nresemble a number, and the choice of 'n' is also rather arbitrary.\n\n## Exceptions\n\nThis CIP does not apply for API fields like timestamps, where we allow the user\nto enter either absolute times or durations in the same flag. This is because\nabsolute times and durations have natural formats that differ, and thus there's\nno potential for a user to confuse the two. In general if this is the case, one\nflag that accepts both formats should be preferred for the sake of UX\nsimplicity.\n"}