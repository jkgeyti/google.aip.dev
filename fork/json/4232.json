{"text": "---\nid: 4232\nstate: approved\ncreated: 2018-06-22\n---\n\n# Method signatures\n\nIn protocol buffer RPCs, each RPC takes exactly one argument: a message.\nHowever, sending a full message structure can be cumbersome in the case of\nextremely simple requests.\n\nMany RPCs provide information about which pieces of the request are important\nand commonly used. In many languages, functions and methods take multiple\npositional or keyword arguments.\n\n## Guidance\n\nSome APIs provide annotations to hint how to effectively translate from a\nsingle request object to individual arguments, and client libraries **may**\nprovide overloads based on these hints.\n\nHowever, client libraries implementing this feature **must** retain the default\nbehavior of accepting the full request object. Put another way, if an API\n_adds_ this annotation to an already-published API, the resulting library\nchange **must** be backwards-compatible.\n\nClient library generators **may** also choose to provide this functionality in\nsome cases but not others, as appropriate in the environment. For example, any\nof the following strategies would be permissible:\n\n- Providing overloads iff all arguments in the signature are primitives.\n- Providing overloads only for the first of multiple signatures when providing\n  more than one would produce a conflict.\n- Any combination of the above.\n\nIn all of these situations, the requirement that the request object is always\naccepted still applies.\n\nFurthermore, client library generators **may** choose to support this\nfunctionality for a subset of RPC types, those being:\n\n- Unary\n- Server Streaming\n- Client Streaming\n- Bi-directional Streaming\n\n### Method Signatures\n\nAn RPC with the [`google.api.method_signature`][method_signature] annotation\nindicates that an overload with a flattened method signature is desired where\nsupported. The string contains comma-separated arguments, in order. If a\nfield's name contains a period (`.`) character, this indicates a nested field.\n\nAn RPC can provide this annotation more than once to specify multiple\nsignatures. Order matters here: In some situations, it may not be possible to\ngenerate an overload for every signature provided. In this situation, client\nlibrary generators **must** follow a \"first match wins\" strategy (generate an\noverload for the first signature in the conflict set, and drop the rest).\n\n**Note:** A corollary to this is that it is only guaranteed to be a\nbackwards-compatible change to _append_ method signature annotations.\n\n### Required Arguments\n\nOften, certain fields on the request message are consistently required, as\ndescribed in [AIP-203][].\n\nWhile client libraries generally should not perform validation on this (that is\nthe server's role), client libraries **may** distinguish required arguments in\nmethod signatures from optional ones if appropriate for the language. A field\nis considered required for this purpose if annotated with the\n`google.api.field_behavior` annotation value of `REQUIRED`:\n\n```proto\nmessage TranslateTextRequest {\n  // The text to translate.\n  string q = 1 [(google.api.field_behavior) = REQUIRED];\n}\n```\n\n**Note:** The annotation for field behavior is attached to _the field_, not the\nmethod.\n\n### Restrictions\n\nIf an RPC lists a nested field in\n[`google.api.method_signature`][method_signature] (for example,\n`\"foo.bar.baz\"`), none of the individual component fields may be repeated\nexcept for the last one (continuing the example, `baz` could be repeated but\n`foo` or `bar` could not be). Code generators implementing this feature\n**must** error with a descriptive error message if encountering a non-terminal\nrepeated field as a field name.\n\nIf any fields are required arguments, all required arguments are expected to\nappear before any optional ones. Code generators implementing this feature\n**should** error with a descriptive error message if encountering a required\nfield after an optional one, and **must** do so if the resulting client library\nwould not be valid.\n\n### Compatibility\n\nRemoving, reordering or altering an existing `google.api.method_signature`\nentry is a breaking change for client libraries. The associated generated\nmethod is either removed entirely or its signature is altered, both of which\nbreak user code.\n\n## Changelog\n\n- **2020-07-14**: Added caveat for supporting some RPC types\n- **2019-09-27**: Added a Compatibility section.\n\n<!-- prettier-ignore-start -->\n[aip-203]: ../0203.md\n[method_signature]: https://github.com/googleapis/googleapis/blob/master/google/api/client.proto#L100\n<!-- prettier-ignore-end -->\n"}