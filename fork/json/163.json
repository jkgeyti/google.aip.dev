{"text": "---\nid: 163\nstate: approved\ncreated: 2019-12-16\nplacement:\n  category: design-patterns\n  order: 90\n---\n\n# Change validation\n\nOccasionally, a user wants to validate an intended change to see what the\nresult will be before actually making the change. For example, a request to\nprovision new servers in a fleet will have an impact on the overall fleet size\nand cost, and could potentially have unexpected downstream effects.\n\n## Guidance\n\nAPIs **may** provide an option to validate, but not actually execute, a\nrequest, and provide the same response (status code, headers, and response\nbody) that it would have provided if the request was actually executed.\n\nTo provide this option, the method **should** include a `bool validate_only`\nfield in the request message:\n\n```proto\nmessage ReviewBookRequest {\n  string name = 1 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Book\"\n  }];\n  int32 rating = 2;\n  string comment = 3;\n\n  // If set, validate the request and preview the review, but do not actually\n  // post it.\n  bool validate_only = 4;\n}\n```\n\nThe API **must** perform permission checks and any other validation that would\nbe performed on a \"live\" request; a request using `validate_only` **must** fail\nif it determines that the actual request would fail.\n\n**Note:** It may occasionally be infeasible to provide the full output. For\nexample, if creating a resource would create an auto-generated ID, it does not\nmake sense to do this on validation. APIs **should** omit such fields on\nvalidation requests in this situation.\n\n### Declarative-friendly resources\n\nA resource that is declarative-friendly (AIP-128) **must** include a\n`validate_only` field on methods that mutate the resource.\n\n## Changelog\n\n- **2020-10-06:** Added declarative-friendly resource requirement.\n"}