{"text": "---\nid: 4234\nstate: approved\ncreated: 2021-06-07\n---\n\n# Common service client mixins\n\nOften, APIs can have common features for administering resources that are\nseparated into utility services. These common, utility services are shared among\nthe discrete product services. These common services each have a\ncentrally-defined surface, but individual instances are hosted alongside each\nproduct service. Thus, the surfaces of each common service hosted by the product\nservice are \"mixed in\" at runtime.\n\n\n## Guidance\n\nClient libraries **may** provide client methods for the common services that its\nAPI declares to be mixed-in. Such methods improve the user experience by\npresenting the mixin methods from a client configured to communicate with the\nproduct service that hosts the mixin service.\n\nIf client libraries support mixin services, they **must** support the following\ncommon services (and **may** support others):\n\n- `google.cloud.location.Locations`\n- `google.iam.v1.IAMPolicy`\n- `google.longrunning.Operations`\n\n**Note:** The list of supported mixin services and the mixin services\nthemselves both change infrequently. Any new common service to be supported\n**must** be added to the list here and generators **must** be updated.\n\nTo be generated into a client library, a mixin service **must** be declared\nunder [apis] in a [google.api.Service]. Furthermore, only the RPCs with\n[google.api.http] bindings declared in the [http] configuration of the same\n[google.api.Service] can be generated (more details on these bindings in\nAIP-127). If a mixin service RPC does not have a [google.api.http] rule declared\nin the [google.api.Service], it **must not** be generated.\n\n\n## Implementing mixin support\n\n### Generator configuration\n\nClient library generators **must** accept the file path of a\n[google.api.Service] in YAML form. This file is specified via a flag that\n**must** be optional. In other words, the flag **must not** be required for\nbasic client generation that omits the mixin methods.\n\n### Mixin API client configuration\n\nIf a mixin API utilizes client library configuration (i.e. annotations, default\nretry settings, etc.) such as `google.api.method_signature` or request header\ninjection, generators **may** support it in the generated mixin methods if the\nconfiguration is accessible.\n\nWhere client library configuration calls for a fully-qualified name, the\n_mixin's_ fully-qualified name **must** be used. That is to say, the host\nservice **must not** refer to a mixin element as if it was in its own package.\n\nFor example, configuring `google.iam.v1.IAMPolicy.GetIAMPolicy` with default\nretry and timeout settings would be as follows:\n\n```json\n{\n  \"name\": [{ \"service\": \"google.iam.v1.IAMPolicy\", \"method\": \"GetIAMPolicy\" }],\n  \"timeout\": \"60s\",\n  \"retryPolicy\": {\n    \"initialBackoff\": \"0.1s\",\n    \"maxBackoff\": \"5s\",\n    \"backoffMultiplier\": 1.3,\n    \"retryableStatusCodes\": [\"UNKNOWN\"]\n  }\n}\n```\n\n### Generating mixin methods\n\nThe mixin API RPCs **should** be generated as methods on the surface of the\nhost API's service client library, alongside the host service's RPCs. This\npresents them as top-level methods on the client, but under-the-hood, the\nappropriate mixin API stub or request should be invoked. However, generators\n**may** choose to present the mixin API RPCs in a different manner if it is more\nlanguage idiomatic.\n\n**Note:** For gRPC clients, the mixin API gRPC stub **must** be used in order\nto properly construct the gRPC request. For example, the generated, Go gRPC stub\n[LocationsClient] must be used to invoke RPCs for the\n`google.cloud.location.Locations` mixin, as opposed to that of the host\nservice's gRPC stub.\n\n### Multiple host service clients\n\nIf there are multiple services defined by the host API that would result in\nmultiple clients being generated, generators **must** include the mixin\nmethods on all eligible, generated service clients.\n\n### Overriding a duplicate RPC\n\nClient library generators **must not** generate a mixin method on any host\nservice client if a host service already defines an RPC with the same name. For\nexample, take the following service definition:\n\n```proto\nservice LibraryService {\n  rpc ListBooks(ListBooksRequest) returns (ListBooksResponse);\n\n  // Other host API RPCs...\n\n  // Redefinitions of the google.iam.v1.IAMPolicy mixin service.\n  rpc GetIamPolicy(google.iam.v1.GetIamPolicyRequest)\n      returns (google.iam.v1.Policy);\n\n  rpc SetIamPolicy(google.iam.v1.SetIamPolicyRequest)\n      returns (google.iam.v1.Policy);\n\n  rpc TestIamPermissions(google.iam.v1.TestIamPermissionsRequest)\n      returns (google.iam.v1.TestIamPermissionsResponse);\n}\n```\n\nShould the host API declare the `google.iam.v1.IAMPolicy` as a mixin service,\nclient library generators **must not** generate the resulting mixin methods that\nmatch the names explicitly declared above for _any_ service client in the host\nproto package, but they **must** generate the other methods for this mixin. In\nthis case, the generator **may** log a warning indicating that a collision was\navoided, or silently skip the mixin methods in question.\n\n[apis]: https://github.com/googleapis/googleapis/blob/master/google/api/service.proto#L96\n[google.api.Service]: https://github.com/googleapis/googleapis/blob/master/google/api/service.proto\n[google.api.Http]: https://github.com/googleapis/googleapis/blob/master/google/api/http.proto\n[http]: https://github.com/googleapis/googleapis/blob/master/google/api/service.proto#L124\n[LocationsClient]: https://pkg.go.dev/google.golang.org/genproto@v0.0.0-20210325141258-5636347f2b14/googleapis/cloud/location#LocationsClient\n"}