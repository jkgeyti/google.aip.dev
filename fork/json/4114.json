{"text": "---\nid: 4114\nscope: auth\nstate: approved\ncreated: 2020-07-28\n---\n\n# Device Certificate Authentication via Mutual TLS\n\nMutual TLS (a.k.a mTLS) authentication enables authentication of both client and\nserver identities in a TLS handshake and provides the foundation for Device\nCertificate Authentication for Context Aware Access for GCP enterprise\ncustomers. With Device Certificate Authentication, the server takes into account\nthe client certificate in the transport layer when making authorization\ndecisions. The use of a client certificate provides a stronger indication of the\naccess originating from a trusted device. This allows enterprise customers to\nrestrict access from untrusted devices.\n\n**Note:** Because this AIP describes guidance and requirements in a\nlanguage-neutral way, it uses generic terminology which may be imprecise or\ninappropriate in certain languages or environments.\n\n## Guidance\n\nThis section describes the general guidance of supporting Device Certificate\nAuthentication (a.k.a. DCA) via mTLS.\n\n### Application Default Credentials for DCA\n\nUsers **should** enable DCA through [ADC][0] instead of manual configuration via\nclient options.\n\nThere are two aspects of ADC for DCA. The first is the automatic procurement of\na device certificate. The second is the automatic switching of the service\nendpoint to the mTLS version of the service endpoint. Clients **must** support\nboth of these aspects when supporting ADC for DCA.\n\n### Expected Behavior\n\nClient support for DCA **must** give priority to user overrides specified via\nclient options. The following decision tree **should** be used:\n\n1.  If user specifies both device certificate and endpoint override via client\n    options, use them as is.\n1.  If user does not specify device certificate, attempt to procure and use\n    a default device certificate.\n1.  If user does not specify endpoint override, use the default mTLS endpoint if\n    a device certificate is available and the default regular endpoint otherwise.\n\nImplications of the above logic:\n\n1.  If user specifies a non-mTLS endpoint override but a device certificate is\n    available, pass along the certificate anyway and let the server decide what\n    to do.\n1.  If user specifies an mTLS endpoint override but device certificate is not\n    available, do not fail-fast, but let server return error when connecting.\n\nThe above behavior avoids introducing client-side logic that parses whether the\nendpoint override is an mTLS url, since the url pattern may change at anytime.\n\n### Obtaining the Default mTLS Endpoint\n\nThe default mTLS endpoint for a service **should** be read from the Discovery\nDocument field **\"mtlsRootUrl\"** instead of generated via regex patterns.\n\n### Obtaining the Default Device Certificate\n\nThe default device certificate **should** be procured using the\n[EndpointVerification][1] workflow, which fetches the certificate from a\nplatform-specific credential store (ex. KeyChain in macOS) via a native helper.\n\nExporting the certificate via the native helper involves executing a **\"cert\nprovider command\"** specified in a well-known gcloud metadata file of the\nfollowing format:\n\n```json\n{\n   \"version\": 1\n   \"min_cloud_sdk_version\": \"240.0.0\"\n   \"has_client_cert\": true\n   \"endpoint_verification_error\": \"\"\n   \"cert_provider_command\": \"[absolute_path_to_provider_command] --fetch_client_cert\"\n}\n```\n\nFor Linux and macOS platforms, the above metadata file is located at\n**\"~/.secureConnect/context_aware_metadata.json\"**.\n\nThe cert provider command will print the certificate to stdout, which will be in\nthe form of an X.509 cert followed immediately by the private key:\n\n  -----BEGIN CERTIFICATE-----\n  Common Name: Google Endpoint Verification\n  Valid From: November 10, 2019\n  Valid To: November 10, 2020\n  Serial Number: 4921083229008411918 (0x444b331faf2dbd0e)\n  ...\n  -----END CERTIFICATE-----\n  -----BEGIN PRIVATE KEY-----\n  ...\n  -----END PRIVATE KEY-----\n\n### Environment Variables\n\nThere are situations where the ADC for DCA behavior needs to be modified, such\nas for integration testing, or for failsafe. To accomodate those scenarios, the\nfollowing environment variables **should** be supported.\n\n**GOOGLE_API_USE_MTLS_ENDPOINT**: If **\"always\"**, always use mTLS endpoint. If\n**\"never\"**, always use regular endpoint. If **\"auto\"**, use the default\nbehavior, which is to use the mTLS endpoint if a device certificate is\navailable. The default value of this environment variable will be \"auto\".\n\n**GOOGLE_API_USE_CLIENT_CERTIFICATE**: If **\"true\"**, device certificate\nauthentication will be supported as described in the general guidance. If\n**\"false\"**, the device certificate **must** not be used, even if specified by\nthe user. For now, the default value will be \"false\", since mTLS support is not\nyet fully adopted by all services. Users who wish to enable DCA feature **must**\nexplicitly set this environment variable to \"true\". In the future, the default\nvalue will be \"true' to allow a more secure connection to be established\nwhenever possible.\n\n<!-- prettier-ignore-start -->\n[0]: https://google.aip.dev/auth/4110\n[1]: https://cloud.google.com/endpoint-verification/docs/overview\n<!-- prettier-ignore-end -->\n"}