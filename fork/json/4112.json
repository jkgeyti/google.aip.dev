{"text": "---\nid: 4112\nscope: auth\nstate: approved\ncreated: 2020-08-13\n---\n\n# Service Account Keys\n\nA service account is a special kind of account used by an application or a\nvirtual machine (VM) instance, not a person. Applications use service accounts\nto make authorized API calls, authorized as either the service account itself,\nor as Google Workspace or Cloud Identity users through domain-wide delegation. \nService accounts are associated with private/public RSA key-pairs that are used \nfor authentication, which is the focus of this AIP.\n\n**Note:** Because this AIP describes guidance and requirements in a\nlanguage-neutral way, it uses generic terminology which may be imprecise or\ninappropriate in certain languages or environments.\n\n## Guidance\n\nThis section describes the general guidance of supporting Service Account Key\nauthentication using traditional OAuth flow. For Service Account Key\nauthentication using self-signed JWT flow, please refer to the [self-signed\nJWT][0] AIP.\n\n### Service Account Key Authentication Using OAuth\n\nUnder the latest [ADC][1] guidance, when Service Account Key is provided as the\nsource credential, we prefer to use the [self-signed JWT][0] flow by default,\nwhich does not use the OAuth \"scope\" argument. Therefore, the client **should**\nchoose the OAuth flow over self-signed JWT flow only if the OAuth \"scope\" is\nexplicitly provided to the client.\n\n### Expected Behavior\n\nTo support Service Account Key authentication using OAuth flow, the auth\nlibraries **must** follow the steps below:\n\n1\\. Load the **Service Account ID JSON file** from the file path specified by\n**GOOGLE_APPLICATION_CREDENTIALS** environment variable, or an explicit\n**credentials** file path specified through client options. The JSON file will\nlook like below:\n\n```json\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"testproject\",\n  \"private_key_id\": \"redacted\",\n  \"private_key\": \"redacted\",\n  \"client_email\": \"testserviceaccount@test.iam.gserviceaccount.com\",\n  \"client_id\": \"113258942105700140798\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/testserviceaccount%40test.iam.gserviceaccount.com\"\n}\n```\n\n**Note:** A Service Account ID JSON file can be downloaded from [Google Cloud Console][2].\n\n2\\. Using any standard JWT library, such as one found at [jwt.io][3], create a\nJWT with a header and claims set like the following example:\n\n```json\n{\n  \"alg\": \"RS256\",\n  \"typ\": \"JWT\",\n  \"kid\": \"abcdef1234567890\"\n}\n{\n  \"iss\": \"123456-compute@developer.gserviceaccount.com\",\n  \"sub\": \"123456-compute@developer.gserviceaccount.com\",\n  \"scope\": \"https://www.googleapis.com/auth/pubsub\",\n}\n```\n\n* For the `kid` field in the header, specify the service account's private\nkey ID. You can find this value in the **private_key_id** field of the\nservice account JSON file.\n\n* For the `iss` and `sub` fields, specify the service account's email\naddress. You can find this value in the **client_email** field of the\nservice account JSON file.\n\n* For the `scope` field, specify the **scope** parameter provided by the client.\nMultiple scopes can be specified using single space (\" \") as delimiter.\n\n3\\. Sign the JWT with RSA-256 using the **private_key** found in the service\naccount JSON file. The output will be used as the request payload (a.k.a.\nassertion) for the 2-legged OAuth flow.\n\n4\\. Define a parameter \"grant_type\" as\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\". Define a parameter \"assertion\" as\nthe payload from step 3.\n\n5\\. Make a POST request to the **token_uri** endpoint with the parameters from\nstep 4 to obtain an OAuth2 Access Token.\n\n<!-- prettier-ignore-start -->\n[0]: https://google.aip.dev/auth/4111\n[1]: https://google.aip.dev/auth/4110\n[2]: https://console.cloud.google.com/apis/credentials\n[3]: https://jwt.io/#libraries-io\n<!-- prettier-ignore-end -->\n"}