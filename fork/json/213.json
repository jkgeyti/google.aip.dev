{"text": "---\nid: 213\nstate: approved\ncreated: 2018-08-17\nplacement:\n  category: protobuf\n  order: 20\n---\n\n# Common components\n\nAs specified in [AIP-215][], APIs must be self-contained except for the use\nof \"common component\" packages which are intended for use by multiple APIs.\n\nThere are two kinds of common component packages:\n\n- Organization-specific common components, covering organization-specific\n  concepts such as a \"viewport\" in Maps.\n- Global common components which are generic (i.e. not domain-specific),\n  such as \"timestamp\" or \"postal address\".\n\nWhere it is safe to share a single representation across multiple APIs,\ncommon components can make it easier for clients to interact with those APIs.\nConcept-specific client code can be written once, and messages can be used from\nthe response of one API in the request of another without clunky copying, for\nexample.\n\nThis benefit comes with significant restrictions and limitations, however,\nand should not be attempted lightly.\n\nNote that even if the *domain* of a component is common, the requirements of\na component may be organization-specific. For example, some organizations may\nhave particular requirements of how financial values are represented, leading\nto multiple finance-oriented organization-specific common components - because\nany global common component would either not meet the organization-specific\nrequirements, or be too complex for general use.\n\n## Guidance\n\n- Organization-wide common component packages **must** end with `.type`, e.g.\n  `google.geo.type` or `google.shopping.type`.\n- Organizations **must** consult the API design team before creating a new\n  organization-wide common component package.\n- Organization-wide common component packages **must** be published in [the\n  `googleapis` repository](https://github.com/googleapis/googleapis).\n- Organizations creating and publishing a new organization-wide common component\n  package **must** update this AIP to include it in the\n  [list below](#existing-organization-specific-common-component-packages).\n- Organizations **must not** define generic components in organization-specific\n  common component packages, instead preferring global common components.\n- Common components **must not** be \"moved\" (that is, deleted from one common\n  component package and added to a different one) from an organization-specific\n  common component package to a global common component package or vice versa.\n  - A common component **may** be copied from an organization-specific common\n    component package to a global common component package (without deleting the\n    original component) if it is found to be more widely-applicable than\n    originally expected.\n- Fields **should not** be added to existing messages.\n- Values **should not** be added to existing enums.\n- Fields **must not** be removed from existing messages.\n- Values **must not** be removed from existing enums.\n- While documentation **may** be clarified, it **should not** change the\n  meanings of existing values, including the validity of any given message\n  or set of messages.\n- New proto messages and enums **may** be added to common component packages.\n  - API teams  **should** allow sufficient time for propagation to clients\n    before using the new messages and enums in their APIs. Fields may take some\n    time for any changes to propagate through publication to client libraries\n    and other surfaces.\n  - API teams **should** consult widely within their organization, and ideally\n    with the API design team, before adding a new message or enum, due to the\n    limitations listed above.\n\n## Existing global common components\n\nThe global common components, which public-facing protos for an API **may** safely\nimport, are as follows:\n\n- [`google.api.*`](https://github.com/googleapis/googleapis/blob/master/google/api) (but *not* subpackages of `google.api`)\n- [`google.longrunning.Operation`](https://github.com/googleapis/googleapis/blob/master/google/longrunning/operations.proto)\n- [`google.protobuf.*`](https://github.com/protocolbuffers/protobuf/tree/master/src/google/protobuf)\n- [`google.rpc.*`](https://github.com/googleapis/googleapis/blob/master/google/rpc/)\n- [`google.type.*`][type]\n\nNote that some common components may have internal-only fields. APIs **should**\ngenerally only rely on fields which have been\n[released into open source](https://github.com/googleapis/googleapis).\n\nGoogle APIs **may** also import [`google.iam.v1.*`][iam], which provides the\nIAM messages used throughout Google.\n\n<!-- prettier-ignore -->\n[iam]: https://github.com/googleapis/googleapis/tree/master/google/iam/v1\n\n**Note:** Many APIs also import components from other packages for internal-only\nuse (e.g. to apply visibility labels or provide instructions to internal\ninfrastructure). This is acceptable provided that the _public_ components do not\ncontain such references.\n\n### Protobuf types\n\nThe `google.protobuf` package is somewhat special in that it is shipped with\nprotocol buffers itself, rather than with API tooling. (For most API designers,\nthis should be an implementation detail).\n\nThis package includes a small library of types useful for representing common\nprogramming language constructs:\n\n- [`google.protobuf.Duration`][duration]: Durations, with nanosecond-level\n  precision. The protobuf runtime provides helper functions to convert to and\n  from language-native duration objects where applicable (such as Python's\n  [`timedelta`][timedelta]).\n- [`google.protobuf.Struct`][struct]: JSON-like structures (a dictionary of\n  primitives, lists, and other dictionaries). The protobuf runtime provides\n  helper functions in most languages to convert struct objects to and from\n  JSON.\n- [`google.protobuf.Timestamp`][timestamp]: Timestamps, with nanosecond-level\n  precision. The protobuf runtime provides helper functions in most languages\n  to convert to and from language-native timestamp objects (such as Python's\n  [`datetime`][datetime]).\n\n<!-- prettier-ignore-start -->\n[datetime]: https://docs.python.org/3/library/datetime.html#datetime.datetime\n[duration]: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/duration.proto\n[struct]: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto\n[timedelta]: https://docs.python.org/3/library/datetime.html#datetime.timedelta\n[timestamp]: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/timestamp.proto\n<!-- prettier-ignore-end -->\n\n### API Types\n\nThe `google.type` package provides a \"standard library\" of types useful for\nrepresenting common concepts in APIs. While types are added from time to time\nand the definitive list is always [the code][type], several types deserve note:\n\n- [`google.type.Color`][color]: RGB or RGBA colors.\n- [`google.type.Date`][date]: Calendar dates, with no time or time zone\n  component.\n- [`google.type.DayOfWeek`][day_of_week]: The day of the week, with no other\n  date, time, or time zone component.\n- [`google.type.LatLng`][lat_lng]: Geographic coordinates.\n- [`google.type.Money`][money]: Currency.\n- [`google.type.PostalAddress`][postal_address]: Postal addresses in most\n  countries.\n- [`google.type.TimeOfDay`][time_of_day]: Wall-clock time, with no date or time\n  zone component.\n\n<!-- prettier-ignore-start -->\n[type]: https://github.com/googleapis/googleapis/tree/master/google/type\n[color]: https://github.com/googleapis/googleapis/blob/master/google/type/color.proto\n[date]: https://github.com/googleapis/googleapis/blob/master/google/type/date.proto\n[day_of_week]: https://github.com/googleapis/googleapis/blob/master/google/type/dayofweek.proto\n[lat_lng]: https://github.com/googleapis/googleapis/blob/master/google/type/latlng.proto\n[money]: https://github.com/googleapis/googleapis/blob/master/google/type/money.proto\n[postal_address]: https://github.com/googleapis/googleapis/blob/master/google/type/postal_address.proto\n[time_of_day]: https://github.com/googleapis/googleapis/blob/master/google/type/timeofday.proto\n<!-- prettier-ignore-end -->\n\n### Adding to common protos\n\nOccasionally, it may be useful to add protos to these packages or to add to the\nlist of commonly-available protos. In order to do this, [open an issue][] on\nthe AIP repository in GitHub, noting the guidelines above.\n\n## Existing organization-specific common component packages\n\nThe following organization-specific common component packages exist and conform with the above guidance:\n\n- [`google.apps.script.type`](https://github.com/googleapis/googleapis/tree/master/google/apps/script/type)\n  Common component package for Google Apps Script.\n- [`google.geo.type`](https://github.com/googleapis/googleapis/tree/master/google/geo/type)\n  Common component package for Google Maps and the Geo organization.\n- [`google.actions.type`](https://github.com/googleapis/googleapis/tree/master/google/actions/type)\n  Common component package for Actions on Google APIs.\n\n## Non-conformant common component packages\n\nThe following common component packages exist, but do not conform with the above guidance,\nand do not form a precedent for further such packages.\n\n- [`google.cloud.common`](https://github.com/googleapis/googleapis/tree/master/google/cloud/common):\n  This does not conform to the requirement for the package name to end in `.type`. (This would otherwise\n  be acceptable, and this package should be considered as the Cloud common component package.)\n- [`google.logging.type`](https://github.com/googleapis/googleapis/tree/master/google/logging/type):\n  This appears to be API-specific, although it's used from multiple APIs; some aspects should probably\n  be global or in a Cloud common component package.\n- [`google.cloud.workflows.type`](https://github.com/googleapis/googleapis/tree/master/google/cloud/workflows/type):\n  API-specific types.\n- [`google.cloud.oslogin.common`](https://github.com/googleapis/googleapis/tree/master/google/cloud/oslogin/common):\n  API-specific types, and a non-conformant name.\n- [`google.identity.accesscontextmanager.type`](https://github.com/googleapis/googleapis/tree/master/google/identity/accesscontextmanager/type):\n  API-specific types.\n- [`google.networking.trafficdirector.type`](https://github.com/googleapis/googleapis/tree/master/google/networking/trafficdirector/type):\n  API-specific types.\n\n## Rationale\n\nCommon components are effectively unversioned: APIs evolve independently of\neach other, both in terms of definition and implementation. A change such as\nadding a field is backward-compatible and predictable in specific APIs, and the\nAPI team can ensure that the server implementation is available before the API\ndefinition is published. By contrast, a change in a common component would\neffectively be universally available even if most API implementations did not\ntake it into account.\n\nAdding a new message or enum is backward-compatible, as it does not affect\nexisting APIs that may import other messages or enums from the same common\ncomponent package.\n\nConsultation with the API design team is required for global common components\nand suggested for organization-specific common components as the border between\n\"generic\" and \"organization-specific\" is a gray area; some generic *concepts*\nhave organization-specific use cases which surface through the components.\n\n## Changelog\n\n- **2023-06-27**: Restructured AIPs 215 and 213 for clarity, and introduced the\n  concept of organization-wide common protos more formally.\n- **2018-08-17**: Initial AIP written.\n\n[open an issue]: https://github.com/googleapis/aip/issues\n[aip-215]: ./0215.md\n"}