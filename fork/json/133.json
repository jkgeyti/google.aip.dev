{"text": "---\nid: 133\nstate: approved\ncreated: 2019-01-23\nupdated: 2022-06-02\nplacement:\n  category: operations\n  order: 30\n---\n\n# Standard methods: Create\n\nIn REST APIs, it is customary to make a `POST` request to a collection's URI\n(for example, `/v1/publishers/{publisher}/books`) in order to create a new\nresource within that collection.\n\nResource-oriented design ([AIP-121][]) honors this pattern through the `Create`\nmethod. These RPCs accept the parent collection and the resource to create (and\npotentially some other parameters), and return the created resource.\n\n## Guidance\n\nAPIs **should** generally provide a create method for resources unless it is\nnot valuable for users to do so. The purpose of the create method is to create\na new resource in an already-existing collection.\n\nCreate methods are specified using the following pattern:\n\n```proto\nrpc CreateBook(CreateBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n  };\n  option (google.api.method_signature) = \"parent,book\";\n}\n```\n\n- The RPC's name **must** begin with the word `Create`. The remainder of the\n  RPC name **should** be the singular form of the resource being created.\n- The request message **must** match the RPC name, with a `Request` suffix.\n- The response message **must** be the resource itself. There is no\n  `CreateBookResponse`.\n  - The response **should** include the fully-populated resource, and **must**\n    include any fields that were provided unless they are input only (see\n    [AIP-203][]).\n  - If the create RPC is [long-running](#long-running-create), the response\n    message **must** be a `google.longrunning.Operation` which resolves to the\n    resource itself.\n- The HTTP verb **must** be `POST`.\n- The collection where the resource is being added **should** map to the URI\n  path.\n  - The collection's parent resource **should** be called `parent`, and\n    **should** be the only variable in the URI path.\n  - The collection identifier (`books` in the above example) **must** be\n    a literal string.\n- There **must** be a `body` key in the `google.api.http` annotation, and it\n  **must** map to the resource field in the request message.\n  - All remaining fields **should** map to URI query parameters.\n- There **should** be exactly one `google.api.method_signature` annotation,\n  with a value of `\"parent,{resource},{resource}_id\"`, or \"`\"parent,{resource}\"`\n  if the resource ID is not required.\n- If the API is operating on the [management plane][], the operation should have\n  [strong consistency][]: the completion of a create operation **must** mean\n  that all user-settable values and the existence of the resource have reached a\n  steady-state and reading resource state returns a consistent response.\n\n### Request message\n\nCreate methods implement a common request message pattern:\n\n```proto\nmessage CreateBookRequest {\n  // The parent resource where this book will be created.\n  // Format: publishers/{publisher}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The ID to use for the book, which will become the final component of\n  // the book's resource name.\n  //\n  // This value should be 4-63 characters, and valid characters\n  // are /[a-z][0-9]-/.\n  string book_id = 2 [(google.api.field_behavior) = REQUIRED];\n\n  // The book to create.\n  Book book = 3 [(google.api.field_behavior) = REQUIRED];\n}\n```\n\n- A `parent` field **must** be included unless the resource being created is a\n  top-level resource. It **should** be called `parent`.\n  - The field **should** be [annotated as required][aip-203].\n  - The field **must** identify the [resource type][aip-123] of the resource\n    being created.\n- A `{resource}_id` field **must** be included for management plane resources,\n  and **should** be included for data plane resources.\n- The resource field **must** be included and **must** map to the POST body.\n- The request message **must not** contain any other required fields and\n  **should not** contain other optional fields except those described in this\n  or another AIP.\n\n### Long-running create\n\nSome resources take longer to create a resource than is reasonable for a\nregular API request. In this situation, the API **should** use a long-running\noperation (AIP-151) instead:\n\n```proto\nrpc CreateBook(CreateBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"Book\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n```\n\n- The response type **must** be set to the resource (what the return type would\n  be if the RPC was not long-running).\n- Both the `response_type` and `metadata_type` fields **must** be specified.\n\n**Important:** Declarative-friendly resources (AIP-128) **should** use\nlong-running operations. The service **may** return an LRO that is already set\nto done if the request is effectively immediate.\n\n### User-specified IDs\n\nAn API **must** allow a user to specify the ID component of a resource (the last\nsegment of the resource name) on creation if the API is operating on the\n[management plane][].\n\nOn the [data plane][], an API **should** allow a user to specify the ID.\nExceptional cases should have the following behavior:\n\n- The data plane resource allows identical records without a need to\n  disambiguate between the two (e.g. rows in a table with no primary key).\n- The data plane resource will not be exposed in [Declarative clients][].\n\nAn API\n**may** allow the `{resource}_id` field have the [field_behavior][] `OPTIONAL`,\nand generate a system-generated ID if one is not specified.\n\nFor example:\n\n```\n// Using user-specified IDs.\npublishers/lacroix/books/les-miserables\n\n// Using system-generated IDs.\npublishers/012345678-abcd-cdef/books/12341234-5678-abcd\n```\n\n- The `{resource}_id` field **must** exist on the request message, not the\n  resource itself.\n  - The field **may** be required or optional. If it is required, it **should**\n    include the corresponding annotation.\n- The `name` field on the resource **must** be ignored.\n- There **should** be exactly one `google.api.method_signature` annotation on\n  the RPC, with a value of `\"parent,{resource},{resource}_id\"` if the resource\n  being created is not a top-level resource, or with a value of\n  `\"{resource},{resource}_id\"` if the resource being created is a top-level\n  resource.\n- The documentation **should** explain what the acceptable format is, and the\n  format **should** follow the guidance for resource name formatting in\n  [AIP-122][].\n- If a user tries to create a resource with an ID that would result in a\n  duplicate resource name, the service **must** error with `ALREADY_EXISTS`.\n  - However, if the user making the call does not have permission to see the\n    duplicate resource, the service **must** error with `PERMISSION_DENIED`\n    instead.\n\n**Note:** For REST APIs, the user-specified ID field, `{resource}_id`,\nis provided as a query parameters on the request URI.\n\n### Errors\n\nSee [errors][], in particular [when to use PERMISSION_DENIED and\nNOT_FOUND errors][permission-denied].\n\n## Further reading\n\n- For ensuring idempotency in `Create` methods, see [AIP-155][].\n- For naming resources involving Unicode, see [AIP-210][].\n\n## Rationale\n\n### Requiring user-specified ids\n\n[Declarative clients][] use the resource ID as a way to identify a resource for\napplying updates and for conflict resolution. The lack of a user-specified ID\nmeans a client is unable to find the resource unless they store the identifier\nlocally, and can result in re-creating the resource. This in turn has a\ndownstream effect on all resources that reference it, forcing them to update to\nthe the ID of the newly-created resource.\n\nHaving a user-specified ID also means the client can precalculate the resource\nname and use it in references from other resources.\n\n[aip-121]: ./0121.md\n[aip-122]: ./0122.md\n[aip-123]: ./0123.md\n[aip-155]: ./0155.md\n[aip-203]: ./0203.md\n[aip-210]: ./0210.md\n[data plane]: ./0111.md#data-plane\n[management plane]: ./0111.md#management-plane\n[errors]: ./0193.md\n[field_behavior]: ./203.md\n[Declarative clients]: ./0009.md#declarative-clients\n[permission-denied]: ./0193.md#permission-denied\n[strongly consistent]: ./0121.md#strong-consistency\n\n## Changelog\n\n- **2023-10-20**: Clarify that {resource}_id is only required for management plane resources.\n- **2023-08-24**: Adding consistency requirement.\n- **2023-05-11**: Changing guidance around resource_id to a must.\n- **2022-11-04**: Referencing aggregated error guidance in AIP-193, similar to\n  other CRUDL AIPs.\n- **2022-06-02**: Changed suffix descriptions to eliminate superfluous \"-\".\n- **2020-10-06**: Added declarative-friendly guidance.\n- **2020-08-14**: Updated error guidance to use permission denied over\n  forbidden.\n- **2020-06-08**: Added guidance on returning the full resource.\n- **2019-11-22**: Added clarification on what error to use if a duplicate name\n  is sent.\n- **2019-10-18**: Added guidance on annotations.\n- **2019-08-01**: Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership.\n- **2019-06-10**: Added guidance for long-running create.\n- **2019-05-29**: Added an explicit prohibition on arbitrary fields in standard\n  methods.\n"}