{"text": "---\nid: 4221\nstate: approved\ncreated: 2019-06-17\n---\n\n# Client-side retry\n\nMany APIs have error modes that a client should retry. These error modes vary\nacross APIs, leaving users to hand-write retry logic around client libraries\nbased on available documentation. Client libraries have the opportunity to help\nby implementing automatic client-side retries of well-known error modes.\n\n## Guidance\n\nClient libraries **should** provide automatic, client-side retry logic. Client\nlibraries with automatic client-side retry logic **should** provide a mechanism\nfor users to specify error codes to be retried and delays for those retries.\n\nClient libraries for API systems that support remotely-resolved client retry\nconfiguration **should** respect the remotely-resolved configuration. However,\nuser configuration **must** be honored.\n\nClient library generators implementing this feature **must** accept a retry\nconfiguration. This retry configuration **may** be supplied via a `protoc`\nplugin option. In the absence of a given retry configuration, client library\ngenerators **should not** generate a default retry configuration.\n\n### Retry implementation\n\nClient libraries **should** make client-side retry transparent to the user. The\nuser **should not** have to opt-in to client-side retry explicitly, but the\nuser **must** have a way to disable client-side retry altogether.\n\n### Retry configuration mechanisms\n\nClient libraries **should** surface a mechanism through which users may control\nthe client-side retry configuration, including disabling client-side retry\naltogether.\n\nFor example, Go client libraries for gRPC services can supply an option,\n[WithDisableRetry][0], at client initialization to disable the use of the\nautomatic client-side retry logic.\n\n```go\nopts := []grpc.DialOption{\n  grpc.WithDisableRetry(),\n  grpc.WithTransportCredentials(creds),\n}\n\ncc, err := grpc.Dial(\"my.api.net:443\", opts...)\nif err != nil {\n  // ...\n}\n```\n\n### Remotely-resolved client configuration\n\nSome API systems have built-in mechanisms for clients to retrieve a\nremotely-defined configuration that includes client-side retry configuration.\n\nFor example, gRPC supports the [resolution of client configuration][1] that\nincludes configuration for [automatic client-side retry][2].\n\nClient libraries **should** respect the remotely-resolved configuration, except\nwhen a user overrides it via the aforementioned client library\n[retry configuration mechanisms](#retry-configuration-mechanisms).\n\n### Client library generator retry configuration\n\nClient library generators that implement client-side retry **must** accept a\nretry configuration. This is to enable API producers to supply a retry\nconfiguration that best-suits their service.\n\nFor example, gRPC client-side retry is configured with a [RetryPolicy][3]\nwithin a [gRPC Service Config][4]. Here is a configuration that applies the\n`RetryPolicy` to all methods in the `google.example.library.v1.LibraryService`\nservice, except for those that are explicitly named which get no `RetryPolicy`.\n\n<!-- prettier-ignore-start -->\n```json\n{\n  \"methodConfig\": [{\n    \"name\": [{ \"service\": \"google.example.library.v1.LibraryService\" }],\n    \"waitForReady\": true,\n    \"timeout\": \"60s\",\n    \"retryPolicy\": {\n      \"maxAttempts\": 3,\n      \"initialBackoff\": \"0.01s\",\n      \"maxBackoff\": \"60s\",\n      \"backoffMultiplier\": 1.3,\n      \"retryableStatusCodes\": [\"UNAVAILABLE\"]\n    }\n  },\n  {\n    \"name\": [\n      { \"service\": \"google.example.library.v1.LibraryService\", \"method\": \"CreatePublisher\" },\n      { \"service\": \"google.example.library.v1.LibraryService\", \"method\": \"DeletePublisher\" },\n      { \"service\": \"google.example.library.v1.LibraryService\", \"method\": \"CreateBook\" },\n      { \"service\": \"google.example.library.v1.LibraryService\", \"method\": \"DeleteBook\" },\n      { \"service\": \"google.example.library.v1.LibraryService\", \"method\": \"UpdateBook\" },\n      { \"service\": \"google.example.library.v1.LibraryService\", \"method\": \"MoveBook\" }\n    ],\n    \"waitForReady\": true,\n    \"timeout\": \"60s\"\n  }]\n}\n```\n<!-- prettier-ignore-end -->\n\nThe retry configuration **may** be a `protoc` plugin option. For example, a\ngenerator could accept the file path of the configuration with an option like:\n\n    --{plugin_name}_opt=\"retry-config=/path/to/config.file\"\n\nIn the absence of a retry configuration, a generator **should not** generate a\n\"default\" retry configuration. This results in a generated client library that\ndoes not retry anything unless configured to do so by the user.\n\n<!-- prettier-ignore-start -->\n[0]: https://godoc.org/google.golang.org/grpc#WithDisableRetry\n[1]: https://github.com/grpc/grpc/blob/837a99e1d49a892e6f2c46ee09a1b6b8405571c6/doc/naming.md#resolver-plugins\n[2]: https://github.com/grpc/proposal/blob/d4fc009e55f95297374e821d67d679b931753a59/A6-client-retries.md\n[3]: https://github.com/grpc/proposal/blob/d4fc009e55f95297374e821d67d679b931753a59/A6-client-retries.md#retry-policy\n[4]: https://github.com/grpc/proposal/blob/d4fc009e55f95297374e821d67d679b931753a59/A6-client-retries.md#integration-with-service-config\n<!-- prettier-ignore-end -->\n\n## Further reading\n\n- For which error codes to retry, see [AIP-194](https://aip.dev/194).\n\n## Changelog\n\n- **2020-09-23**: Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership.\n"}