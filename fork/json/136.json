{"text": "---\nid: 136\nstate: approved\ncreated: 2019-01-25\nupdated: 2023-03-02\nplacement:\n  category: operations\n  order: 100\n---\n\n# Custom methods\n\nResource-oriented design (AIP-121) uses custom methods to provide a means to\nexpress arbitrary actions that are difficult to model using only the standard\nmethods. Custom methods are important because they provide a means for an API's\nvocabulary to adhere to user intent.\n\n## Guidance\n\nCustom methods **should** only be used for functionality that can not be easily\nexpressed via standard methods; prefer standard methods if possible, due to\ntheir consistent semantics. (Of course, this only applies if the functionality\nin question actually conforms to the normal semantics; it is _not_ a good idea\nto contort things to endeavor to make the standard methods \"sort of work\".)\n\nWhile custom methods vary widely in how they are designed, many principles\napply consistently:\n\n```proto\n// Archives the given book.\nrpc ArchiveBook(ArchiveBookRequest) returns (ArchiveBookResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*}:archive\"\n    body: \"*\"\n  };\n}\n```\n\n**Note:** The pattern above shows a custom method that operates on a specific\nresource. Custom methods can be associated with resources, collections, or\nservices. The bullets below apply in all three cases.\n\n- The name of the method **should** be a verb followed by a noun.\n  - The name **must not** contain prepositions (\"for\", \"with\", etc.).\n  - The verb in the name **should not** contain any of the standard method verbs ([Get][],\n    [List][], [Create][], [Update][], [Delete][]).\n  - The name **must not** include the term `Async`. Instead, if the intention is\n    to differentiate between immediate and long-running RPCs, the suffix `LongRunning`\n    **may** be used for this purpose. For example, to create a long-running book creation\n    RPC (if the standard `CreateBook` method was designed before long-running aspects were\n    considered), a custom `CreateBookLongRunning` method could be introduced.\n- The HTTP method **must** be `GET` or `POST`:\n  - `GET` **must** be used for methods retrieving data or resource state.\n  - `POST` **must** be used if the method has side effects or mutates resources\n    or data.\n- The HTTP URI **must** use a `:` character followed by the custom verb\n  (`:archive` in the above example), and the verb in the URI **must** match the\n  verb in the name of the RPC.\n  - If word separation is required, `camelCase` **must** be used.\n- The `body` clause in the `google.api.http` annotation **should** be `\"*\"`.\n  - See [HTTP and gRPC Transcoding][transcoding] for more information.\n- Custom methods **should** take a request message matching the RPC\n  name, with a `Request` suffix.\n- Custom methods **should** return a response message matching the RPC\n  name, with a `Response` suffix.\n  - When operating on a specific resource, a custom method **may** return the\n    resource itself.\n\n\n### Resource-based custom methods\n\nCustom methods **must** operate on a resource if the API can be modeled\nas such:\n\n```proto\n// Archives the given book.\nrpc ArchiveBook(ArchiveBookRequest) returns (ArchiveBookResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*}:archive\"\n    body: \"*\"\n  };\n}\n```\n\n- The parameter for the resource's name **must** be called `name`, and\n  be the only variable in the URI path.\n\n### Collection-based custom methods\n\nWhile most custom methods operate on a single resource, some custom methods\n**may** operate on a collection instead:\n\n```proto\n// Sorts the books from this publisher.\nrpc SortBooks(SortBooksRequest) returns (SortBooksResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books:sort\"\n    body: \"*\"\n  };\n}\n```\n\n- The collection's parent resource **must** be called `parent`, and\n  be the only variable in the URI path.\n- The collection key (`books` in the above example) **must** be literal.\n\n### Stateless methods\n\nSome custom methods are not attached to resources at all. These methods are\ngenerally _stateless_: they accept a request and return a response, and have no\npermanent effect on data within the API.\n\n```proto\n// Translates the provided text from one language to another.\nrpc TranslateText(TranslateTextRequest) returns (TranslateTextResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{project=projects/*}:translateText\"\n    body: \"*\"\n  };\n}\n```\n\n- If the method runs in a particular scope (such as a project, as in the above\n  example), the field name in the request message **should** be the name of the\n  scope resource. If word separators are necessary, `snake_case` **must** be\n  used.\n- The URI **should** place both the verb and noun after the `:` separator\n  (avoid a \"faux collection key\" in the URI in this case, as there is no\n  collection). For example, `:translateText` is preferable to `text:translate`.\n- Stateless methods **must** use `POST` if they involve billing.\n\n### Declarative-friendly resources\n\nDeclarative-friendly resources usually **should not** employ custom methods\n(except specific declarative-friendly custom methods discussed in other AIPs),\nbecause declarative-friendly tools are unable to automatically determine what\nto do with them.\n\nAn exception to this is for rarely-used, fundamentally imperative operations,\nsuch as a `Move` or `Rename` operation, for which there would not be an\nexpectation of declarative support.\n\n## Rationale\n\n### HTTP path\n\nSimilar to standard methods, a custom method that operates on a resource or\ncollection needs a `name` or `parent` parameter to indicate the resource that it\noperates on. This convention allows clients to map custom methods to the\nappropriate resource.\n\n### HTTP methods\n\nAllowing both `GET` and `POST` HTTP verbs allows a clear distinction for\nwhich methods do not mutate data, and which ones do. Methods that only\nread data have first-class concepts in some clients (DataSources in\nTerraform) and clearly indicate to a user which methods can be called\nwithout risk of runtime impact.\n\n\n[get]: ./0131.md\n[list]: ./0132.md\n[create]: ./0133.md\n[update]: ./0134.md\n[delete]: ./0135.md\n[transcoding]: ./0127.md\n\n### RPC name\n\nThe term \"async\" is commonly used in programming languages to indicate whether\na specific method call is synchronous or asynchronous, including for making RPCs.\nThat sync/async aspect is at a different abstraction level to whether the RPC\nitself is intended to start a long-running operation. Using \"async\" within the\nRPC name itself causes confusion, and can even cause issues for client libraries\nwhich generate both synchronous and asynchronous methods to call the RPC in some\nlanguages.\n\n## Changelog\n\n- **2023-11-16:** Included link to AIP-127 \"HTTP and gRPC Transcoding\" for guidance on body definition.\n- **2023-05-16:** Added prohibition of the term \"async\" within RPC names.\n- **2023-05-09:** Adding guidance for POST and GET, require parent instead of\n  the resource singular.\n- **2023-03-02:** Explicitly discourage use of standard method verbs.\n- **2022-06-02:** Changed suffix descriptions to eliminate superfluous \"-\".\n- **2020-10-06:** Added declarative-friendly guidance.\n- **2019-08-01:** Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership.\n"}