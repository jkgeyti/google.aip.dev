{"text": "---\nid: 122\nstate: approved\ncreated: 2019-01-26\nplacement:\n  category: resource-design\n  order: 20\n---\n\n# Resource names\n\nMost APIs expose _resources_ (their primary nouns) which users are able to\ncreate, retrieve, and manipulate. Additionally, resources are _named_: each\nresource has a unique identifier that users use to reference that resource, and\nthese names are what users should _store_ as the canonical names for the\nresources.\n\n## Guidance\n\nAll resource names defined by an API **must** be unique within that API. (See\nthe section on [full resource names](#full-resource-names) below for more\ninformation on referring to resources across APIs.)\n\nResource names are formatted according to the [URI path schema][], but without\nthe leading slash:\n\n    publishers/123/books/les-miserables\n    users/vhugo1802\n\n- Resource name components **should** usually alternate between collection\n  identifiers (example: `publishers`, `books`, `users`) and resource IDs\n  (example: `123`, `les-miserables`, `vhugo1802`).\n- Resource names **must** use the `/` character to separate individual segments\n  of the resource name.\n  - Non-terminal segments of a resource name **must not** contain a `/`\n    character.\n  - The terminal segment of a resource name **should not** contain a `/`\n    character.\n- Resource names **should** only use characters available in DNS names, as\n  defined by [RFC-1123](https://tools.ietf.org/html/rfc1123).\n  - Additionally, resource IDs **should not** use upper-case letters.\n  - If additional characters are necessary, resource names **should not** use\n    characters that require URL-escaping, or characters outside of ASCII.\n  - If Unicode characters can not be avoided, resource names **must** be stored\n    in Normalization Form C (see [AIP-210][]).\n- Resources **must** expose a `name` field that contains its resource name.\n  - Resources **may** provide the resource ID as a separate field (e.g.\n    `book_id`). This field **must** apply the\n    [`OUTPUT_ONLY`](./0203.md#output-only) field behavior classification.\n  - Resources **may** expose a separate, system-generated unique ID field\n    [(`uid`)](./0148.md#uid). This field **must** apply the\n    [`OUTPUT_ONLY`](./0203.md#output-only) field behavior classification.\n  - Resources **must not** expose tuples, self-links, or other forms of\n    resource identification.\n  - All ID fields **should** be strings.\n\n**Note:** Resource names as described here are used within the scope of a\nsingle API (or else in situations where the owning API is clear from the\ncontext), and are only required to be unique within that scope. For this\nreason, they are sometimes called _relative resource names_ to distinguish them\nfrom _full resource names_ (discussed below).\n\n[aip-210]: ./0210.md\n[uri path schema]: https://datatracker.ietf.org/doc/html/rfc3986#appendix-A\n\n### Collection identifiers\n\nThe collection identifier segments in a resource name **must** be the plural\nform of the noun used for the resource. (For example, a collection of\n`Publisher` resources is called `publishers` in the resource name.)\n\n- Collection identifiers **must** be concise American English terms.\n- Collection identifiers **must** be in `camelCase`.\n- Collection identifiers **must** begin with a lower-cased letter and contain\n  only ASCII letters and numbers (`/[a-z][a-zA-Z0-9]*/`).\n- Collection identifiers **must** be plural.\n  - In situations where there is no plural word (\"info\"), or where the singular\n    and plural terms are the same (\"moose\"), the non-pluralized (singular) form\n    is correct. Collection segments **must not** \"coin\" words by adding \"s\" in\n    such cases (e.g, avoid \"infos\").\n- Within any given single resource name, collection identifiers **must** be\n  unique. (e.g. `people/xyz/people/abc` is invalid)\n\n\n#### Nested collections\n\nIf a resource name contains multiple levels of a hierarchy, and a parent\ncollection's name is used as a prefix for the child resource's name, the child\ncollection's name **may** omit the prefix. For example, given a collection of\n`UserEvent` resources that would normally be nested underneath `users`:\n\n```\nusers/vhugo1802/userEvents/birthday-dinner-226\n```\n\nAn API **should** use the less-redundant form:\n\n```\nusers/vhugo1802/events/birthday-dinner-226\n```\n\nIn this situation, the _message_ is still called `UserEvent`; only the resource\nname is shortened.\n\n**Note:** APIs wishing to do this **must** follow this format consistently\nthroughout the API, or else not at all.\n\n### Resource ID segments\n\nA resource ID segment identifies the resource within its parent collection. In\nthe resource name `publishers/123/books/les-miserables`, `123` is the resource\nID for the publisher, and `les-miserables` is the resource ID for the book.\n\n- If resource IDs are user-specified, the API **must** document allowed\n  formats. User-specified resource IDs **should** conform to [RFC-1034][];\n  which restricts to letters, numbers, and hyphen, with the first character\n  a letter, the last a letter or a number, and a 63 character maximum.\n  - Additionally, user-specified resource IDs **should** restrict letters to\n    lower-case (`^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`).\n  - Characters outside of ASCII **should not** be permitted; however, if\n    Unicode characters are necessary, APIs **must** follow guidance in\n    [AIP-210][].\n  - User-specified IDs **should not** be permitted to be a UUID (or any value\n    that syntactically appears to be a UUID).\n- If resource IDs are not user-settable, the API **should** document the\n  basic format, and any upper boundaries (for example, \"at most 63\n  characters\").\n- For more information, see the [create][] standard method.\n\n[create]: ./0133.md#user-specified-ids\n[rfc-1034]: https://tools.ietf.org/html/rfc1034\n\n### Resource ID aliases\n\nIt is sometimes valuable to provide an alias for common lookup patterns for\nresource IDs. For example, an API with `users` at the top of its resource\nhierarchy may wish to provide `users/me` as a shortcut for retrieving\ninformation for the authenticated user.\n\nAPIs **may** provide programmatic aliases for common lookup patterns. However,\nall data returned from the API **must** use the canonical resource name.\n\n### Full resource names\n\nIn most cases, resource names are used within a single API only, or else they\nare used in contexts where the owning API is clear (for example,\n`string pubsub_topic`).\n\nHowever, sometimes it is necessary for services to refer to resources in an\narbitrary API. In this situation, the service **should** use the _full resource\nname_, a schemeless URI with the owning [API's service name](./0009.md#api-service-name),\nfollowed by the relative resource name:\n\n```\n//library.googleapis.com/publishers/123/books/les-miserables\n//calendar.googleapis.com/users/vhugo1802\n```\n\n**Note:** The full resource name **should not** be used for cross-API\nreferences where the owning API is clear; it is only used if a field refers to\nresources in multiple APIs where ambiguity is possible.\n\n### Resource URIs\n\nThe full resource name is a schemeless URI, but slightly distinct from the full\nURIs we use to access a resource. The latter includes the protocol\n(HTTPS), the API version, and the specific [service endpoint](./0009.md#api-service-endpoint)\nto target:\n\n```\nhttps://library.googleapis.com/v1/publishers/123/books/les-miserables\nhttps://calendar.googleapis.com/v3/users/vhugo1802\n```\n\nThe version is not included in the full resource name because the full resource\nname is expected to persist from version to version. Even though the API\nsurface may change between major versions, multiple major versions of the same\nAPI are expected to use the same underlying data.\n\n**Note:** The correlation between the full resource name and the service's\nendpoint is by convention. In particular, one service is able to have multiple\nendpoints (example use cases include regionalization, MTLS, and private access),\nand the full resource name does not change between these.\n\n### Fields representing resource names\n\nWhen defining a resource, the first field **should** be the resource name,\nwhich **must** be of type `string` and **must** be called `name` for the\nresource name. The message **should** include a `google.api.resource`\nannotation declaring the type (see [AIP-123][] for more on this).\n\n```proto\n// A representation of a book in the library.\nmessage Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // The resource name of the book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // Other fields...\n}\n```\n\nWhen defining a method that retrieves or acts on an already-existing resource\n(such as `GetBook` or `ArchiveBook`), the first field of the request message\n**should** be the resource name, which **must** be of type `string` and\n**must** be called `name` for the resource name. The field **should** also be\nannotated with the `google.api.resource_reference` annotation, referencing the\nresource type ([AIP-123][]).\n\n```proto\n// Request message for ArchiveBook\nmessage ArchiveBookRequest {\n  // The book to archive.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n\n  // Other fields...\n}\n```\n\n**Note:** Fields **must not** be called `name` except for this purpose. For\nother use cases, either use a different term or prepend an adjective (for\nexample: `display_name`).\n\n[aip-123]: ./0123.md\n\n### Fields representing a resource's parent\n\nWhen defining a method that retrieves resources from a collection or adds a new\nresource to a collection (such as `ListBooks` or `CreateBook`), the first field\nof the request message **should** be of type `string` and **should** be called\n`parent` for the resource name of the collection. The `parent` field **should**\nalso be annotated with the `google.api.resource_reference` annotation,\nreferencing the parent's resource type ([AIP-123][]).\n\n```proto\n// Request message for ListBooks.\nmessage ListBooksRequest {\n  // The publisher to list books from.\n  // Format: publishers/{publisher_id}\n  string parent = 1 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Publisher\"\n  }];\n\n  // Other fields (e.g. page_size, page_token, filter, etc.)...\n}\n```\n\nIf there is more than one possible parent type, the `parent` field **should**\nbe annotated with the `child_type` key on `google.api.resource_reference`\ninstead:\n\n```proto\n// Request message for ListBooks.\nmessage ListBooksRequest {\n  // The parent to list books from.\n  // Format:\n  //   - publishers/{publisher_id}\n  //   - authors/{author_id}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // Other fields (e.g. page_size, page_token, filter, etc.)...\n}\n```\n\n**Note:** Fields **should not** be called `parent` except for this purpose. For\nother use cases, use a synonymous term if possible.\n\n### Fields representing another resource\n\nWhen a field represents another resource, the field **should** be of type\n`string` and accept the resource name of the other resource. The field name\n**should** be equivalent to the corresponding message's name in snake case.\n\n- Field names **may** include a leading adjective if appropriate (such as\n  `string dusty_book`).\n- Field names **should not** use the `_name` suffix unless the field would be\n  ambiguous without it (e.g., `crypto_key_name`)\n- Fields representing another resource **should** provide the\n  `google.api.resource_reference` annotation with the resource type being\n  referenced.\n- If using the resource name is not possible and using the ID component alone is\nstrictly necessary, the field **should** use an `_id` suffix (e.g. `shelf_id`).\n\nThe field **should not** be of type `message` using the `message` that\nimplements the resource, __except__ for one of following conditions:\n\n- The API is internal-only, has tight lifecycle relationships, and has a\n  permission model that enables inherited access to embedded resources.\n- The embedding of the resource is done as part of the AIP-162 revisions\n  pattern.\n\nExample of a resource reference:\n\n```proto\n// A representation of a book in a library.\nmessage Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // Name of the book.\n  // Format is `publishers/{publisher}/books/{book}`\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The shelf where the book currently sits.\n  // Format is `shelves/{shelf}`.\n  string shelf = 2 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Shelf\"\n  }];\n\n  // Other fields...\n}\n```\n\n## Further reading\n\n- For evolving resource names over time, see\n  [AIP-180](./0180.md#changing-resource-names).\n- For resource types, see [AIP-123][].\n\n## Rationale\n\n### Disallow embedding of resources\n\nUsing a resource message directly as the type of a field within another resource\nis problematic for a number of reasons, which are as follows:\n\n* Complicates the resource lifecycle: If the dependency resource is\n  deleted, what happens to the embedded reference in the dependent resource?\n  Data retention and clean up operations will be significantly complicated.\n* Bypasses permissions: If every resource has its own set of permissions, a user\n  with read permission on the dependent resource that doesn't have the same\n  permission on the dependency resource suddenly cannot see the full resource.\n* Tightly couples resources in all aspects: Changing the requirements in the\n  schema, permissions, or otherwise for either resource impacts the other,\n  significantly increasing complexity of roll outs.\n\nReferencing by name, as is recommended, eliminates all of this complexity by\npreventing resource data duplication, and forcing the owning service to be\ninvolved in the resolution of the reference (via Standard Methods), guaranteeing\nisolation of logical concerns per-resource.\n\n## Changelog\n\n- **2023-09-19**: Prohibit duplicate collection identifiers.\n- **2023-09-01**: Add a clause that allows embedding for revision resource\n  messages.\n- **2023-08-10**: Explicitly disallow embedding resource messages in a resource.\n- **2023-03-24**: Correction: full resource name contains the service name rather\n  than the service endpoint\n- **2023-03-17**: Add `OUTPUT_ONLY` guidance for resource ID fields.\n- **2020-10-06**: Added declarative-friendly guidance, and tightened character\n  set restrictions.\n- **2020-10-05**: Clarified when full resource names are used.\n- **2020-05-19**: Clarified that resource _IDs_ avoid capital characters, not\n  the entire resource _name_.\n- **2020-04-27**: Tighten the restriction on valid characters.\n- **2019-12-05**: Added guidance for resource annotations.\n- **2019-08-01**: Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership. Also changed the final\n  example from a Pub/Sub example to the usual Book example.\n- **2019-07-30**: Changed the nested collection brevity suggestion from \"may\"\n  to \"should\"\n"}