{"text": "---\nid: 194\nstate: approved\ncreated: 2019-08-16\nplacement:\n  category: polish\n  order: 40\n---\n\n# Automatic retry configuration\n\nRPCs sometimes fail. When one does, the client performing the RPC needs to know\nwhether it is safe to retry the operation. When status codes are used\nconsistently across multiple APIs, clients can respond to failures\nappropriately.\n\n## Guidance\n\nClients **should** automatically retry requests for which repeated runs would\nnot cause unintended state changes, which are non-transactional, and which are\n[unary](https://grpc.io/docs/guides/concepts/).\n\nClients **should not** automatically retry transactional requests; instead\nthese requests **should** have application-level retry logic that retries the\nentire transaction block from the start.\n\nClients **should not** automatically retry requests in which repeated runs\nwould cause unintended state changes.\n\n**Note:** This AIP does not cover client streaming or bi-directional streaming.\n\n**Note:** For client side retry behavior in the client libraries: see\n[AIP-4221](./client-libraries/4221.md).\n\n### Retryable codes\n\nFor methods listed as retryable above, clients **should** retry the following\nerror codes:\n\n- `UNAVAILABLE`: This code generally results from network hiccups, and is\n  generally transient. It is retryable under the expectation that the\n  connection will become available (soon).\n\n### Non-retryable codes\n\nThe following codes **should not** be automatically retried for any request:\n\n- `OK`: The request succeeded.\n- `CANCELLED`: An application can cancel a request, which **must** be honored.\n- `DEADLINE_EXCEEDED`: An application can set a deadline, which **must** be\n  honored.\n- `INVALID_ARGUMENT`: Retrying a request with an invalid argument will never\n  succeed.\n- `DATA_LOSS`: This is an unrecoverable error and **must** immediately be\n  surfaced to the application.\n\n### Generally non-retryable codes:\n\nThe following codes generally **should not** be automatically retried for any\nrequest:\n\n- `RESOURCE_EXHAUSTED`: This code may be a signal that quota is exhausted.\n  Retries therefore may not be expected to work for several hours; meanwhile\n  the retries may have billing implications. If `RESOURCE_EXHAUSTED` is used\n  for other reasons than quota and the expected time for the resource to become\n  available is much shorter, it may be retryable.\n- `INTERNAL`: This code generally means that some internal part of the system\n  has failed, and usually means a bug should be filed against the system. These\n  **should** immediately be surfaced to the application.\n- `UNKNOWN`: Unlike `INTERNAL`, this code is reserved for truly\n  unknown-to-the-system errors, and therefore may not be safe to retry. These\n  **should** immediately be surfaced to the application.\n- `ABORTED`: This code typically means that the request failed due to a\n  sequencer check failure or transaction abort. These **should not** be retried\n  for an individual request; they **should** be retried at a level higher (the\n  entire transaction, for example).\n\nSome codes **may** be automatically retried if a system is designed without\nsynchronization or signaling between various components. For example, client\nmight retry `NOT_FOUND` on a read operation, which is designed to hang forever\nuntil the resource is created. However, these types of systems are generally\ndiscouraged.\n\nTherefore, the following codes **should not** be automatically retried for any\nrequest:\n\n- `NOT_FOUND`: A client **should not** retry until a resource is created.\n- `ALREADY_EXISTS`: A client **should not** retry until a resource is deleted.\n- `PERMISSION_DENIED`: A client **should not** retry until it has permission.\n- `UNAUTHORIZED`: A client **should not** retry until it is authorized.\n- `UNAUTHENTICATED`: A client **should not** retry until it is authenticated.\n- `FAILED_PRECONDITION`: A client **should not** retry until system state\n  changes.\n- `OUT_OF_RANGE`: A client **should not** retry until the range is extended.\n- `UNIMPLEMENTED`: A client **should not** retry until the RPC is implemented.\n\n## Further reading\n\n- For parallel or retried request disambiguation, see [AIP-154](./0154.md).\n"}