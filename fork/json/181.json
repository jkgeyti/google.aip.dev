{"text": "---\nid: 181\nstate: approved\ncreated: 2019-02-18\nplacement:\n  category: compatibility\n  order: 20\n---\n\n# Stability levels\n\nWhile different organizations (both inside Google and outside) have different\nproduct life cycles, AIPs refer to the _stability_ of an API component using\nthe following terms.\n\n**Note:** These stability levels roughly correspond to the product launch\nstages (alpha, beta, GA) in Google Cloud, but are not identical. GCP imposes\nits own additional expectations and commitments on top of what is outlined\nhere.\n\n## Alpha\n\nAn _alpha_ component undergoes rapid iteration with a known set of users who\n**must** be tolerant of change. The number of users **should** be a\ncurated, manageable set, such that it is feasible to communicate with all\nof them individually.\n\nBreaking changes **must** be both allowed and expected in alpha components, and\nusers **must** have no expectation of stability.\n\n## Beta\n\nA _beta_ component **must** be considered complete and ready to be declared\nstable, subject to public testing. Beta components **should** be exposed to an\nunknown and potentially large set of users. In other words, beta components\n**should not** be behind an allowlist; instead, they **should** be available to\nthe public.\n\nBecause users of beta components tend to have a lower tolerance of change, beta\ncomponents **should** be as stable as possible; however, the beta component\n**must** be permitted to change over time. These changes **should** be minimal\nbut **may** include backwards-incompatible changes to beta components.\nBackwards-incompatible changes **must** be made only after a reasonable\ndeprecation period to provide users with an opportunity to migrate their code.\nThis deprecation period **must** be defined at the time of being marked beta.\n\nBeta components **should** be time-boxed and promoted to stable if no issues\nare found in the specified timeframe, which **should** be specified at the time\nof being marked beta. A reasonable time period **may** vary, but a good rule of\nthumb is 90 days.\n\n## Stable\n\nA _stable_ component **must** be fully-supported over the lifetime of the major\nAPI version. Because users expect such stability from components marked stable,\nthere **must** be no breaking changes to these components, subject to the\ncaveats described below.\n\n### Major versions\n\nWhen breaking changes become necessary, the API producer **should** create the\nnext major version of the API, and start a deprecation clock on the existing\nversion.\n\nTurn-down of any version containing stable components **must** have a formal\nprocess defined at the time of being marked stable. This process **must**\nspecify a deprecation period for users which provides them with reasonable\nadvance warning.\n\n### Isolated changes\n\nOn very rare occasions, it could be preferable to make a small, isolated\nbreaking change, if this will only cause inconvenience to a small subset of\nusers. (Creating a new major version is an inconvenience to all users.) In this\ncase, the API producer **may** deprecate the component, but **must** continue\nto support the component for the normal turndown period for a stable component.\n\n**Important:** Making an in-place breaking change in a stable API is considered\nan extreme course of action, and should be treated with equal or greater\ngravity as creating a new major version. For example, at Google, this requires\nthe approval of the API Governance team.\n\n### Emergency changes\n\nIn certain exceptional cases, such as security concerns or regulatory\nrequirements, any API component **may** be changed in a breaking manner\nregardless of its stability level, and a deprecation is not promised in these\nsituations.\n"}