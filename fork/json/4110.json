{"text": "---\nid: 4110\nscope: auth\nstate: approved\ncreated: 2018-06-24\nplacement:\n  category: auth\n  order: 10\njs_scripts:\n  - /assets/js/graphviz/viz.js\n  - /assets/js/graphviz/lite.render.js\n  - /assets/js/aip/aip-graphviz.js\n---\n\n# Application Default Credentials\n\nGoogle auth libraries use a strategy called _Application Default Credentials\n(ADC)_ to detect and select credentials based on environment or context. With\nADC, developers should be able to run the code in different environments and the\nsupporting systems fetch the appropriate credentials based on each environment\nin an effortless manner.\n\nAuth libraries following the standards in these AIPs are known as _\"Google\nUnified Auth Clients\"_, or _GUAC_ for short. The resulting libraries are\ncolloquially called _GUACs_.\n\n**Note:** Because this AIP describes guidance and requirements in a\nlanguage-neutral way, it uses generic terminology which may be imprecise or\ninappropriate in certain languages or environments.\n\n## Guidance\n\n### Credential Types\n\nThis section outlines the supported credential types of the ADC.\n\n- **Gcloud Credential**: A credential provided by the [Gcloud tool][0] that\nidentifies a human user that needs to authenticate to access Google APIs. The\nauth libraries **must** support this credential type.\n\n- **Service Account Key**: A credential that identifies a non-human user that\nneeds to authenticate to access Google APIs. The auth libraries **must** support\nthis credential type.\n\n- **OAuth Client ID**: A credential that identifies the client application which\nallows human users to sign-in through [3-legged OAuth flow][1], which grants the\npermissions to the application to access Google APIs on behalf of the human\nuser. The auth libraries **may** support this credential type.\n\n- **External Account Credential**: A configuration file identifying\n[external non-Google credentials][8] that can be exchanged for Google access\ntokens to access Google APIs. The auth libraries **must** support this\ncredential type.\n\n### Environment Variables\n\nThe auth libraries **must** support the following environment variables to allow\ndevelopers to provide authentication configuration for their application:\n\n- **GOOGLE_APPLICATION_CREDENTIALS**: The specified value will be used as the\nfull path for ADC to locate the credentials file. The credentials file\n**should** be one of the following types:\n\n  - Gcloud credentials\n  - Service account key\n  - External account credentials\n\n  The credentials **may** be the OAuth Client ID if it is supported by the\n  auth library. Credentials file path specified at the program level (e.g. via\n  client options) **must** have priority over the value of this environment\n  variable.\n\n- **GOOGLE_API_USE_CLIENT_CERTIFICATE:** The specified value **must** be\neither true or false. The client certificate **must** be ignored if this\nvariable is set to false. The default value is false if the value is unset.\n\n```\nGOOGLE_API_USE_CLIENT_CERTIFICATE=[true|false]\n```\n\n- **GOOGLE_CLOUD_QUOTA_PROJECT:** The quota project id to be set on the credential.\nThe value from the environment variable will override any quota project that is \npresent in the credential detected by the ADC mechanism.\n\n### Inputs & Outputs\n\nFrom the input/output perspective, the inputs of _ADC_ **should** be the\ncredentials as well as the underlying environment such as environment variables\nor metadata service that provides these credentials.\n\nFor example, the `GOOGLE_APPLICATION_CREDENTIALS` environment variable can provide\nthe default credential JSON as the input here, or the well-known path that\ngCloud uses to store the default user credential JSON. The output is the access\ntoken that application can use to access the Google APIs. This access token\n__may__ be a bearer token, a certificate-bound token, or an identity-bound token\ndepending on the chosen authentication flow.\n\n## Expected Behavior\n\nThis section outlines the expected behavior of the ADC. Auth libraries **must**\nimplement these concepts in order to be considered complete.\n\n```graphviz\ndigraph d_front_back {\n  rankdir=TB;\n  ranksep=0.3;\n  node [ style=\"filled,solid\" shape=box fontname=\"Roboto\" ];\n\n  check_env_var [ label=\"1. Check Environment Variables\" ];\n  load_credentials [ label=\"2. Load Credentials\" ];\n  check_metadata [ label=\"3. Check workload credentials\" ];\n  auth_flows [ label=\"4. Determine Auth Flows\" ];\n  execute [ label=\"5. Execute Auth Flows\" ];\n  post_processing [ label=\"6. Post Processing\" ];\n\n  check_env_var -> load_credentials -> check_metadata -> auth_flows -> execute -> post_processing;\n  load_credentials -> auth_flows;\n  check_metadata -> post_processing;\n}\n```\n\n1. **Check environment variables**\n  1. Check GOOGLE_APPLICATION_CREDENTIALS\n    1. If set, go to step (2.2)\n    1. If not set, go to step (2)\n1. **Load credentials**\n  1. Check [gcloud default credentials][5] through its default path\n    1. If found go to step (2.2)\n    1. Otherwise go to step (3)\n  1. Check the provided credential type\n    1. If the credential is gcloud credentials, go to step (4)\n    1. If the credential is [a service account key][6] JSON, go to step (4)\n    1. If the credential is [an external account][8] JSON, go to step (4)\n    1. If the credential is unknown type, return an error saying that _[END]_\n  1. Credentials not found _[END]_\n1. **Check workload credentials (on GCE, GKE, GAE and Serverless)**\n  1. If true,\n    1. If identity binding is enabled, by meeting the requirements in\n       [mTLS Token Binding][9], use the mTLS Token Binding flow to fetch an\n       identity-bound access token. Go to step(6).\n    1. If there is an issue when obtaining bound access tokens, return an error\n       indicating that _[END]_\n    1. If identity binding is not enabled, use the [virtual machine flow][3] to\n       fetch an auth token associated with the current environment\n      1. If target audience is provided by the developer, get an [identity token][7]. Go to step(6).\n      1. Otherwise, get an access token. Go to step(6).\n  1. If false, go to step (2.3)\n1. **Determine auth flows**\n  1. If the credential is gcloud credential go to step (5.3)\n  1. If target audience or scope is provided by the developer go to step (5.1)\n  1. If the credential is an external account go to step (5.4)\n  1. Otherwise, go to step (5.2)\n1. **Execute auth flows**\n  1. Use 2LO flow to exchange for an auth token\n    1. If target audience is provided by the developer, get an [identity token][7]. Go to step(6).\n    1. Otherwise, get an access token. Go to step(6).\n      1. If client certificate is presented, the exchanged token will be a certificate bind token. Go to step(6).\n  1. Use self-signed JWT flow to create an access token locally.\n    1. If certificate is presented, embed the certificate into the JWT.\n    1. Use the regular [self-signed JWT flow][4] for an access token. Go to step(6).\n  1. Use user identity flow to exchange for an access token. Go to step(6).\n  1. Use [external account][8] flow to exchange for an access token. Go to step(6).\n1. **Post Processing**\n  1. Update Quota Project\n    1. If a quota project is provided explicitly while initiating ADC, override the quota project in the credential with the explicit value. _[END]_\n    1. Else if the `GOOGLE_CLOUD_QUOTA_PROJECT` environment variable is set, override the quota project in the credential with this value. _[END]_\n\n## Changelog\n\n- **2019-08-13**: Add a link to virtual machine flow (AIP 4115).\n- **2019-08-18**: Remove STS support from ADC.\n- **2021-01-20**: Add identity token flow (AIP 4116).\n- **2021-06-29**: Guidance for GOOGLE_API_KEY temporarily removed until consensus can be established.\n- **2021-12-10**: Add external account credentials (AIP 4117).\n- **2023-01-23**: Add Quota Project Environment variable.\n\n\n<!-- prettier-ignore-start -->\n[0]: https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login\n[1]: https://developers.google.com/identity/protocols/oauth2/native-app\n[3]: ./4115\n[4]: ./4111\n[5]: ./4113\n[6]: ./4112\n[7]: ./4116\n[8]: ./4117\n[9]: ./4119\n<!-- prettier-ignore-end -->\n"}