{"text": "---\nid: 3260\nscope: firebase\nstate: draft\ncreated: 2020-06-10\n---\n\n# Firebase CLI\n\n## Guidance\n\n### Command Naming\n\nCommands **must** be named in lowercase using colons to separate namespaces.\nThe final segment of a command **should** be an action verb, for example\n`list`, `deploy`, or `clone`. A \"get\" of a single resource **may** omit the\naction for the sake of brevity (e.g. `apps:sdkconfig` instead of\n`apps:sdkconfig:get`).\n\n### Project Selection\n\nThe Firebase CLI works with \"project directories\" that can be associated with\none or more Firebase projects via the `use` command. This ambient project\nselection can be overridden by passing the `-P` or `--project` flag.\n\nAll Firebase CLI commands **must** determine the intended project for a command\nbased on common project selection, except when a command involves multiple\nprojects (e.g. a command that clones configuration from one project to\nanother).\n\n### JSON Output\n\nAll Firebase CLI commands support machine-readable output via the `--json`\nflag. If a command correlates to a single API call, the unmodified response of\nthat API call should be provided as the JSON response (with wrapped CLI\nmetadata).\n\nIf a command does not directly correlate to an API call, the output **should**\ninclude all information a user might reasonably need for programmatic\ninterpretation of the command. Output **must** be formatted in snake-case and\ngenerally conform to all standard Google API guidance (e.g. [field\nnames][aip-140]).\n\n### Arguments and Flags\n\nRequired inputs for a command **must** be represented as arguments (e.g.\n`database:get /path`) unless doing so would be confusing to the user. For\ninstance, `appdistribution:distribute` requires as input both a file to\ndistribute and an App ID, so `--app <appId>` as a required flag is more clear\nthan two unrelated arguments with no clear hierarchy.\n\nFlags **must** be named using kebab case (e.g. `--example-flag`) and **may**\nprovide a single-letter alias that does not conflict with [defined global\nflags][global-flags].\n\n#### Common Flags\n\n- `--app <appId>` - used to refer to a specific app within a Firebase project.\n- `--force` - used to indicate that a command should proceed without additional\n  prompting regarding potentially destructive actions. For example, deploying\n  Cloud Functions with `--force` will automatically delete functions, while\n  without the user is prompted.\n- `-o, --output <path>` - this flag **may** be used to allow convenient output\n  of a serialized response to a local file. If the output is JSON, it **must**\n  output equivalent JSON to `--json` without wrapped CLI metadata. If the\n  command fetches a deployable resource, it **must** fetch it in a\n  deploy-compatible format. The string path **may** be optional if a clear\n  default path exists. If a file already exists at the path, a confirmation\n  prompt **must** be displayed unless a `--force` flag is also provided.\n\n### Common Command Types\n\n#### List Commands\n\nCommands that return a list of like resources **must** use a `:list` suffix\n(e.g. `projects:list`).\n\nList commands **must not** require manual pagination (e.g. a `--page-token`\nflag) and will generally fetch all results (via multiple API calls if\nnecessary). List commands **may** include a `--limit <int>` flag when a\nnatural ordering exists, such as a reverse chronological list of releases.\nA `--limit 0` flag indicates that all results should be fetched and\nreturned.\n\nThe JSON output of a list command **must** be a concatenated array of all\nfetched resources in their original wire format.\n\n#### Clone Commands\n\nIf a command's purpose is to copy information from one resource to another, it\n**must** be suffixed with `:clone` and **must** take a `from` and `to`\nargument:\n\n    firebase example:clone <fromProject> <toProject>\n\nTo avoid confusion and accidental misuse, clone commands **must** explicitly\nrequire both arguments and **must not** rely on project selection to populate\neither.\n\nIf a clone operation is destructive (replaces existing state), the command\n**should** prompt the user for confirmation before proceeding. If a prompt is\nadded, the command **must** allow a `--force` flag to bypass the prompt.\n\n### Deployment\n\nBehavior that takes local state (e.g. a rules file) and applies it to the live\noperation of a Firebase project **must** integrate with the `deploy` command.\n\n#### Scoped Deployments\n\nIf a service has multiple deployable resources, it **may** allow specifying\nwhich resources are deployed through colon namespacing, for example:\n\n    firebase deploy --only functions:func1,functions:func2,hosting:site3\n\nColon namespacing **may** be used to identify one of many like resources (as\nwith functions above) or to identify specific resource type (e.g.\n`firestore:indexes` vs. `firestore:rules`).\n\nIf the service integrates with [deploy targets][deploy-targets], the targets\n**must** be addressable via colon namespacing.\n\n<!-- prettier-ignore-start -->\n[global-flags]: https://github.com/firebase/firebase-tools/blob/master/src/index.js\n[deploy-targets]: https://firebase.google.com/docs/cli/targets\n[aip-140]: ../0140.md\n<!-- prettier-ignore-end -->\n"}