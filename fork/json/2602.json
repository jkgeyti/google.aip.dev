{"text": "---\nid: 2602\nstate: approved\ncreated: 2019-06-12\nplacement:\n  category: sdk\n---\n\n# Parameter-dependent arguments\n\nWhen designing CLI commands, a common scenario is that a command corresponding\nto some conceptual action may take different, largely non-overlapping arguments\ndepending on the value of a particular parameter.\n\nFor instance, suppose we're designing a new gcloud surface for managing images,\nand we need a command that formats an image as JPEG, GIF, or PNG. Regardless of\nthe image format, the command will need arguments for the source and\ndestination files, but otherwise depending on the format, an entirely different\nset of options will apply. JPEG, for example, might take arguments for\nsmoothing, subsampling, and DCT method, which are only relevant for JPEG\nimages. GIF, on the other hand, might take arguments for controlling animated\ngifs e.g. whether to loop forever, and a delay time in between frames. Finally,\nPNG might take arguments for color type and bits per channel.\n\n## Guidance\n\nWhen the parameter-specific arguments are numerous relative to the other\narguments, create a command group for the action, with separate subcommands\nnamed after each of the parameter values. In the example above, we would thus\ncreate a `gcloud images format` command group, with subcommands called `jpeg`,\n`gif`, and `png`. These subcommands can then take their own format-specific\nflags.\n\nExample usage:\n\n```\n$ gcloud images format jpeg --help\n\n$ gcloud images format jpeg --source-file=foo --destination-file=bar \\\n    --dct-method=integer --smoothing=0.1 --subsampling=4:4:4\n\n$ gcloud images format png --source-file=foo --destination-file=bar \\\n    --color-type=0 --bits-per-channel=16\n\n$ gcloud images format gif --source-file=foo --destination-file=bar \\\n    --loop-forever --frame-delay=1ms\n```\n\nIt's possible that over time more and more arguments are added that are common\nto all parameters. In that case, it may make sense to instead use a single\ncommand that takes an argument for the parameter. This can be done without\nbreaking backward compatibility by making the parameter a positional argument.\nIn the example above, this would involve changing `format` from a command group\nto a command, and having it take a positional image format argument which can\nbe one of: `jpeg`, `gif`, or `png`. Note that all the example commands above\nwould still function identically (except for the first one, but since it only\naffects help text it's not considered a breaking change.)\n\n## Alternatives considered\n\nThere are several other possibilities for the design of such a command,\noutlined below:\n\n### Single command with an explicit flag corresponding to the parameter\n\nIn the example, this would involve a `--type` flag to specify the image format:\n\n```\n$ gcloud images format --source-file=source --destination-file=dest \\\n    --type=JPEG --dct-method=integer --smoothing=0.1 --subsampling=4:4:4\n\n$ gcloud images format --source-file=source --destination-file=dest \\\n    --type=GIF --loop-forever --frame-delay=1ms\n\n$ gcloud images format --source-file=source --destination-file=dest \\\n    --type=PNG --color-type=0 --bits-per-channel=16\n```\n\nConceptually it makes the most sense to just have a single format command.\nHowever, this approach has several drawbacks:\n\n- Unnecessary help text. The user will see all of the format-specific options,\n  most of which will be irrelevant since they apply to different formats. In\n  graphical image editing programs such as Photoshop or GIMP, the UI can\n  selectively show these format-specific options once the user chooses the\n  desired format from a dropdown. On the CLI, however, we have no such\n  capability because the help text is statically generated.\n- Additional logic needed for validation. Since some arguments will be invalid\n  depending on the format, the command author needs to ensure specifying\n  invalid combinations returns an appropriate error. While this can be\n  accomplished with appropriately nested mutex groups, the nesting has the\n  potential to become overly deep and complex.\n\n### Multiple commands named after the action hyphenated with the parameter value\n\nIn the example, this would look like:\n\n```\n$ gcloud images format-jpeg ...\n$ gcloud images format-gif ...\n$ gcloud images format-png ...\n```\n\nThis is similar to the recommended design in that each parameter value gets its\nown command. However, there are disadvantages:\n\n- Backward compatibility. If in the future it becomes desirable to make the\n  parameter value an argument to a single command, this would necessitate a\n  breaking change.\n- It's less elegant from a command tree layout perspective. Grouping the\n  parameter-specific commands into a command group allows for a natural\n  decomposition of the command space, in keeping with gcloud's CLI design\n  philosophy, and allows for\n  [progressive disclosure](https://en.wikipedia.org/wiki/Progressive_disclosure)\n  in the help text and in autocompletion.\n"}