{"text":"---\nid: 200\nstate: approved\ncreated: 2018-06-28\nplacement:\n  category: meta\n  order: 30\nredirect_from: /not-precedent\n---\n\n# Precedent\n\nMany times, APIs are written in ways that do not match new guidance that is\nadded to these standards after those APIs have already been released.\nAdditionally, sometimes it can make sense to intentionally violate standards\nfor particular reasons, such as maintaining consistency with established\nsystems, meeting stringent performance requirements, or other practical\nconcerns. Finally, as carefully as everyone reviews APIs before they are\nreleased, sometimes mistakes can slip through.\n\nSince it often is not feasible to fix past mistakes or make the standards serve\nevery use case, APIs may be stuck with these exceptions for quite some time.\nFurther, since new APIs often base their designs (names, types, structures,\netc) on existing APIs, it is possible that a standards violation in one API\ncould spill over into other APIs, even if original reason for the exception is\nnot applicable to the other APIs.\n\nAs a result of this problem, it is important to \"stop the bleeding\" of these\nstandards exceptions into new APIs, and additionally document the reasons for\neach exception so that historical wisdom is not lost.\n\n## Guidance\n\nIf an API violates the AIP standards for any reason, there **must** be an\ninternal comment linking to this document using its descriptive link\n([aip.dev/not-precedent]()) to ensure others do not copy the violations or cite\nthe errors as precedent of a \"previously approved API\".\n\nThe comment should also include an explanation of what violates standards and\nwhy it is necessary. For example:\n\n```proto\nmessage DailyMaintenanceWindow {\n  // Time within the maintenance window to start the maintenance operations.\n  // It must use the format \"HH MM\", where HH : [00-23] and MM : [00-59] GMT.\n  // (-- aip.dev/not-precedent: This was designed for consistency with crontab,\n  //     and preceded the AIP standards.\n  //     Ordinarily, this type should be `google.type.TimeOfDay`. --)\n  string start_time = 2;\n\n  // Output only. Duration of the time window, automatically chosen to be\n  // smallest possible in the given scenario.\n  // (-- aip.dev/not-precedent: This preceded the AIP standards.\n  //     Ordinarily, this type should be `google.protobuf.Duration`. --)\n  string duration = 3;\n}\n```\n\n**Important:** APIs should only be considered to be precedent-setting if they\nare in beta or GA.\n\n### Local consistency\n\nIf an API violates a standard throughout, it would be jarring and frustrating\nto users to break the existing pattern only for the sake of adhering to the\nglobal standard.\n\nFor example, if all of an API's resources use `creation_time` (instead of the\nstandard field `create_time` described in [AIP-142][]), a new resource in that\nAPI should continue to follow the local pattern.\n\nHowever, others who might otherwise copy that API should be made aware that\nthis is contra-standard and not something to cite as precedent when launching\nnew APIs.\n\n```proto\n// ...\nmessage Book {\n  // (-- aip.dev/not-precedent: This field was present before there was a\n  //     standard field.\n  //     Ordinarily, it should be spelled `create_time`. --)\n  google.protobuf.Timestamp creation_time = 1;\n}\n\n// ...\nmessage Author {\n  // (-- aip.dev/not-precedent: `Book` had `creation_time` before there was\n  //     a standard field, so we match that here for consistency. Ordinarily,\n  //     this would be spelled `create_time`. --)\n  google.protobuf.Timestamp creation_time = 1;\n}\n```\n\n### Pre-existing functionality\n\nStandards violations are sometimes overlooked before launching, resulting in\nAPIs that become stable and therefore can not easily be modified. Additionally,\na stable API may pre-date a standards requirement.\n\nIn these scenarios, it is difficult to make the API fit the standard. However,\nthe API should still cite that the functionality is contra-standard so that\nother APIs do not copy the mistake and cite the existing API as a reason why\ntheir design should be approved.\n\n### Adherence to external spec\n\nOccasionally, APIs must violate standards because specific requests are\nimplementations of an external specification (for example, OAuth), and their\nspecification may be at odds with AIP guidelines. In this case, it is likely to\nbe appropriate to follow the external specification.\n\n### Adherence to existing systems\n\nSimilar to the example of an external specification above, it may be proper for\nan API to violate AIP guidelines to fit in with an existing system in some way.\nThis is a fundamentally similar case where it is wise to meet the customer\nwhere they are. A potential example of this might be integration with or\nsimilarity to a partner API.\n\n### Expediency\n\nSometimes there are users who need an API surface by a very hard deadline or\nmoney walks away. Since most APIs serve a business purpose, there will be times\nwhen an API could be better but cannot get it that way and into users' hands\nbefore the deadline. In those cases, API review councils **may** grant\nexceptions to ship APIs that violate guidelines due to time and business\nconstraints.\n\n### Technical concerns\n\nInternal systems sometimes have very specific implementation needs (e.g., they\nrely on operation transforms that speak UTF-16, not UTF-8) and adhering to AIP\nguidelines would require extra work that does not add significant value to API\nconsumers. Future systems which are likely to expose an API at some point\nshould bear this in mind to avoid building underlying infrastructure which\nmakes it difficult to follow AIP guidelines.\n\n## Changelog\n\n- **2020-03-27**: Reworded much of this AIP to follow [AIP-8][], and remove\n  first and second person. No semantic changes.\n- **2019-05-04**: Changed to a public link ([aip.dev/not-precedent]()), and\n  changed references to \"the style guide\" to use the more generic term\n  \"standards\" (to account for a general shift to AIPs).\n\n[aip-8]: ./0008.md\n[aip-142]: ./0142.md\n"}
