{"text":"---\nid: 151\nstate: approved\ncreated: 2019-07-25\nplacement:\n  category: operations\n  order: 110\n---\n\n# Long-running operations\n\nOccasionally, an API may need to expose a method that takes a significant\namount of time to complete. In these situations, it is often a poor user\nexperience to simply block while the task runs; rather, it is better to return\nsome kind of promise to the user and allow the user to check back in later.\n\nThe long-running operations pattern is roughly analogous to a [Python\nFuture][], or a [Node.js Promise][]. Essentially, the user is given a token\nthat can be used to track progress and retrieve the result.\n\n## Guidance\n\nIndividual API methods that might take a significant amount of time to complete\n**should** return a [`google.longrunning.Operation`][lro] object instead of the\nultimate response message.\n\n```proto\n// Create a book.\nrpc CreateBook(CreateBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"Book\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n```\n\n- The response type **must** be `google.longrunning.Operation`. The `Operation`\n  proto definition **must not** be copied into individual APIs.\n  - The response **must not** be a streaming response.\n- The method **must** include a `google.longrunning.operation_info` annotation,\n  which **must** define both response and metadata types.\n  - The response and metadata types **must** be defined in the file where the\n    RPC appears, or a file imported by that file.\n  - If the response and metadata types are defined in another package, the\n    fully-qualified message name **must** be used.\n  - The response type **should not** be `google.protobuf.Empty` (except for\n    [`Delete`][aip-135] methods), unless it is certain that response data will\n    _never_ be needed. If response data might be added in the future, define an\n    empty message for the RPC response and use that.\n  - The metadata type is used to provide information such as progress, partial\n    failures, and similar information on each `GetOperation` call. The metadata\n    type **should not** be `google.protobuf.Empty`, unless it is certain that\n    metadata will _never_ be needed. If metadata might be added in the future,\n    define an empty message for the RPC metadata and use that.\n- APIs with messages that return `Operation` **must** implement the\n  [`Operations`][lro] service. Individual APIs **must not** define their own\n  interfaces for long-running operations to avoid non-uniformity.\n\n**Note:** User expectations can vary on what is considered \"a significant\namount of time\" depending on what work is being done. A good rule of thumb is\n10 seconds.\n\n### Standard methods\n\nAPIs **may** return an `Operation` from the [`Create`][aip-133],\n[`Update`][aip-134], or [`Delete`][aip-135] standard methods if appropriate. In\nthis case, the response type in the `operation_info` annotation **must** be the\nstandard and expected response type for that standard method.\n\nWhen creating or deleting a resource with a long-running operation, the\nresource **should** be included in [`List`][aip-132] and [`Get`][aip-131]\ncalls; however, the resource **should** indicate that it is not usable,\ngenerally with a [state enum][aip-216].\n\n### Parallel operations\n\nA resource **may** accept multiple operations that will work on it in parallel,\nbut is not obligated to do so:\n\n- Resources that accept multiple parallel operations **may** place them in a\n  queue rather than work on the operations simultaneously.\n- Resources that do not permit multiple operations in parallel (denying any\n  new operation until the one that is in progress finishes) **must** return\n  `ABORTED` if a user attempts a parallel operation, and include an error\n  message explaining the situation.\n- Resources with [declarative-friendly APIs][aip-128] **may** allow subsequent\n  updates to preempt existing operations. In this case, the latest update\n  begins processing and previous operations are marked as `ABORTED` with an\n  error message explaining the situation.\n\n### Expiration\n\nAPIs **may** allow their operation resources to expire after sufficient time\nhas elapsed after the operation completed.\n\n**Note:** A good rule of thumb for operation expiry is 30 days.\n\n### Errors\n\nErrors that prevent a long-running operation from _starting_ **must** return an\nerror response ([AIP-193][]), similar to any other method.\n\nErrors that occur over the course of an operation **may** be placed in the\nmetadata message. The errors themselves **must** still be represented with a\n[google.rpc.Status][] object.\n\n### Backwards compatibility\n\nChanging either the `response_type` or `metadata_type` of a long-running operation\nis a breaking change.\n\n<!-- prettier-ignore-start -->\n[aip-128]: ./0128.md\n[aip-131]: ./0131.md\n[aip-132]: ./0132.md\n[aip-133]: ./0133.md\n[aip-134]: ./0134.md\n[aip-135]: ./0135.md\n[aip-193]: ./0193.md\n[aip-216]: ./0216.md\n[google.rpc.Status]: https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto\n[lro]: https://github.com/googleapis/googleapis/blob/master/google/longrunning/operations.proto\n[node.js promise]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\n[python future]: https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future\n<!-- prettier-ignore-end -->\n\n## Changelog\n\n- **2022-06-??**: Added compatibility section\n- **2020-08-24**: Clarified that responses are not streaming responses.\n- **2020-06-24**: Added guidance for parallel operations.\n- **2020-03-20**: Clarified that both `response_type` and `metadata_type` are\n  required.\n- **2019-11-22**: Added a short explanation of what `metadata_type` is for.\n- **2019-09-23**: Added guidance on errors.\n- **2019-08-23**: Added guidance about fully-qualified message names when the\n  message name is in another package.\n- **2019-08-01**: Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership.\n"}
