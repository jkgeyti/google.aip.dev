{"text":"---\nid: 156\nstate: approved\ncreated: 2019-05-12\nplacement:\n  category: resource-design\n  order: 70\n---\n\n# Singleton resources\n\nAPIs sometimes need to represent a resource where exactly one instance of the\nresource always exists within any given parent. A common use case for this is\nfor a config object.\n\n## Guidance\n\nAn API **may** define _singleton resources_. A singleton resource **must**\nalways exist by virtue of the existence of its parent, with one and exactly one\nper parent.\n\nFor example:\n\n```proto\nmessage Config {\n  option (google.api.resource) = {\n    type: \"api.googleapis.com/Config\"\n    pattern: \"users/{user}/config\"\n  };\n\n  // additional fields including name\n}\n```\n\nThe `Config` singleton would have the following RPCs:\n\n```proto\nrpc GetConfig(GetConfigRequest) returns (Config) {\n  option (google.api.http) = {\n    get: \"/v1/{name=users/*/config}\"\n  };\n}\n\nrpc UpdateConfig(UpdateConfigRequest) returns (Config) {\n  option (google.api.http) = {\n    patch: \"/v1/{config.name=users/*/config}\"\n    body: \"config\"\n  };\n}\n```\n\n- Singleton resources **must not** have a user-provided or system-generated ID;\n  their [resource name][aip-122] includes the name of their parent followed by\n  one static-segment.\n  - Example: `users/1234/config`\n- Singleton resources are always singular.\n  - Example: `users/1234/thing`\n- Singleton resources **may** parent other resources.\n- Singleton resources **must not** define the [`Create`][aip-133] or\n  [`Delete`][aip-135] standard methods. The singleton is implicitly created or\n  deleted when its parent is created or deleted.\n- Singleton resources **should** define the [`Get`][aip-131] and\n  [`Update`][aip-134] methods, and **may** define custom methods as\n  appropriate.\n  - However, singleton resources **must not** define the [`Update`][aip-134]\n    method if all fields on the resource are [output only][aip-203].\n- Singleton resources **may** define the [`List`][aip-132] method, but **must**\n  implement it according to [AIP-159][aip-159]. See the example below.\n  - The trailing segment in the path pattern that typically represents the\n    collection **should** be the `plural` form of the Singleton resource e.g.\n    `/v1/{parent=users/*}/configs`.\n  - If a parent resource ID is provided instead of the hyphen `-` as per\n    AIP-159, then the service **should** return a collection of one Singleton\n    resource corresponding to the specified parent resource.\n\n```proto\nrpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse) {\n  option (google.api.http) = {\n    get: \"/v1/{parent=users/*}/configs\"\n  };\n}\n\nmessage ListConfigsRequest {\n  // To list all configs, use `-` as the user id.\n  // Formats:\n  // * `users/-`\n  // * `users/{user}`\n  //\n  // Note: Specifying an actual user id will return a collection of one config.\n  // Use GetConfig instead.\n  string parent = 1 [\n    (google.api.resource_reference).child_type = \"api.googleapis.com/Config\"];\n\n  // other standard pagination fields...\n}\n```\n## Rationale\n\n### Support for Standard List\n\nWhile Singleton resources are not directly part of a collection themselves, they\ncan be viewed as part of their parent's collection. The one-to-one relationship\nof parent-to-singleton means that for every one parent there is one singleton\ninstance, naturally enabling some collection-based methods when combined with\nthe pattern of [Reading Across Collections][aip-159]. The Singleton can present\nas a collection to the API consumer as it is indirectly one based on its parent.\nFurthermore, presenting the Singleton resource as a pseudo-collection in such\nmethods enables future expansion to a real collection, should a Singleton be\nfound lacking.\n\n## Changelog\n\n- **2023-08-10:** Add Standard `List` support.\n- **2023-07-26:** Clarified that read-only singletons should not have `Update`.\n- **2021-11-02:** Added an example message and state parent eligibility.\n- **2021-01-14:** Changed example from `settings` to `config` for clarity.\n\n[aip-122]: ./0122.md\n[aip-131]: ./0131.md\n[aip-132]: ./0132.md\n[aip-133]: ./0133.md\n[aip-134]: ./0134.md\n[aip-135]: ./0135.md\n[aip-159]: ./0159.md\n[aip-203]: ./0203.md#output-only\n"}
