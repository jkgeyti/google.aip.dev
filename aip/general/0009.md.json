{"text":"---\nid: 9\nstate: approved\ncreated: 2019-08-01\nplacement:\n  category: meta\n  order: 100\n---\n\n# Glossary\n\nIn the name of brevity, this AIP defines some common terminology here rather\nthan in each AIP individually.\n\n## Guidance\n\nThe following terminology **should** be used consistently throughout AIPs.\n\n### API\n\nApplication Programming Interface. This can be a local interface (such as a\nclient library) or a Network API (defined below).\n\n### API Backend\n\nA set of servers and related infrastructure that implements the business logic\nfor an API Service. An individual API backend server is often called an API\nserver.\n\n### API Consumer\n\nThe entity that consumes an API Service. For Google APIs, it typically is a\nGoogle project that owns the client application or the server resource.\n\n### API Definition\n\nThe definition of an API, usually defined in a Protocol Buffer service. An API\nDefinition can be implemented by any number of API Services.\n\n### API Frontend\n\nA set of servers plus related infrastructure that provides common functionality\nacross API Services, such as load balancing and authentication. An individual\nAPI frontend server is often called an API proxy.\n\n**Note:** the API frontend and the API backend may run next to each other or far\naway from each other. In some cases, they can be compiled into a single\napplication binary and run inside a single process.\n\n### API Method\n\nAn individual operation within an API. It is typically represented in Protocol\nBuffers by an `rpc` definition, and is mapped to a function in the API in most\nprogramming languages.\n\n### API Producer\n\nThe entity that produces an API Service. For Google APIs, it typically is a\nGoogle team responsible for the API Service.\n\n### API Product\n\nAn API Service and its related components, such as Terms of Service,\ndocumentation, client libraries, and service support, are collectively presented\nto customers as a API Product. For example, Google Calendar API.\n\n**Note:** people sometimes refer to an API Product simply as an API.\n\n### API Service\n\nA deployed implementation of one or more APIs, exposed on one or more network\naddresses, such as the Cloud Pub/Sub API.\n\n### API Service Definition\n\nThe combination of API Definitions (`.proto` files) and API Service\nconfigurations (`.yaml` files) used to define an API Service. The schema for\nGoogle API Service Definition is `google.api.Service`.\n\n### API Service Endpoint\n\nRefers to a network address that an API Service uses to handle incoming API\nRequests. One API Service may have multiple API Service Endpoints, such as\n`https://pubsub.googleapis.com` and `https://content-pubsub.googleapis.com`.\n\n### API Service Name\n\nRefers to the logical identifier of an API Service. Google APIs use RFC 1035 DNS\ncompatible names as their API Service Names, such as `pubsub.googleapis.com`.\n\n### API Request\n\nA single invocation of an API Method. It is often used as the unit for billing,\nlogging, monitoring, and rate limiting.\n\n### API Version\n\nThe version of an API or a group of APIs if they are defined together. An API\nVersion is often represented by a string, such as \"v1\", and presents in API\nrequests and Protocol Buffers package names.\n\n### Client\n\nClients are programs that perform a specific tasks by calling an API or generic\ntools, such as CLIs, that expose the API in a user-accessible fashion or operate\non resource data at rest.\n\nExamples of clients include the following:\n\n- Command line interfaces\n- Libraries, such as an SDK for a particular programming language\n- Scripts that operates on a JSON representation of a resource after reading it\n  from an API\n- Tools, such as a [Declarative client][]\n- Visual UIs, such as a web application\n\n### Google API\n\nA Network API exposed by a Google service. Most of these are hosted on the\n`googleapis.com` domain. It does not include other types of APIs, such as client\nlibraries and SDKs.\n\n### Declarative Clients\n\nDeclarative Clients, also known as Infrastructure as Code (IaC), describes a\ncategory of clients that consumes a markup language or code that represents\nresources exposed by an API, and executes the appropriate imperative actions to\ndrive the resource to that desired state. To determine what changes to make and\nif a set of updates was successful a declarative client compares server side\nresource attributes with client defined values. The comparison feature ensures\naccuracy of a creation or an update but it requires services to treat the client\nset fields as read-only and diligently preserve those values.\n\nExamples of complexities that declarative clients abstract away include:\n\n- Determining the appropriate imperative action (create / update / delete) to\n  achieve desired state.\n- Ordering of these imperative actions.\n\n[Terraform][] is an example of such a client.\n\n### User\n\nA human being which is using an API directly, such as with cURL. This term is\ndefined to differentiate usage in the AIPs between a human *user* and a\nprogrammatic *client*.\n\n### Network API\n\nAn API that operates across a network of computers. Network APIs communicate\nusing network protocols including HTTP, and are frequently produced by\norganizations separate from those that consume them.\n\n[Declarative clients]: #declarative-clients\n[Terraform]: https://www.terraform.io/\n\n## Changelog\n\n- **2023-07-24**: Rename IaC to Declarative Clients\n- **2023-04-01**: Adding definition of IaC\n- **2023-03-24**: Reformatting content to include anchor links."}
