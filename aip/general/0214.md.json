{"text":"---\nid: 214\nstate: approved\ncreated: 2018-06-19\nplacement:\n  category: design-patterns\n  order: 120\n---\n\n# Resource expiration\n\nCustomers often want to provide the time that a given resource or resource\nattribute is no longer useful or valid (e.g. a rotating security key). Currently\nwe recommend that customers do this by specifying an exact \"expiration time\"\ninto a `google.protobuf.Timestamp expire_time` field; however, this adds\nadditional strain on the user when they want to specify a relative time offset\nuntil expiration rather than a specific time until expiration.\n\nFurthermore, the world understands the concept of a \"time-to-live\", often\nabbreviated to TTL, but the typical format of this field (an integer, measured\nin seconds) results in a sub-par experience when using an auto-generated client\nlibrary.\n\n## Guidance\n\n1.  APIs wishing to convey an expiration **must** rely on a\n    [`google.protobuf.Timestamp`][timestamp] field called `expire_time`.\n2.  APIs wishing to allow a relative expiration time must define a `oneof`\n    called `expiration` (or `{something}_expiration`) containing both the\n    `expire_time` field and a separate [`google.protobuf.Duration`][duration]\n    field called `ttl`, the latter marked as input only.\n3.  APIs **must** always return the expiration time in the `expire_time` field\n    and leave the `ttl` field blank when retrieving the resource.\n4.  APIs that rely on the specific semantics of a \"time to live\" (e.g., DNS\n    which must represent the TTL as an integer) **may** use an `int64 ttl`\n    field (and **should** provide an [aip.dev/not-precedent](./0200.md) comment\n    in this case).\n\n### Example\n\n```proto\nmessage ExpiringResource {\n  // google.api.resource and other annotations and fields\n\n  oneof expiration {\n    // Timestamp in UTC of when this resource is considered expired.\n    // This is *always* provided on output, regardless of what was sent\n    // on input.\n    google.protobuf.Timestamp expire_time = 2;\n\n    // Input only. The TTL for this resource.\n    google.protobuf.Duration ttl = 3 [(google.api.field_behavior) = INPUT_ONLY];\n  }\n}\n```\n\n## Rationale\n\n### Alternatives considered\n\n#### A new standard field called `ttl`\n\nWe considered allowing a standard field called `ttl` as an alternative way of\ndefining the expiration, however doing so would require that API services\ncontinually update the field, like a clock counting down. This could\npotentially cause problems with the read-modify-write lifecycle where a\nresource is being processed for some time, and effectively has its life\nextended as a result of that processing time.\n\n#### Always use `expire_time`\n\nThis is the current state of the world with a few exceptions. In this scenario,\nwe could potentially push the computation of `now + ttl = expire_time` into\nclient libraries; however, this leads to a somewhat frustrating experience in\nthe command-line and using REST/JSON. Leaving things as they are is typically\nthe default, but it seems many customers want the ability to define relative\nexpiration times as it is quite a bit easier and removes questions of time\nzones, stale clocks, and other silly mistakes.\n\n<!-- prettier-ignore-start -->\n[duration]: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/duration.proto\n[timestamp]: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/timestamp.proto\n<!-- prettier-ignore-end -->\n"}
