{"text":"---\nid: 164\nstate: approved\ncreated: 2020-10-06\nplacement:\n  category: design-patterns\n  order: 95\n---\n\n# Soft delete\n\nThere are several reasons why a client could desire soft delete and undelete\nfunctionality, but one over-arching reason stands out: recovery from mistakes.\nA service that supports undelete makes it possible for users to recover\nresources that were deleted by accident.\n\n## Guidance\n\nAPIs **may** support the ability to \"undelete\", to allow for situations where\nusers mistakenly delete resources and need the ability to recover.\n\nIf a resource needs to support undelete, the `Delete` method **must** simply\nmark the resource as having been deleted, but not completely remove it from the\nsystem. If the method behaves this way, it **should** return the updated\nresource instead of `google.protobuf.Empty`.\n\nResources that support soft delete **should** have a `purge_time` field as\ndescribed in AIP-148. Additionally, resources **should** include a `DELETED`\nstate value if the resource includes a `state` field (AIP-216).\n\n### Undelete\n\nA resource that supports soft delete **should** provide an `Undelete` method:\n\n```proto\nrpc UndeleteBook(UndeleteBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*}:undelete\"\n    body: \"*\"\n  };\n}\n```\n\n- The HTTP verb **must** be `POST`.\n- The `body` clause **must** be `\"*\"`.\n- The response message **must** be the resource itself. There is no\n  `UndeleteBookResponse`.\n  - The response **should** include the fully-populated resource unless it is\n    infeasible to do so.\n  - If the undelete RPC is [long-running](#long-running-undelete), the response\n    message **must** be a `google.longrunning.Operation` which resolves to the\n    resource itself.\n\n### Undelete request message\n\nUndelete methods implement a common request message pattern:\n\n```proto\nmessage UndeleteBookRequest {\n  // The name of the deleted book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference).type = \"library.googleapis.com/Book\"];\n}\n```\n\n- A `name` field **must** be included. It **should** be called `name`.\n  - The field **should** be [annotated as required][aip-203].\n  - The field **should** identify the [resource type][aip-123] that it\n    references.\n  - The comment for the field **should** document the resource pattern.\n- The request message **must not** contain any other required fields, and\n  **should not** contain other optional fields except those described in this\n  or another AIP.\n\n### Long-running undelete\n\nSome resources take longer to undelete a resource than is reasonable for a\nregular API request. In this situation, the API **should** use a long-running\noperation (AIP-151) instead:\n\n```proto\nrpc UndeleteBook(UndeleteBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*}:undelete\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"Book\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n```\n\n- The response type **must** be set to the resource (what the return type would\n  be if the RPC was not long-running).\n- Both the `response_type` and `metadata_type` fields **must** be specified.\n\n### List and Get\n\nSoft-deleted resources **should not** be returned in `List` (AIP-132) responses\nby default (unless `bool show_deleted` is true). `Get` (AIP-131) requests for\nsoft-deleted resources **should** return the resource (rather than a\n`NOT_FOUND` error).\n\nAPIs that soft delete resources **may** choose a reasonable strategy for\npurging those resources, including automatic purging after a reasonable time\n(such as 30 days), allowing users to set an expiry time (AIP-214), or retaining\nthe resources indefinitely. Regardless of what strategy is selected, the API\n**should** document when soft deleted resources will be completely removed.\n\n### Declarative-friendly resources\n\nSoft-deletable resources have a poorer experience than hard-deleted resources in\ndeclarative clients: since an ID on a soft-deleted resource is not re-usable\nunless a custom method (undelete) is called, an imperative client must be\nintroduced or hand-written code is required to incorporate the usage of the\ncustom method.\n\n### Errors\n\nIf the user does not have permission to access the resource, regardless of\nwhether or not it exists, the service **must** error with `PERMISSION_DENIED`\n(HTTP 403). Permission **must** be checked prior to checking if the resource\nexists.\n\nIf the user does have proper permission, but the requested resource does not\nexist (either it was never created or already expunged), the service **must**\nerror with `NOT_FOUND` (HTTP 404).\n\nIf the user calling a soft `Delete` has proper permission, but the requested\nresource is already deleted, the service **must** succeed if `allow_missing` is\n`true`, and **should** error with `NOT_FOUND` (HTTP 404) if `allow_missing` is\n`false`.\n\nIf the user calling `Undelete` has proper permission, but the requested\nresource is not deleted, the service **must** respond with `ALREADY_EXISTS`\n(HTTP 409).\n\n## Further reading\n\n- For the `Delete` standard method, see AIP-135.\n- For long-running operations, see AIP-151.\n- For resource freshness validation (`etag`), see AIP-154.\n- For change validation (`validate_only`), see AIP-163.\n\n## Changelog\n\n- **2023-07-13**: Renamed overloaded `expire_time` to `purge_time`.\n- **2021-07-12**: Added error behavior when soft deleting a deleted resource.\n- **2021-07-12**: Clarified that `ALREADY_EXISTS` errors apply to `Undelete`.\n- **2021-07-12**: Changed the `expire_time` field to \"should\" for consistency\n  with AIP-148.\n- **2020-09-23**: Soft delete material in AIP-135 migrated to this AIP.\n\n[aip-123]: ./0123.md\n[aip-203]: ./0203.md\n"}
