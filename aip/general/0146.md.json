{"text":"---\nid: 146\nstate: approved\ncreated: 2019-05-28\nplacement:\n  category: fields\n  order: 70\n---\n\n# Generic fields\n\nMost fields in any API, whether in a request, a resource, or a custom response,\nhave a specific type or schema. This schema is part of the contract that\ndevelopers write their code against.\n\nHowever, occasionally it is appropriate to have a generic or polymorphic field\nof some kind that can conform to multiple schemata, or even be entirely\nfree-form.\n\n## Guidance\n\nWhile generic fields are generally rare, a service **may** introduce generic\nfield where necessary. There are several approaches to this depending on how\ngeneric the field needs to be; in general, services **should** attempt to\nintroduce the \"least generic\" approach that is able to satisfy the use case.\n\n### Oneof\n\nA `oneof` **may** be used to introduce a type union: the user or service is\nable to specify one of the fields inside the `oneof`. Additionally, a `oneof`\n**may** be used with the same type (usually strings) to represent a semantic\ndifference between the options.\n\nBecause the individual fields in the `oneof` have different keys, a developer\ncan programmatically determine which (if any) of the fields is populated.\n\nA `oneof` preserves the largest degree of type safety and semantic meaning for\neach option, and services **should** generally prefer them over other generic\nor polymorphic options when feasible. However, the `oneof` construct is\nill-suited when there is a large (or unlimited) number of potential options, or\nwhen there is a large resource structure that would require a long series of\n\"cascading oneofs\".\n\n**Note:** Adding additional possible fields to an existing `oneof` is a\nnon-breaking change, but moving existing fields into or out of a `oneof` is\nbreaking (it creates a backwards-incompatible change in Go protobuf stubs).\n\n### Maps\n\nMaps **may** be used in situations where many values _of the\nsame type_ are needed, but the keys are unknown or user-determined.\n\nMaps are usually not appropriate for generic fields because the map values all\nshare a type, but occasionally they are useful. In particular, a map can\nsometimes be suited to a situation where many objects of the same type are\nneeded, with different behavior based on the names of their keys (for example,\nusing keys as environment names).\n\n### Struct\n\nThe [`google.protobuf.Struct`][struct] object **may** be used to represent arbitrary\nnested JSON. Keys can be strings, and values can be floats, strings, booleans,\narrays, or additional nested structs, allowing for an arbitrarily nested\nstructure that can be represented as JSON (and is automatically represented as\nJSON when using REST/JSON).\n\nA `Struct` is most useful when the service does not know the schema in advance,\nor when a service needs to store and retrieve arbitrary but structured user\ndata. Using a `Struct` is convenient for users in this case because they can\neasily get JSON objects that can be natively manipulated in their environment\nof choice.\n\nIf a service needs to reason about the _schema_ of a `Struct`, it **should**\nuse [JSONSchema][] for this purpose. Because JSONSchema is itself JSON, a valid\nJSONSchema document can itself be stored in a `Struct`.\n\n### Any\n\nThe [`google.protobuf.Any`][any] object can be used to send an arbitrary\nserialized protocol buffer and a type definition.\n\nHowever, this introduces complexity, because an `Any` becomes useless for any\ntask other than blind data propagation if the consumer does not have access to\nthe proto. Additionally, even if the consumer _does_ have the proto, the\nconsumer has to ensure the type is registered and then deserialize manually,\nwhich is an often-unfamiliar process.\n\nBecause of this, `Any` **should not** be used unless other options are\ninfeasible.\n\n<!-- prettier-ignore-start -->\n[any]: https://github.com/protocolbuffers/protobuf/tree/master/src/google/protobuf/any.proto\n[struct]: https://github.com/protocolbuffers/protobuf/tree/master/src/google/protobuf/struct.proto\n[JSONSchema]: https://json-schema.org/\n<!-- prettier-ignore-end -->\n"}
