{"text":"---\nid: 135\nstate: approved\ncreated: 2019-01-24\nupdated: 2022-06-02\nplacement:\n  category: operations\n  order: 50\n---\n\n# Standard methods: Delete\n\nIn REST APIs, it is customary to make a `DELETE` request to a resource's URI\n(for example, `/v1/publishers/{publisher}/books/{book}`) in order to delete\nthat resource.\n\nResource-oriented design (AIP-121) honors this pattern through the `Delete`\nmethod. These RPCs accept the URI representing that resource and usually return\nan empty response.\n\n## Guidance\n\nAPIs **should** generally provide a delete method for resources unless it is\nnot valuable for users to do so.\n\nDelete methods are specified using the following pattern:\n\n```proto\nrpc DeleteBook(DeleteBookRequest) returns (google.protobuf.Empty) {\n  option (google.api.http) = {\n    delete: \"/v1/{name=publishers/*/books/*}\"\n  };\n  option (google.api.method_signature) = \"name\";\n}\n```\n\n- The RPC's name **must** begin with the word `Delete`. The remainder of the\n  RPC name **should** be the singular form of the resource's message name.\n- The request message **must** match the RPC name, with a `Request` suffix.\n- The response message **should** be `google.protobuf.Empty`.\n  - If the resource is [soft deleted](#soft-delete), the response message\n    **should** be the resource itself.\n  - If the delete RPC is [long-running](#long-running-delete), the response\n    message **must** be a `google.longrunning.Operation` which resolves to the\n    correct response.\n- The HTTP verb **must** be `DELETE`.\n- The request message field receiving the resource name **should** map to the\n  URI path.\n  - This field **should** be called `name`.\n  - The `name` field **should** be the only variable in the URI path. All\n    remaining parameters **should** map to URI query parameters.\n- There **must not** be a `body` key in the `google.api.http` annotation.\n- There **should** be exactly one `google.api.method_signature` annotation,\n  with a value of `\"name\"`. If an etag or force field are used, they **may** be\n  included in the signature.\n- If the API is operating on the [Management Plane][], the operation should have\n  [strong consistency][]: the completion of a delete operation **must** mean\n  that the existence of the resource has reached a steady-state and reading\n  resource state returns a consistent response.\n\n\n\nThe Delete method **should** succeed if and only if a resource was present and\nwas successfully deleted. If the resource did not exist, the method **should**\nsend a `NOT_FOUND` error.\n\n### Request message\n\nDelete methods implement a common request message pattern:\n\n```proto\nmessage DeleteBookRequest {\n  // The name of the book to delete.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n}\n```\n\n- A `name` field **must** be included. It **should** be called `name`.\n  - The field **should** be [annotated as required][aip-203].\n  - The field **must** identify the [resource type][aip-123] that it\n    references.\n- The comment for the field **should** document the resource pattern.\n- The request message **must not** contain any other required fields, and\n  **should not** contain other optional fields except those described in this\n  or another AIP.\n\n### Soft delete\n\n**Note:** This material was moved into its own document to provide a more\ncomprehensive treatment: AIP-164.\n\n### Long-running delete\n\nSome resources take longer to delete a resource than is reasonable for a\nregular API request. In this situation, the API **should** use a long-running\noperation instead:\n\n```proto\nrpc DeleteBook(DeleteBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    delete: \"/v1/{name=publishers/*/books/*}\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"google.protobuf.Empty\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n```\n\n- The response type **must** be set to the appropriate return type if the RPC\n  was not long-running: `google.protobuf.Empty` for most Delete RPCs, or the\n  resource itself for soft delete (AIP-164).\n- Both the `response_type` and `metadata_type` fields **must** be specified\n  (even if they are `google.protobuf.Empty`).\n\n### Cascading delete\n\nSometimes, it may be necessary for users to be able to delete a resource as\nwell as all applicable child resources. However, since deletion is usually\npermanent, it is also important that users not do so accidentally, as\nreconstructing wiped-out child resources may be quite difficult.\n\nIf an API allows deletion of a resource that may have child resources, the API\n**should** provide a `bool force` field on the request, which the user sets to\nexplicitly opt in to a cascading delete.\n\n```proto\nmessage DeletePublisherRequest {\n  // The name of the publisher to delete.\n  // Format: publishers/{publisher}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Publisher\"\n    }];\n\n  // If set to true, any books from this publisher will also be deleted.\n  // (Otherwise, the request will only work if the publisher has no books.)\n  bool force = 2;\n}\n```\n\nThe API **must** fail with a `FAILED_PRECONDITION` error if the `force` field\nis `false` (or unset) and child resources are present.\n\n### Protected delete\n\nSometimes, it may be necessary for users to ensure that no changes have been\nmade to a resource that is being deleted. If a resource provides an [etag][],\nthe delete request **may** accept the etag (as either required or optional):\n\n```proto\nmessage DeleteBookRequest {\n  // The name of the book to delete.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n\n  // Optional. The etag of the book.\n  // If this is provided, it must match the server's etag.\n  string etag = 2;\n}\n```\n\nIf the etag is provided and does not match the server-computed etag, the\nrequest **must** fail with a `ABORTED` error code.\n\n**Note:** Declarative-friendly resources (AIP-128) **must** provide the `etag`\nfield for Delete requests.\n\n### Delete if existing\n\nIf the service uses client-assigned resource names, `Delete` methods **may**\nexpose a `bool allow_missing` field, which will cause the method to succeed in\nthe event that the user attempts to delete a resource that is not present (in\nwhich case the request is a no-op):\n\n```proto\nmessage DeleteBookRequest {\n  // The book to delete.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference).type = \"library.googleapis.com/Book\"\n  ];\n\n  // If set to true, and the book is not found, the request will succeed\n  // but no action will be taken on the server\n  bool allow_missing = 2;\n}\n```\n\nMore specifically, the `allow_missing` flag triggers the following behavior:\n\n- If the method call is on a resource that does not exist, the request is a\n  no-op.\n  - The `etag` field is ignored.\n- If the method call is on a resource that already exists, the resource is\n  deleted (subject to other checks).\n\n**Note:** Declarative-friendly resources (AIP-128) **should** expose the\n`bool allow_missing` field.\n\n### Errors\n\nIf the user does not have permission to access the resource, regardless of\nwhether or not it exists, the service **must** error with `PERMISSION_DENIED`\n(HTTP 403). Permission **must** be checked prior to checking if the resource\nexists.\n\nIf the user does have proper permission, but the requested resource does not\nexist, the service **must** error with `NOT_FOUND` (HTTP 404) unless\n`allow_missing` is set to `true`.\n\n[aip-123]: ./0123.md\n[aip-131]: ./0131.md\n[aip-132]: ./0132.md\n[aip-136]: ./0136.md\n[aip-154]: ./0154.md\n[aip-203]: ./0203.md\n[aip-214]: ./0214.md\n[aip-216]: ./0216.md\n[management plane]: ./0111.md#management-plane\n[strong consistency]: ./0121.md#strong-consistency\n[etag]: ./0134.md#etags\n\n## Further reading\n\n- For soft delete and undelete, see AIP-164.\n- For bulk deleting large numbers of resources based on a filter, see AIP-165.\n\n## Changelog\n\n- **2023-08-24**: Adding consistency requirement.\n- **2022-06-02:** Changed suffix descriptions to eliminate superfluous \"-\".\n- **2022-02-02**: Changed eTag error from `FAILED_PRECONDITION` to `ABORTED` making it consistent with change to [AIP-154][] & [AIP-134][etag] on 2021-03-05.\n- **2020-10-06**: Added guidance for declarative-friendly resources.\n- **2020-10-06**: Added guidance for allowing no-op delete for missing\n  resources.\n- **2020-10-06**: Moved soft delete and undelete guidance into a new AIP-164.\n- **2020-06-08**: Added guidance for `Get` of soft-deleted resources.\n- **2020-02-03**: Added guidance for error cases.\n- **2019-10-18**: Added guidance on annotations.\n- **2019-08-01**: Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership.\n- **2019-06-10**: Added guidance for long-running delete.\n- **2019-05-29**: Added an explicit prohibition on arbitrary fields in standard\n  methods.\n"}
