{"text":"---\nid: 1\nstate: approved\ncreated: 2018-08-20\nplacement:\n  category: meta\n  order: 10\njs_scripts:\n  - /assets/js/graphviz/viz.js\n  - /assets/js/graphviz/lite.render.js\n  - /assets/js/aip/aip-graphviz.js\n---\n\n# AIP Purpose and Guidelines\n\nAs the corpus of Google APIs has grown and the API Governance team has grown to\nmeet the demand of supporting them, it is increasingly necessary to have a\ncorpus of documentation for API producers, reviewers, and other interested\nparties to reference. The API style guide and introductory One Platform\ndocumentation are intentionally terse and high-level. The AIP collection\nprovides a way to provide consistent documentation for API design guidance.\n\n## What is an AIP?\n\nAIP stands for **API Improvement Proposal**, which is a design document\nproviding high-level, concise documentation for API development. They are to\nserve as the source of truth for API-related documentation at Google and the\nmeans by which API teams discuss and come to consensus on API guidance. AIPs\nare maintained as Markdown files in the [AIP GitHub repository][].\n\n## Types of AIPs\n\nThere are several different types of AIPs, described below. The list of AIP\ntypes may evolve over time as necessary.\n\n### Guidance\n\nThese AIPs describe guidance on API design. These are provided as instruction\nfor API producers to help write simple, intuitive, and consistent APIs, and are\nused by API reviewers as a basis for review comments.\n\n### Process\n\nThese AIPs describe a process surrounding API design. They often affect the AIP\nprocess itself and are used to enhance the way in which AIPs are handled.\n\n## Stakeholders\n\nAs with any process there are many different stakeholders when it comes to\nreviewing and working with AIPs. Below is a summary of the escalation path\nstarting with the API producer.\n\n```graphviz\ndigraph d_front_back {\n  rankdir=BT;\n  ranksep=0.3;\n  node [ style=\"filled,solid\" shape=box fontname=\"Roboto\" ];\n\n  producer [ label=\"API Producer\" ];\n  editors [ label=\"AIP Editors\" ];\n  tl_infra [ label=\"Infrastructure TL\" ];\n  tl_design [ label=\"Design TL\" ];\n  tl [ label=\"TL\" ];\n\n  producer -> editors;\n  editors -> tl_infra -> tl;\n  editors -> tl_design -> tl;\n}\n```\n\n### Technical leads\n\nThe current TL (technical lead) for APIs is Eric Brewer; he has delegated some\nresponsibilities for API Design to the API Design TL (Yusuke Tsutsumi\n([@toumorokoshi][])).\n\nAs noted in the diagram above, the TL is the final decision-maker on the AIP\nprocess and the final point of escalation if necessary.\n\n### Editors\n\nThe editors are the set of people who make decisions on AIPs. The general goal\nis that the AIP process is collaborative and that we largely work on the basis\nof consensus. However, a limited number of designated approvers is necessary,\nand these Googlers will be approvers for each AIP in the general scope.\n\nThe list of AIP editors is currently:\n\n- Angie Lin ([@alin04][])\n- Brian Grant ([@bgrant0607][])\n- Hami Asaadi ([@hrasadi][])\n- Jon Skeet ([@jskeet][])\n- Louis Dejardin ([@loudej][])\n- Noah Dietz ([@noahdietz][])\n- Sam Woodard ([@shwoodard][])\n- Yusuke Tsutsumi ([@toumorokoshi][])\n\nThe editors are also responsible for the administrative and editorial aspects\nof shepherding AIPs and managing the AIP pipeline and workflow. They approve\nPRs to AIPs, assign proposal numbers, manage the agenda, set AIP states, and so\nforth. They also ensure that AIPs are readable (proper spelling, grammar,\nsentence structure, markup, etc.).\n\nAIP editorship is by invitation of the current editors.\n\n## Domain-specific AIPs\n\nSome AIPs may be specific to a particular domain (for example, only to APIs\nwithin a certain PA, or even a certain team). In this situation, the group will\nbe given a particular block of AIPs to use in accordance with AIP-2, and the\napplicable AIPs will clearly indicate their scope.\n\n## States\n\nAt any given time, AIPs may exist in a variety of states as they work their way\nthrough the process. The following is a summary of each state.\n\n### Draft\n\nThe initial state for an AIP is the \"Draft\" state. This means that the AIP is\nbeing discussed and iterated upon, primarily by the original authors. While the\neditors _may_ get involved at this stage, it is not necessary.\n\n**Note:** If significant, high-level iteration is required, it is recommended\nto draft AIPs in a Google doc instead of a PR. AIPs that are migrated into the\nAIP system from Google Docs **may** skip the draft state and go directly to\nreviewing provided there is sufficient approval.\n\n### Reviewing\n\nOnce discussion on an AIP has generally concluded, but before it is formally\naccepted it moves to the \"Reviewing\" state. This means that the authors have\nreached a general consensus on the proposal and the editors are now involved.\nAt this stage the editors may request changes or suggest alternatives to the\nproposal before moving forward.\n\n**Note:** As a formal matter, one AIP approver (other than the author) **must**\nprovide formal signoff to advance an AIP to the reviewing state. Additionally,\nthere **must not** be formal objections (\"changes requested\" on the GitHub PR)\nfrom other approvers.\n\n### Approved\n\nOnce an approved AIP has been agreed upon, it enters \"approved\" state and is\nconsidered \"best current practice\".\n\n**Note:** As a formal matter, two AIP approvers (other than the author)\n**must** provide formal signoff to advance an AIP to the approved state.\nAdditionally, there **must not** be formal objections (\"changes requested\" on\nthe GitHub PR) from other approvers.\n\n### Withdrawn\n\nIf an AIP is withdrawn by the author or champion, it enters \"withdrawn\" state.\nAIPs that are withdrawn may be taken up by another champion.\n\n### Rejected\n\nIf an AIP is rejected by the AIP editors, it enters \"rejected\" state. AIPs that\nare rejected remain, and provide documentation and reference to inform future\ndiscussions.\n\n### Deferred\n\nIf an AIP has not been acted upon for a significant period of time, the editors\nmay mark it as \"deferred\".\n\n### Replaced\n\nIf an AIP has been replaced by another AIP, it enters \"replaced\" state. AIP\neditors are responsible to provide a notice explaining the replacement and\nrationale (the replacement AIP should also clearly explain the rationale).\n\nIn general, API producers should rely primarily on AIPs in the \"approved\"\nstate.\n\n## Workflow\n\nThe following workflow describes the process for proposing an AIP, and moving\nan AIP from proposal to implementation to final acceptance.\n\n### Overview\n\n```graphviz\ndigraph d_front_back {\n  rankdir=LR;\n  node [ style=\"filled,solid\" shape=box fontname=\"Roboto\" ];\n  draft [ label=\"Draft\" fillcolor=\"orange\" ];\n  reviewing [ label=\"Reviewing\" fillcolor=\"lightskyblue\" ];\n  approved [ label=\"Approved\" fillcolor=\"palegreen\" ];\n  withdrawn [ label=\"Withdrawn\" fillcolor=\"mistyrose\" ];\n  rejected [ label=\"Rejected\" fillcolor=\"mistyrose\" ];\n  deferred [ label=\"Deferred\" fillcolor=\"lightsteelblue\" ];\n  replaced [ label=\"Replaced\" fillcolor=\"lightsteelblue\" ];\n\n  draft -> reviewing;\n  draft -> withdrawn [ style=dashed, color=mistyrose3 ];\n  draft -> rejected [ style=dashed, color=mistyrose3 ];\n  reviewing -> approved;\n  reviewing -> withdrawn [ style=dashed, color=mistyrose3 ];\n  reviewing -> rejected [ style=dashed, color=mistyrose3 ];\n  draft -> deferred [ style=dashed, color=lightsteelblue3 ];\n  reviewing -> deferred [ style=dashed, color=lightsteelblue3 ];\n  approved -> replaced [ style=dashed, color=lightsteelblue3 ];\n  reviewing -> replaced [ style=dashed, color=lightsteelblue3 ];\n}\n```\n\n### Proposing an AIP\n\nIn order to propose an AIP, first [open an issue][] to circulate the\nfundamental idea for initial feedback. It should generally be possible to\ndescribe the idea in a couple of pages.\n\nOnce ready, create a PR with a new file in the AIP directory using a file\ntitled `aip/new.md`. Ensure that the PR is editable by maintainers.\n\nIn most circumstances, the editors will assign the proposal an AIP number and\nsubmit the PR with the AIP in the \"Reviewing\" state. The editors may reject an\nAIP outright if they have an obvious reason to do so (e.g. the proposal was\nalready discussed and rejected in another AIP or is fundamentally unsound), in\nwhich case the PR is not merged.\n\n### Discussing an AIP\n\nOnce the PR is merged, the AIP author is responsible for championing the AIP on\na follow-up approval pull request. This means that the author is responsible\nfor pushing towards consensus around the proposal. This may involve a\ndiscussion at the regularly scheduled meetings for the API Governance team.\n\nThe AIP author may modify the AIP over the course of discussion by submitting\nfollow-up commits to the PR.\n\n### Accepting an AIP\n\nThe editors will work together to ensure that qualified proposals do not linger\nin review.\n\nTo gain final approval, an AIP **must** be approved by, at minimum, the TL with\nresponsibility over the domain covered by the AIP (either design or\ninfrastructure) and at least one other editor, with no editors actively\nrequesting changes.\n\n**Note:** If an AIP editor is the primary author of an AIP, then at least two\n_other_ editors must approve it.\n\nOnce the AIP is approved, the editors will update the state of the AIP to\nreflect this and submit the PR.\n\n### Withdrawing or Rejecting an AIP\n\nThe author of an AIP may decide, after further consideration, that an AIP\nshould not advance. If so, the author may withdraw the AIP by updating the PR\nadding a notice of withdrawal with an explanation of the rationale.\nAdditionally, the author may be unable to get consensus among the group and the\nAIP editors may elect to reject the AIP. In this situation, the AIP editors\nshall amend the PR adding a notice of rejection with an explanation of the\nrationale. In both cases, the AIP editors update the state accordingly and\nsubmit the PR.\n\n### Replacing an AIP\n\nIn rare cases, it may be necessary to replace an AIP with another one. This is\nnot general practice: minor edits to approved AIPs are acceptable, and will be\nthe common way to tweak guidance. However, if new guidance fundamentally alters\nthe old guidance in some way, then the AIP editors shall create a new AIP that,\nonce approved, will replace the old one. The old one then enters \"Replaced\"\nstate, and will link to the new, current AIP.\n\n## Changelog\n\n- **2023-05-10**: Updated names of current and editors and TLs.\n- **2019-07-30**: Further clarified AIP quorum requirements.\n- **2019-05-12**: Collapsed AIP approvers and editors into a single position,\n  relaxed approval rules from full quorum.\n- **2019-05-04**: Updated the AIP to refer to GitHub processes, rather than\n  internal processes.\n\n[aip github repository]: https://github.com/googleapis/aip\n[open an issue]: https://github.com/googleapis/aip/issues\n[@alin04]:https://github.com/alin04\n[@bgrant0607]: https://github.com/bgrant0607\n[@hrasadi]: https://github.com/hrasadi\n[@jskeet]: https://github.com/jskeet\n[@loudej]: https://github.com/loudej\n[@noahdietz]: https://github.com/noahdietz\n[@shwoodard]: https://github.com/shwoodard\n[@toumorokoshi]: https://github.com/toumorokoshi\n"}
