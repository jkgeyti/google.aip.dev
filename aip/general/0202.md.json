{"text":"---\nid: 202\nstate: reviewing\ncreated: 2023-09-22\nplacement:\n  category: fields\n  order: 0\n---\n\n# Fields\n\nThe [`google.api.FieldInfo`][field info proto] type, through its accompanying\nextension `google.api.field_info`, enriches a field's schema beyond the basic\nname and type information.\n\n## Guidance\n\nDecorating a field with `google.api.field_info` is only necessary when\nexplicitly stated in this AIP or another that leverages `google.api.FieldInfo`\ninformation. As such, the guidance herein applies to those scenarios as well.\n\n### Format\n\nFields with a primitive type can still have a specific format. To convey that\ntype format, the `FieldInfo.Format` enumeration is used via the\n`(google.api.field_info).format` extension field. The following guidance conveys\nthe meaning of and requirements for use of each `FieldInfo.Format` value.\n\n#### UUID4\n\nThe `UUID4` format represents a UUID version 4 value as governed by\n[RFC 4122][]. It **must** only be used on a field of type `string`.\n\nSuch a value **may** be normalized by the service to entirely lowercase letters.\nFor example, the value `F47AC10B-58CC-0372-8567-0E02B2C3D479` would be\nnormalized to `f47ac10b-58cc-0372-8567-0e02b2c3d479`.\n\nAs such, equivalence comparison **must not** be done via primitive text\ncomparison. Instead, an [RFC 4122][] compliant implementation **must** be used.\n\n#### IPv4\n\nThe `IPV4` format represents an IP v4 address as governed by [RFC 791][]. It\n**must** only be used on a field of type `string`.\n\nSuch a value **may** be condensed by the service, with leading zeros in each\noctet stripped. For example, `001.022.233.040` would be condensed to\n`1.22.233.40`.\n\nAs such, equivalence comparison **must not** be done via primitive text\ncomparison. Instead, an [RFC 791][] compliant implementation **must** be used.\n\n#### IPv6\n\nThe `IPV6` format represents an IP v6 address as governed by [RFC 4291][]. It\n**must** only be used on a field of type `string`.\n\nSuch a value **may** be normalized by the service to entirely lowercase letters,\nand zero-padded partial and empty octets. For example, the value `2001:DB8::`\nwould be normalized to `2001:0db8:0:0`.\n\nAs such, equivalence comparison **must not** be done via primitive text\ncomparison. Instead, an [RFC 4291][] compliant implementation **must** be used.\n\n#### IPv4 or IPv6\n\nThe `IPV4_OR_IPV6` value indicates that the field can be either an IP v4 or v6\naddress, as described in the [IPv4](#ipv4) and [IPv6](#ipv6) sections.\n\n#### Format Compatibility\n\nAdding a format specifier to an existing, unspecified field **is not** backwards\ncompatible, *unless* the field in question has always conformed to the format\nbeing specified.\n\nChanging an existing format specifier to a different one in all cases **is not**\nbackwards compatible.\n\n#### Extending Format\n\nAny new `FieldInfo.Format` value **must** be governed by an\n[IETF-approved RFC][ietf rfc] or a [Google-approved AIP](./0001.md).\n\n## Rationale\n\n#### Why add a format specifier?\n\nThe format of a primitive-typed field can be critical to its usability. Some\nprogramming languages may convey a specific type format as a standalone type,\nas Java does with [UUID][java uuid]. Most have specific structural requirements\nthat are validated by the service, so conveying the format to the user ahead of\ntime is critical to their experience.\n\n#### Why discourage primitive equality comparisons?\n\nThe text representations of the supported formats have many nuances and\ntransforming the value into a canonical representation is non-trivial. As such,\naligning implementations between each consumer and each service without any\nissue is infeasiable.\n\n#### Why document value normalizations?\n\nWhile primitive comparison is not recommended for any of the supported formats,\nuniform normalization of values is important to set consumer expectations, and\ncreate a user-friendly surface.\n\n#### Why require an RFC or AIP for new formats?\n\nThose formats which are sufficiently standardized to merit an RFC or AIP are\nstable enough and widely enough known to be incorporated as a supported value\nand see usage in Google APIs. Requiring such extra guidance means that governing\nthe format specification is not the responsibility of the `FieldInfo.Format`\nenumeration itself.\n\n[field info proto]: https://github.com/googleapis/googleapis/blob/master/google/api/field_info.proto\n[rfc 4122]: https://datatracker.ietf.org/doc/html/rfc4122\n[rfc 791]: https://datatracker.ietf.org/doc/html/rfc791\n[rfc 4291]: https://datatracker.ietf.org/doc/html/rfc4291#section-2.2\n[ietf rfc]: https://www.ietf.org/standards/rfcs\n[java uuid]: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html\n"}
