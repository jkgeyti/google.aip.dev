{"text":"---\nid: 203\nstate: approved\ncreated: 2018-07-17\nplacement:\n  category: fields\n  order: 15\n---\n\n# Field behavior documentation\n\nWhen defining fields in protocol buffers, it is customary to explain to users\ncertain aspects of the field's behavior (such as whether it is required or\noptional). Additionally, it can be useful for other tools to understand this\nbehavior (for example, to optimize client library signatures).\n\n## Guidance\n\nAPIs use the `google.api.field_behavior` annotation to describe well-understood\nfield behavior, such as a field being required or immutable.\n\n```proto\n// The audio data to be recognized.\nRecognitionAudio audio = 2 [(google.api.field_behavior) = REQUIRED];\n```\n\n- APIs **must** apply the `google.api.field_behavior` annotation on every field\n  on a message or sub-message used in a request.\n- The annotation **must** include any [google.api.FieldBehavior][] values that\n  accurately describe the behavior of the field.\n  - `FIELD_BEHAVIOR_UNSPECIFIED` **must not** be used.\n- APIs **must** at minimum use one of `REQUIRED`, `OPTIONAL`, or `OUTPUT_ONLY`.\n\n**Warning:** Although `field_behavior` does not impact proto-level behavior,\nmany clients (e.g. CLIs and SDKs) rely on them to generate code. Thoroughly\nreview and consider which values are relevant when adding a new field.\n\nFields with no annotation are interpreted as `OPTIONAL` for\nbackwards-compatility. Nontheless, this annotation **must not** be omitted.\n\n**Note:** The vocabulary given in this document is for _descriptive_ purposes\nonly, and does not itself add any validation. The purpose is to consistently\ndocument this behavior for clients.\n\n### field behavior of nested messages\n\n`google.api.field_behavior` annotations on a nested message are independent of\nthe annotations of the parent.\n\nFor example, a nested message can have a field behavior of `REQUIRED` while the\nparent field can be `OPTIONAL`:\n\n```proto\nmessage Title {\n  string text = 1 [(google.api.field_behavior) = REQUIRED];\n}\n\nmessage Slide {\n  Title title = 1 [(google.api.field_behavior) = OPTIONAL];\n}\n```\n\nIn the case above, if a `title` is specified, the `text` field is required.\n\n## Vocabulary\n\n### Identifier\n\nThe use of `IDENTIFIER` indicates that a field within a resource message is used\nto identify the resource. It **must** be attached to the `name` field and **must\nnot** be attached to any other field (see [fields representing resource names]).\n\nThe `IDENTIFIER` value conveys that the field is not accepted as input (i.e.\n`OUTPUT_ONLY`) in the context of a create method, while also being considered\n`IMMUTABLE` and accepted as input for mutation methods that accept the\nresource as the primary input e.g. [Standard Update][aip-134].\n\nThis annotation **must not** be applied to references to other resources within\na message.\n\n### Immutable\n\nThe use of `IMMUTABLE` indicates that a field on a resource cannot be changed\nafter it's creation. This can apply to either fields that are input or outputs,\nrequired or optional.\n\nWhen a service receives an immutable field in an update request (or similar),\neven if included in the update mask, the service **should** ignore the field if\nthe value matches, but **should** error with `INVALID_ARGUMENT` if a change is\nrequested.\n\nPotential use cases for immutable fields (this is not an exhaustive list) are:\n\n- Attributes of resources that are not modifiable for the lifetime of the\n  application (e.g. a disk type).\n\n**Note:** Fields which are \"conditionally immutable\" **must not** be given the\nimmutable annotation.\n\n### Input only\n\nThe use of `INPUT_ONLY` indicates that the field is provided in requests and\nthat the corresponding field will not be included in output.\n\nAdditionally, a field **should** only be described as input only if it is a\nfield in a resource message or a field of a message included within a resource\nmessage. Notably, fields in request messages (a message which only ever acts as\nan argument to an RPC, with a name usually ending in `Request`) **should not**\nbe described as input only because this is already implied.\n\nPotential use cases for input only fields (this is not an exhaustive list) are:\n\n- The `ttl` field as described in AIP-214.\n\n**Warning:** Input only fields are rare and should be considered carefully\nbefore use.\n\n### Optional\n\nThe use of `OPTIONAL` indicates that a field is not required.\n\nA field **may** be described as optional if it is a field on a request message\n(a message that is an argument to an RPC, usually ending in `Request`), or a\nfield on a submessage.\n\n### Output only\n\nThe use of `OUTPUT_ONLY` indicates that the field is provided in responses, but\nthat including the field in a message in a request does nothing (the server\n**must** clear out any value in this field and **must not** throw an error as a\nresult of the presence of a value in this field on input). Similarly, services\n**must** ignore the presence of output only fields in update field masks (see:\nAIP-161).\n\nAdditionally, a field **should** only be described as output only if it is a\nfield in a resource message, or a field of a message farther down the tree.\nNotably, fields in response messages (a message which only ever acts as a\nreturn value to an RPC, usually ending in `Response`) **should not** be\ndescribed as output only because this is already implied.\n\nOutput only fields **may** be set to empty values if appropriate to the API.\n\nPotential use cases for output only fields (this is not an exhaustive list)\nare:\n\n- Create or update timestamps.\n- Derived or structured information based on original user input.\n- Properties of a resource assigned by the service which can not be altered.\n\n### Required\n\nThe use of `REQUIRED` indicates that the field **must** be present (and set to\na non-empty value) on the request or resource.\n\nA field **should** only be described as required if _either_:\n\n- It is a field on a resource that a user provides somewhere as input. In this\n  case, the resource is only valid if a \"truthy\" value is _stored_.\n  - When [creating][aip-133] the resource, a value **must** be provided for the\n    field on the create request.\n  - When [updating][aip-134] the resource, the user **may** omit the field\n    provided that the field is also absent from the field mask, indicating no\n    change to the field (otherwise it **must** be provided).\n- It is a field on a request message (a message that is an argument to an RPC,\n  with a name usually ending in `Request`). In this case, a value **must** be\n  provided as part of the request, and failure to do so **must** cause an error\n  (usually `INVALID_ARGUMENT`).\n\nWe define the term \"truthy\" above as follows:\n\n- For primitives, values other than `0`, `0.0`, empty string/bytes, and `false`\n- For repeated fields maps, values with at least one entry\n- For messages, any message with at least one \"truthy\" field.\n\nFields **should not** be described as required in order to signify:\n\n- A field which will always be present in a response.\n- A field which is conditionally required in some situations.\n- A field on any message (including messages that are resources) which is never\n  used as user input.\n\n**Note:** In most cases, empty values (such as `false` for booleans, `0` for\nintegers, or the unspecified value for enums) are indistinguishable from unset\nvalues, and therefore setting a required field to a falsy value yields an\nerror. A corollary to this is that a required boolean must be set to `true`.\n\n### Unordered List\n\nThe use of `UNORDERED_LIST` on a repeated field of a resource indicates that\nthe service does not guarantee the order of the items in the list.\n\nA field **should** be described as an unordered list if the service does not\nguarantee that the order of the elements in the list will match the order that\nthe user sent, including a situation where the service will sort the list on\nthe user's behalf.\n\nA resource with an unordered list **may** return the list in a stable order, or\n**may** return the list in a randomized, unstable order.\n\n## Backwards compatibility\n\nAdding or changing `google.api.field_behavior` values can represent a semantic\nchange in the API that is perceived as incompatible for existing clients. The\nfollowing are examples of backwards incompatible changes with\n`google.api.field_behavior`:\n\n* Adding `REQUIRED` to an existing field previously considered `OPTIONAL`\n(implicitly or otherwise)\n* Adding a new field annotated as `REQUIRED` to an existing request message\n* Adding `OUTPUT_ONLY` to an existing field previously accepted as input\n* Adding `INPUT_ONLY` to an existing field previously emitted as output\n* Adding `IMMUTABLE` to an existing field previously considered mutable\n* Removing `OUTPUT_ONLY` from an existing field previously ignored as input\n* Removing `IDENTIFIER` from an existing field.\n\nThere are some changes that *are* backwards compatible, which are as follows:\n\n* Adding `OPTIONAL` to an existing field\n* Adding `IDENTIFIER` to an existing `name` field\n* Changing from `REQUIRED` to `OPTIONAL` on an existing field\n* Changing from `OUTPUT_ONLY` and/or `IMMUTABLE` to `IDENTIFIER` on an existing\n  field\n* Removing `REQUIRED` from an existing field\n* Removing `INPUT_ONLY` from an existing field previously excluded in responses\n* Removing `IMMUTABLE` from an existing field previously considered immutable\n\n## Rationale\n\n### Identifier field behavior\n\nResource names, the primary identifiers for any compliant resource, are never\nfully constructed by the user on create. Such fields are typically assigned\n`OUTPUT_ONLY` field behavior. They are, however, also often consumed as\nthe primary identifier in scenarios where the resource itself is the primary\nrequest payload. Such fields could *not* be considered `OUTPUT_ONLY`.\nFurthermore, in mutation requests, like Standard Update, the resource name as\nthe primary identifier cannot be changed in place. Such fields are typically\nassigned `IMMUTABLE` field behavior. These conflicting and context-dependent\nfield behaviors meant that a new value was necessary to single out and convey\nthe behavior of the resource name field.\n\n### Required set of annotations\n\nA field used in a request message must be either an input or an output.\n\nIn the case of an output, the `OUTPUT_ONLY` annotation is sufficient.\n\nIn the case of an input, a field is either required or optional, and therefore\nshould have at least the `REQUIRED` or `OPTIONAL` annotation, respectively.\n\n### Requiring field behavior\n\nBy including the field behavior annotation for each field, the overall behavior\nthat the resource exhibits is more clearly defined. Clearly defined field\nbehavior improves programmatic clients and user understanding.\n\nRequiring the annotation also forces the API author to explicitly consider the\nbehavior when initially authoring of the API.\n\nModifying field behavior after initial authoring can result in\nbackwards-incompatible changes in clients. For example, making an optional field\nrequired results in backwards-incompatible changes in the method signature of an\nRPC or a resource in a [Declarative client][]. See the\n[Backwards compatibility](#backwards-compatibility) section for more detailed\ncompatibility guidance.\n\n## History\n\nIn 2023-05 field_behavior was made mandatory. Prior to this change, the\nannotation was often omitted. Its values are relied upon to produce high quality\nclients. Furthermore, adding or changing some of the field_behavior values after\nthe fact within a major version can be backwards-incompatible. See the\n[Backwards compatibility](#backwards-compatibility) section for more detailed\ncompatibility guidance.\n\nThe benefits of requiring field_behavior at the time that the API is authored\nsurpass the costs to clients and API users of not doing so.\n\n[aip-133]: ./0133.md\n[aip-134]: ./0134.md\n[aip-180]: ./0180.md\n[google.api.FieldBehavior]: https://github.com/googleapis/googleapis/blob/master/google/api/field_behavior.proto#L49\n[Declarative client]: ./0009.md#declarative-clients\n[fields representing resource names]: ./0122.md#fields-representing-resource-names\n\n## Changelog\n\n- **2023-09-14**: Clarify that nested behavior and parent behavior are\n  independent.\n- **2023-08-25**: Add guidance on `IDENTIFIER`.\n- **2023-07-20**: Describe compatibility guidance with new section.\n- **2023-05-24**: Clarify that `IMMUTABLE` does not imply input nor required.\n- **2023-05-10**: Added guidance to require the annotation.\n- **2020-12-15**: Added guidance for `UNORDERED_LIST`.\n- **2020-05-27**: Clarify behavior when receiving an immutable field in an\n  update.\n- **2019-12-05**: Added guidance on output only fields in field masks.\n- **2019-06-18**: Use the machine-readable annotation, not comments.\n"}
