{"text":"---\nid: 134\nstate: approved\ncreated: 2019-01-24\nupdated: 2022-06-02\nplacement:\n  category: operations\n  order: 40\n---\n\n# Standard methods: Update\n\nIn REST APIs, it is customary to make a `PATCH` or `PUT` request to a\nresource's URI (for example, `/v1/publishers/{publisher}/books/{book}`) in\norder to update that resource.\n\nResource-oriented design ([AIP-121][]) honors this pattern through the `Update`\nmethod (which mirrors the REST `PATCH` behavior). These RPCs accept the URI\nrepresenting that resource and return the resource.\n\n## Guidance\n\nAPIs **should** generally provide an update method for resources unless it is\nnot valuable for users to do so. The purpose of the update method is to make\nchanges to the resources without causing side effects.\n\nUpdate methods are specified using the following pattern:\n\n```proto\nrpc UpdateBook(UpdateBookRequest) returns (Book) {\n  option (google.api.http) = {\n    patch: \"/v1/{book.name=publishers/*/books/*}\"\n    body: \"book\"\n  };\n  option (google.api.method_signature) = \"book,update_mask\";\n}\n```\n\n- The RPC's name **must** begin with the word `Update`. The remainder of the\n  RPC name **should** be the singular form of the resource's message name.\n- The request message **must** match the RPC name, with a `Request` suffix.\n- The response message **must** be the resource itself. (There is no\n  `UpdateBookResponse`.)\n  - The response **should** include the fully-populated resource, and **must**\n    include any fields that were sent and included in the update mask unless\n    they are input only (see AIP-203).\n  - If the update RPC is [long-running](#long-running-update), the response\n    message **must** be a `google.longrunning.Operation` which resolves to the\n    resource itself.\n- The method **should** support partial resource update, and the HTTP verb\n  **should** be `PATCH`.\n  - If the method will only ever support full resource replacement, then the\n    HTTP verb **may** be `PUT`. However, this is strongly discouraged because\n    it becomes a backwards-incompatible change to add fields to the resource.\n- The resource's `name` field **should** map to the URI path.\n  - The `{resource}.name` field **should** be the only variable in the URI\n    path.\n- There **must** be a `body` key in the `google.api.http` annotation, and it\n  **must** map to the resource field in the request message.\n  - All remaining fields **should** map to URI query parameters.\n- There **should** be exactly one `google.api.method_signature` annotation, with\n  a value of `\"{resource},update_mask\"`.\n- If the API is operating on the [management plane][], the operation should have\n  [strong consistency][]: the completion of an update operation **must** mean\n  that all user-settable values and the existence of the resource have reached a\n  steady-state and reading resource state returns a consistent response.\n\n\n\n**Note:** Unlike the other four standard methods, the URI path here references\na nested field (`book.name`) in the example. If the resource field has a word\nseparator, `snake_case` is used.\n\n### Request message\n\nUpdate methods implement a common request message pattern:\n\n```proto\nmessage UpdateBookRequest {\n  // The book to update.\n  //\n  // The book's `name` field is used to identify the book to update.\n  // Format: publishers/{publisher}/books/{book}\n  Book book = 1 [(google.api.field_behavior) = REQUIRED];\n\n  // The list of fields to update.\n  google.protobuf.FieldMask update_mask = 2;\n}\n```\n\n- The request message **must** contain a field for the resource.\n  - The field **must** map to the `PATCH` body.\n  - The field **should** be [annotated as required][aip-203].\n  - A `name` field **must** be included in the resource message. It **should**\n    be called `name`.\n  - The field **must** identify the [resource type][aip-123] of the resource\n    being updated.\n- If partial resource update is supported, a field mask **must** be included.\n  It **must** be of type `google.protobuf.FieldMask`, and it **must** be\n  called `update_mask`.\n  - The fields used in the field mask correspond to the resource being updated\n    (not the request message).\n  - The field **may** be required or optional. If it is required, it **must**\n    include the corresponding annotation. If optional, the service **must**\n    treat an omitted field mask as an implied field mask equivalent to all\n    fields that are populated (have a non-empty value).\n  - Update masks **must** support a special value `*`, meaning full replacement\n    (the equivalent of `PUT`).\n- The request message **must not** contain any other required fields, and\n  **should not** contain other optional fields except those described in this\n  or another AIP.\n\n### Side effects\n\nIn general, update methods are intended to update the data within the resource.\nUpdate methods **should not** trigger other side effects. Instead, side effects\n**should** be triggered by custom methods.\n\nIn particular, this entails that [state fields][] **must not** be directly\nwritable in update methods.\n\n### PATCH and PUT\n\n**TL;DR:** Google APIs generally use the `PATCH` HTTP verb only, and do not\nsupport `PUT` requests.\n\nWe standardize on `PATCH` because Google updates stable APIs in place with\nbackwards-compatible improvements. It is often necessary to add a new field to\nan existing resource, but this becomes a breaking change when using `PUT`.\n\nTo illustrate this, consider a `PUT` request to a `Book` resource:\n\n    PUT /v1/publishers/123/books/456\n\n    {\"title\": \"Mary Poppins\", \"author\": \"P.L. Travers\"}\n\nNext consider that the resource is later augmented with a new field (here we\nadd `rating`):\n\n```proto\nmessage Book {\n  string title = 1;\n  string author = 2;\n\n  // Subsequently added to v1 in place...\n  int32 rating = 3;\n}\n```\n\nIf a rating is set on a book and the existing `PUT` request was executed, it\nwould wipe out the book's rating. In essence, a `PUT` request unintentionally\nwiped out data because the previous version did not know about it.\n\n### Long-running update\n\nSome resources take longer to update a resource than is reasonable for a\nregular API request. In this situation, the API **should** use a long-running\noperation (AIP-151) instead:\n\n```proto\nrpc UpdateBook(UpdateBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    patch: \"/v1/{book.name=publishers/*/books/*}\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"Book\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n```\n\n- The response type **must** be set to the resource (what the return type would\n  be if the RPC was not long-running).\n- Both the `response_type` and `metadata_type` fields **must** be specified.\n\n**Note:** Declarative-friendly resources ([AIP-128][]) **should** use long-running\nupdate.\n\n### Create or update\n\nIf the service uses client-assigned resource names, `Update` methods **may**\nexpose a `bool allow_missing` field, which will cause the method to succeed in\nthe event that the user attempts to update a resource that is not present (and\nwill create the resource in the process):\n\n```proto\nmessage UpdateBookRequest {\n  // The book to update.\n  //\n  // The book's `name` field is used to identify the book to be updated.\n  // Format: publishers/{publisher}/books/{book}\n  Book book = 1 [(google.api.field_behavior) = REQUIRED];\n\n  // The list of fields to be updated.\n  google.protobuf.FieldMask update_mask = 2;\n\n  // If set to true, and the book is not found, a new book will be created.\n  // In this situation, `update_mask` is ignored.\n  bool allow_missing = 3;\n}\n```\n\nMore specifically, the `allow_missing` flag triggers the following behavior:\n\n- If the method call is on a resource that does not exist, the resource is\n  created. All fields are applied regardless of any provided field mask.\n  - However, if any required fields are missing or fields have invalid values,\n    an `INVALID_ARGUMENT` error is returned.\n- If the method call is on a resource that already exists, and all fields\n  match, the existing resource is returned unchanged.\n- If the method call is on a resource that already exists, only fields declared\n  in the field mask are updated.\n\nThe user **must** have the update permissions to call `Update` even with\n`allow_missing` set to `true`. For customers that want to prevent users from\ncreating resources using the update method, IAM conditions **should** be used.\n\n### Etags\n\nAn API may sometimes need to allow users to send update requests which are\nguaranteed to be made against the most current data (a common use case for this\nis to detect and avoid race conditions). Resources which need to enable this do\nso by including a `string etag` field, which contains an opaque,\nserver-computed value representing the content of the resource.\n\nIn this situation, the resource **should** contain a `string etag` field:\n\n```proto\nmessage Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // The resource name of the book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The title of the book.\n  // Example: \"Mary Poppins\"\n  string title = 2;\n\n  // The author of the book.\n  // Example: \"P.L. Travers\"\n  string author = 3;\n\n  // The etag for this book.\n  // If this is provided on update, it must match the server's etag.\n  string etag = 4;\n}\n```\n\nThe `etag` field **may** be either [required][] or [optional][]. If it is set,\nthen the request **must** succeed if and only if the provided etag matches the\nserver-computed value, and **must** fail with an `ABORTED` error otherwise. The\n`update_mask` field in the request does not affect the behavior of the `etag`\nfield, as it is not a field _being_ updated.\n\n### Expensive fields\n\nAPIs sometimes encounter situations where some fields on a resource are\nexpensive or impossible to reliably return.\n\nThis can happen in a few situations:\n\n- A resource may have some fields that are very expensive to compute, and that\n  are generally not useful to the customer on update requests.\n- A single resource sometimes represents an amalgamation of data from multiple\n  underlying (and eventually consistent) data sources. In these situations, it\n  is impossible to return authoritative information on the fields that were not\n  changed.\n\nIn this situation, an API **may** return back only the fields that were\nupdated, and omit the rest, and **should** document this behavior if they do\nso.\n\n### Errors\n\nSee [errors][], in particular [when to use PERMISSION_DENIED and\nNOT_FOUND errors][permission-denied].\n\nIn addition, if the user does have proper permission, but the requested resource\ndoes not exist, the service **must** error with `NOT_FOUND` (HTTP 404) unless\n`allow_missing` is set to `true`.\n\n[aip-121]: ./0121.md\n[aip-128]: ./0128.md\n[aip-203]: ./0203.md\n[create]: ./0133.md\n[errors]: ./0193.md\n[management plane]: ./0111.md#management-plane\n[permission-denied]: ./0193.md#permission-denied\n[state fields]: ./0216.md\n[strong consistency]: ./0121.md#strong-consistency\n[required]: ./0203.md#required\n[optional]: ./0203.md#optional\n\n## Changelog\n\n- **2023-08-26**: Adding consistency requirement.\n- **2023-07-17**: Make `update_mask` name guidance a **must**.\n- **2022-11-04**: Aggregated error guidance to AIP-193.\n- **2022-06-02**: Changed suffix descriptions to eliminate superfluous \"-\".\n- **2021-11-04**: Changed the permission check if `allow_missing` is set.\n- **2021-07-08**: Added error guidance for resource not found case.\n- **2021-03-05**: Changed the etag error from `FAILED_PRECONDITION` (which\n  becomes HTTP 400) to `ABORTED` (409).\n- **2020-10-06**: Added guidance for declarative-friendly resources.\n- **2020-10-06**: Added guidance for `allow_missing`.\n- **2020-08-14**: Added error guidance for permission denied cases.\n- **2020-06-08**: Added guidance on returning the full resource.\n- **2019-10-18**: Added guidance on annotations.\n- **2019-09-10**: Added a link to the long-running operations AIP\n  ([AIP-151][]).\n- **2019-08-01**: Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership.\n- **2019-06-10**: Added guidance for long-running update.\n- **2019-05-29**: Added an explicit prohibition on arbitrary fields in standard\n  methods.\n"}
