{"text":"---\nid: 128\nstate: approved\ncreated: 2020-10-06\nplacement:\n  category: resource-design\n  order: 65\n---\n\n# Declarative-friendly interfaces\n\nMany services need to interact with common DevOps tools, particularly those\nthat create and manage network-addressable resources (such as virtual machines,\nload balancers, database instances, and so on). These tools revolve around the\nprinciple of \"configuration as code\": the user specifies the complete intended\nlandscape, and tooling is responsible for making whatever changes are necessary\nto achieve the user's specification.\n\nThese tools are **declarative**: rather than specifying specific _actions_ to\ntake, they specify the desired _outcome_, with the actions being derived based\non the differences between the current landscape and the intended one.\n\nFurthermore, there are numerous popular DevOps tools, with more being\nintroduced each year. Integrating hundreds of resource types with multiple\ntools requires uniformity, so that integration can be automated.\n\n## Guidance\n\n### Resources\n\nResources that are declarative-friendly **must** use only strongly-consistent\nstandard methods for managing resource lifecycle, which allows tools to support\nthese resources generically, as well as conforming to other\ndeclarative-friendly guidance (see [further reading](#further-reading)).\n\nDeclarative-friendly resources **should** designate that they follow the\ndeclarative-friendly style:\n\n```proto\nmessage Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n    style: DECLARATIVE_FRIENDLY\n  };\n\n  // Name and other fields...\n}\n```\n\n### Reconciliation\n\nIf a resource takes time (more than a few seconds) for updates to be realized,\nthe resource **should** include a `bool reconciling` field to disclose that\nchanges are in flight. This field **must** be output only.\n\nA resource **must** set the `reconciling` field to `true` if the current state\nof the resource does not match the user's intended state, and the system is\nworking to reconcile them. This is regardless of whether the root cause of\ngoing into reconciliation was user or system action.\n\n**Note:** Services responding to a `GET` request **must** return the resource's\ncurrent state (not the intended state).\n\n## Further reading\n\nA significant amount of guidance is more strict for declarative-friendly\ninterfaces, due to the focus on automation on top of these resources. This list\nis a comprehensive reference to declarative-friendly guidance in other AIPs:\n\n- Resources **should not** employ custom methods: see AIP-136.\n- Resources **must** use the `Update` method for repeated fields: see AIP-144.\n- Resources **must** include certain standard fields: see AIP-148.\n- Resources **must** have an `etag` field: see AIP-154.\n- Resources **should** provide change validation: see AIP-163.\n- Resources **should not** implement soft-delete. If the id cannot be re-used,\n  the resource **must** implement soft-delete and the undelete RPC: see AIP-164\n\n\n### Annotations\n\nSee [AIP-148 annotations][].\n\n## Changelog\n\n- **2023-07-13**: Move `annotations` from AIP-148.\n- **2023-06-17**: Definition of plane was removed and incorporated into AIP-111.\n- **2023-05-11**: Removed must on resource_id, which was upstreamed to a general\n  must.\n\n[AIP-148 annotations]: ./0148.md#annotations\n"}
