{"text":"---\nid: 193\nstate: approved\ncreated: 2019-07-26\nplacement:\n  category: polish\n  order: 30\n---\n\n# Errors\n\nEffective error communication is an important part of designing simple and\nintuitive APIs. Services returning standardized error responses enable API\nclients to construct centralized common error handling logic. This common logic\nsimplifies API client applications and eliminates the need for cumbersome\ncustom error handling code.\n\n## Guidance\n\nServices **must** return a [`google.rpc.Status`][Status] message when an API\nerror occurs, and **must** use the canonical error codes defined in\n[`google.rpc.Code`][Code]. More information about the particular codes is\navailable in the [gRPC status code documentation][].\n\nError messages **should** help a reasonably technical user _understand_ and\n_resolve_ the issue, and **should not** assume that the user is an expert in\nyour particular API. Additionally, error messages **must not** assume that the\nuser will know anything about its underlying implementation.\n\nError messages **should** be brief but actionable. Any extra information\n**should** be provided in the `details` field. If even more information is\nnecessary, you **should** provide a link where a reader can get more\ninformation or ask questions to help resolve the issue.\n\n\nA JSON representation of an error response might look like the\nfollowing:\n\n<a name=\"sample\"></a>\n\n```json\n{\n  \"error\": {\n    \"code\": 429,\n    \"message\": \"The zone 'us-east1-a' does not have enough resources available to fulfill the request. Try a different zone, or try again later.\",\n    \"status\": \"RESOURCE_EXHAUSTED\",\n    \"details\": [\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n        \"reason\": \"RESOURCE_AVAILABILITY\",\n        \"domain\": \"compute.googleapis.com\",\n        \"metadata\": {\n          \"zone\": \"us-east1-a\",\n          \"vmType\": \"e2-medium\",\n          \"attachment\": \"local-ssd=3,nvidia-t4=2\",\n          \"zonesWithCapacity\": \"us-central1-f,us-central1-c\"\n        }\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.LocalizedMessage\",\n        \"locale\": \"en-US\",\n        \"message\": \"An <e2-medium> VM instance with <local-ssd=3,nvidia-t4=2> is currently unavailable in the <us-east1-a> zone.\\n Consider trying your request in the <us-central1-f,us-central1-c> zone(s), which currently has/have capacity to accommodate your request.\\n Alternatively, you can try your request again with a different VM hardware configuration or at a later time. For more information, see the troubleshooting documentation.\"\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.Help\",\n        \"links\": [\n          {\n            \"description\": \"troubleshooting documentation\",\n            \"url\": \"https://cloud.google.com/compute/docs/resource-error\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### Details\n\nGoogle defines a set of [standard detail payloads][details] for error details,\nwhich cover most common needs for API errors. Services **should** use these\nstandard details payloads when feasible.\n\nStructured details with machine-readable identifiers **must** be used if users\nwill need to write code against a specific aspect of the error. Error message\nstrings **may** change over time; however, if an error message does not have a\nmachine-readable identifier _in addition to_ the `code` field, changing the\nerror message **must** be considered a backwards-incompatible change.\n\n#### ErrorInfo\n\nThe [`ErrorInfo`][ErrorInfo] message is the required way to send a\nmachine-readable identifier. All error responses **must** include an\n`ErrorInfo` payload in the `details` field. Variable information\n**should** be included in the `metadata` field on `ErrorInfo` and\n**must** be included if it appears within an error message.\n\n#### Uniqueness\n\nEach type of detail payload **must** be included at most once. For\nexample, there **must not** be more than one [`BadRequest`][BadRequest]\nmessage in the `details` field, but there **may** be a `BadRequest` and\na [`PreconditionFailure`][PreconditionFailure].\n\n**Note:** `ErrorInfo` represents a special case. There **must** be exactly one\n`ErrorInfo`. It is required.\n\n### Error messages\n\nFor each error, the service **must** populate the `message` field on\n[`google.rpc.Status`][Status]. This error message,\n\n- is a developer-facing, human-readable \"debug message\"\n- is presented in the service's native language\n- both explains the error and offers an actionable resolution to it\n  ([citation](https://cloud.google.com/apis/design/errors#error_model))\n\n**Note:** Sometimes a service will elect to always present\n`Status.message` in English rather than the application's native\nlanguage so that messages are easily searchable in common knowledge\nbases, such as StackOverflow&trade;.\n\nWhen introducing an error that represents a failure scenario that did\nnot previously occur for the service, the payload **must** include\n`ErrorInfo` and any variables found in dynamic segments of the error\nmessage **must** be present in `ErrorInfo.metadata`. See, \"[Dynamic\nvariables](#dynamic-variables)\".\n\n#### Changing error messages\n\n<a name=\"status-message-warning\"></a>\n\n`Status.message` **may** change. However, **use extreme caution** when\ndoing so.  API consumers often treat this error message as **part of the\nAPI contract**. Clients perform string matches on the text to\ndifferentiate one error for another and even parse the error message to\nextract variables from dynamic segments.\n\nThere is a safer alternative. The service can chose to include an error\nmessage by adding [`google.rpc.LocalizedMessage`][LocalizedMessage] to\n[`Status.details`][Status details].\n\nThe error message presented in `LocalizedMessage.message` **may** be the\nsame as `Status.message` or it **may** be an alternate message.\n\nReasons to present the same error message in both locations include the\nfollowing:\n\n- The service plans to localize either immediately or in the near\n  future.  See, \"[Localization](#localization)\".\n- It affords clients the ability to find an error message consistently\n  in one location, `LocalizedMessaage.message`, across all methods of\n  the API Service.\n\nReasons to present an error message in `LocalizedMessage.message` that\ndiffers from `Status.message` include the following:\n\n- The service requires an end-user facing error message that differs\n  from the \"debug message\".\n- Ongoing, iterative error message improvements are expected.\n\nWhen including `LocalizedMessage`, both fields, `locale` and `message`,\n**must** be populated.  If the service is to be localized, the value of\n`locale` **must** change dynamically. See,\n\"[Localization](#localization)\". Otherwise, `locale` **must** always\npresent the service's default locale, e.g. \"en-US\".\n\nWhen adding an error message via `LocalizedMessage`, `ErrorInfo`\n**must** be introduced either before or at the same time. If there are\ndynamic segments found in the text, the values of these variables\n**must** be included in `ErrorInfo.metadata`.  See, \"[Dynamic\nvariables](#dynamic-variables)\".\n\n**Warning:** If `LocalizedMessage` is released without `ErrorInfo`, the\nsame [concerns](#status-message-warning) regarding client misuse of\ntextual error messages apply.\n\n#### Dynamic variables\n\nThe best, actionable error messages include dynamic segments. These\nvariable parts of the message are specific to a particular request.\nConsider the following example:\n\n> The Book, \"The Great Gatsby\", is unavailable at the Library, \"Garfield\n> East\". It is expected to be available again on 2199-05-13.\n\nThe preceding error message is made actionable by the context, both that\noriginates from the request, the title of the Book and the name of the\nLibrary, and by the information that is known only by the service, i.e.\nthe expected return date of the Book.\n\nAll dynamic variables found in error messages **must** also be present\nin the `map<string, string>`, `ErrorInfo.metadata` (found on the\n*required* `ErrorInfo`).  For example, the `metadata` map for the sample\nerror message above will include *at least* the following key/value\npairs:\n\n```yaml\nbookTitle: \"The Great Gatsby\"\nlibrary: \"Garfield East\"\nexpectedReturnDate: \"2199-05-13\"\n```\n\nDynamic variables that do not appear in an error message **may** also be\nincluded in `metadata` to provide additional information to the client\nto be used programmatically.\n\nOnce present in `metadata`, keys **must** continue to be included in the\nmap for the error payload to be backwards compatible, even if the value\nfor a particular key is empty. Keys **must** be expressed as lower\ncamel-case.\n\n#### Localization\n\nThe value of `Status.message` **should** be presented in the service's\nnative language. If a localized error message is required, the service\n**must** include [`google.rpc.LocalizedMessage`][LocalizedMessage] in\n`Status.details`.\n\n### Partial errors\n\nAPIs **should not** support partial errors. Partial errors add significant\ncomplexity for users, because they usually sidestep the use of error codes, or\nmove those error codes into the response message, where the user must write\nspecialized error handling logic to address the problem.\n\nHowever, occasionally partial errors are necessary, particularly in bulk\noperations where it would be hostile to users to fail an entire large request\nbecause of a problem with a single entry.\n\nMethods that require partial errors **should** use [long-running operations][],\nand the method **should** put partial failure information in the metadata\nmessage. The errors themselves **must** still be represented with a\n[`google.rpc.Status`][Status] object.\n\n### Permission Denied\n\nIf the user does not have permission to access the resource or parent,\nregardless of whether or not it exists, the service **must** error with\n`PERMISSION_DENIED` (HTTP 403). Permission **must** be checked prior to checking\nif the resource or parent exists.\n\nIf the user does have proper permission, but the requested resource or parent\ndoes not exist, the service **must** error with `NOT_FOUND` (HTTP 404).\n\n## Rationale\n\n### Requiring ErrorInfo\n\n`ErrorInfo` is required because it further identifies an error. With\nonly approximately twenty [available values][Code] for `Status.status`,\nit is difficult to disambiguate one error from another across an entire\n[API Service][API Service].\n\nAlso, error messages often contain dynamic segments that express\nvariable information, so there needs to be machine readable component of\n*every* error response that enables clients to use such information\nprogrammatically.\n\n### LocalizedMessage\n\n`LocalizedMessage` was selected as the location to present alternate\nerror messages. This is desirable when clients need to display a crafted\nerror message directly to end users. `LocalizedMessage` can be used with\na static `locale`. This may seem misleading, but it allows the service\nto eventually localize without having to duplicate or move the error\nmessage, which would be a backwards incompatible change.\n\n## Further reading\n\n- For which error codes to retry, see [AIP-194](https://aip.dev/194).\n- For how to retry errors in client libraries, see\n  [AIP-4221](https://aip.dev/client-libraries/4221).\n\n## Changelog\n\n- **2023-05-17**: Change the recommended language for `Status.message`\n  to be the service's native language rather than English.\n- **2023-05-17**: Specify requirements for changing error messages.\n- **2023-05-10**: Require [`ErrorInfo`][ErrorInfo] for all error\n  responses.\n- **2023-05-04**: Require uniqueness by message type for error details.\n- **2022-11-04**: Added guidance around PERMISSION_DENIED errors previously\n  found in other AIPs.\n- **2022-08-12**: Reworded/Simplified intro to add clarity to the intent.\n- **2020-01-22**: Added a reference to the [`ErrorInfo`][ErrorInfo] message.\n- **2019-10-14**: Added guidance restricting error message mutability to if\n  there is a machine-readable identifier present.\n- **2019-09-23**: Added guidance about error message strings being able to\n  change.\n\n<!-- prettier-ignore-start -->\n[aip-4221]: ../client-libraries/4221.md\n[details]: https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto\n[ErrorInfo]: https://github.com/googleapis/googleapis/blob/6f3fcc058ff29989f6d3a71557a44b5e81b897bd/google/rpc/error_details.proto#L27-L76\n[PreconditionFailure]: https://github.com/googleapis/googleapis/blob/6f3fcc058ff29989f6d3a71557a44b5e81b897bd/google/rpc/error_details.proto#L139-L166\n[BadRequest]: https://github.com/googleapis/googleapis/blob/477a59d764428136ba1d857a9633c0d231de6efa/google/rpc/error_details.proto#L168-L218\n[LocalizedMessage]: https://github.com/googleapis/googleapis/blob/e9897ed945336e2dc967b439ac7b4be6d2c62640/google/rpc/error_details.proto#L275-L285\n[grpc status code documentation]: https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n[Code]: https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n[Status]: https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto\n[Status details]: https://github.com/googleapis/googleapis/blob/aeae5ea2b01ece6c0cee046ae84b881cdc62b95d/google/rpc/status.proto#L46-L48\n[long-running operations]: ./0151.md\n[API Service]: https://cloud.google.com/apis/design/glossary#api_service\n<!-- prettier-ignore-end -->\n"}
