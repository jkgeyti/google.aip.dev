{"text":"---\nid: 132\nstate: approved\ncreated: 2019-01-21\nupdated: 2022-06-02\nplacement:\n  category: operations\n  order: 20\n---\n\n# Standard methods: List\n\nIn many APIs, it is customary to make a `GET` request to a collection's URI\n(for example, `/v1/publishers/1/books`) in order to retrieve a list of\nresources, each of which lives within that collection.\n\nResource-oriented design ([AIP-121][]) honors this pattern through the `List`\nmethod. These RPCs accept the parent collection (and potentially some other\nparameters), and return a list of responses matching that input.\n\n## Guidance\n\nAPIs **must** provide a `List` method for resources unless the resource is a\n[singleton][]. The purpose of the `List` method is to return data from a finite\ncollection (generally singular unless the operation supports [reading across\ncollections][]).\n\nList methods are specified using the following pattern:\n\n```proto\nrpc ListBooks(ListBooksRequest) returns (ListBooksResponse) {\n  option (google.api.http) = {\n    get: \"/v1/{parent=publishers/*}/books\"\n  };\n  option (google.api.method_signature) = \"parent\";\n}\n```\n\n- The RPC's name **must** begin with the word `List`. The remainder of the RPC\n  name **should** be the plural form of the resource being listed.\n- The request and response messages **must** match the RPC name, with\n  `Request` and `Response` suffixes.\n- The HTTP verb **must** be `GET`.\n- The collection whose resources are being listed **should** map to the URI\n  path.\n  - The collection's parent resource **should** be called `parent`, and\n    **should** be the only variable in the URI path. All remaining parameters\n    **should** map to URI query parameters.\n  - The collection identifier (`books` in the above example) **must** be a\n    literal string.\n- The `body` key in the `google.api.http` annotation **must** be omitted.\n- If the resource being listed is not a top-level resource, there **should**\n  be exactly one `google.api.method_signature` annotation, with a value of\n  `\"parent\"`. If the resource being listed is a top-level resource, there\n  **should** be either no `google.api.method_signature` annotation, or exactly\n  one `google.api.method_signature` annotation, with a value of `\"\"`.\n\n### Request message\n\nList methods implement a common request message pattern:\n\n```proto\nmessage ListBooksRequest {\n  // The parent, which owns this collection of books.\n  // Format: publishers/{publisher}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The maximum number of books to return. The service may return fewer than\n  // this value.\n  // If unspecified, at most 50 books will be returned.\n  // The maximum value is 1000; values above 1000 will be coerced to 1000.\n  int32 page_size = 2;\n\n  // A page token, received from a previous `ListBooks` call.\n  // Provide this to retrieve the subsequent page.\n  //\n  // When paginating, all other parameters provided to `ListBooks` must match\n  // the call that provided the page token.\n  string page_token = 3;\n}\n```\n\n- A `parent` field **must** be included unless the resource being listed is a\n  top-level resource. It **should** be called `parent`.\n  - The field **should** be [annotated as required][aip-203].\n  - The field **must** identify the [resource type][aip-123] of the resource\n    being listed.\n- The `page_size` and `page_token` fields, which support pagination, **must**\n  be specified on all list request messages. For more information, see\n  [AIP-158][].\n  - The comment above the `page_size` field **should** document the maximum\n    allowed value, as well as the default value if the field is omitted (or set\n    to `0`). If preferred, the API **may** state that the server will use a\n    sensible default. This default **may** change over time.\n  - If a user provides a value greater than the maximum allowed value, the API\n    **should** coerce the value to the maximum allowed.\n  - If a user provides a negative or other invalid value, the API **must** send\n    an `INVALID_ARGUMENT` error.\n- The `page_token` field **must** be included on all list request messages.\n- The request message **may** include fields for common design patterns\n  relevant to list methods, such as `string filter` and `string order_by`.\n- The request message **must not** contain any other required fields, and\n  **should not** contain other optional fields except those described in this\n  or another AIP.\n\n**Note:** List methods **should** return the same results for any user that has\npermission to make a successful List request on the collection. Search methods\nare more relaxed on this.\n\n### Response message\n\nList methods implement a common response message pattern:\n\n```proto\nmessage ListBooksResponse {\n  // The books from the specified publisher.\n  repeated Book books = 1;\n\n  // A token, which can be sent as `page_token` to retrieve the next page.\n  // If this field is omitted, there are no subsequent pages.\n  string next_page_token = 2;\n}\n```\n\n- The response message **must** include one repeated field corresponding to the\n  resources being returned, and **should not** include any other repeated\n  fields unless described in another AIP (for example, AIP-217).\n  - The response **should** usually include fully-populated resources unless\n    there is a reason to return a partial response (see AIP-157).\n- The `next_page_token` field, which supports pagination, **must** be included\n  on all list response messages. It **must** be set if there are subsequent\n  pages, and **must not** be set if the response represents the final page. For\n  more information, see AIP-158.\n- The message **may** include a `int32 total_size` (or `int64 total_size`)\n  field with the number of items in the collection.\n  - The value **may** be an estimate (the field **should** clearly document\n    this if so).\n  - If filtering is used, the `total_size` field **should** reflect the size of\n    the collection _after_ the filter is applied.\n\n### Ordering\n\n`List` methods **may** allow clients to specify sorting order; if they do, the\nrequest message **should** contain a `string order_by` field.\n\n- Values **should** be a comma separated list of fields. For example:\n  `\"foo,bar\"`.\n- The default sorting order is ascending. To specify descending order for a\n  field, users append a `\" desc\"` suffix; for example: `\"foo desc, bar\"`.\n- Redundant space characters in the syntax are insignificant.\n  `\"foo, bar desc\"`, `\" foo , bar desc \"`, and `\"foo,bar desc\"` are all\n  equivalent.\n- Subfields are specified with a `.` character, such as `foo.bar` or\n  `address.street`.\n\n<!-- TODO(#220): Add a reference to AIP-161 once it is written. -->\n\n**Note:** Only include ordering if there is an established need to do so. It is\nalways possible to add ordering later, but removing it is a breaking change.\n\n### Filtering\n\nList methods **may** allow clients to specify filters; if they do, the request\nmessage **should** contain a `string filter` field. Filtering is described in\nmore detail in AIP-160.\n\n**Note:** Only include filtering if there is an established need to do so. It\nis always possible to add filtering later, but removing it is a breaking\nchange.\n\n### Soft-deleted resources\n\nSome APIs need to \"[soft delete][]\" resources, marking them as deleted or\npending deletion (and optionally purging them later).\n\nAPIs that do this **should not** include deleted resources by default in list\nrequests. APIs with soft deletion of a resource **should** include a\n`bool show_deleted` field in the list request that, if set, will cause\nsoft-deleted resources to be included.\n\n### Errors\n\nSee [errors][], in particular [when to use PERMISSION_DENIED and\nNOT_FOUND errors][permission-denied].\n\n## Further reading\n\n- For details on pagination, see [AIP-158](./0158.md).\n- For listing across multiple parent collections, see [AIP-159](./0159.md).\n\n[aip-121]: ./0121.md\n[aip-123]: ./0123.md\n[aip-157]: ./0157.md\n[aip-158]: ./0158.md\n[aip-203]: ./0203.md\n[errors]: ./0193.md\n[permission-denied]: ./0193.md#permission-denied\n[reading across collections]: ./0159.md\n[singleton]: ./0156.md\n[soft delete]: ./0135.md#soft-delete\n\n## Changelog\n\n- **2023-03-22**: Fix guidance wording to mention AIP-159.\n- **2023-03-17**: Align with AIP-122 and make Get a must.\n- **2022-11-04**: Aggregated error guidance to AIP-193.\n- **2022-06-02**: Changed suffix descriptions to eliminate superfluous \"-\".\n- **2020-09-02**: Add link to the filtering AIP.\n- **2020-08-14**: Added error guidance for permission denied cases.\n- **2020-06-08**: Added guidance on returning the full resource.\n- **2020-05-19**: Removed requirement to document ordering behavior.\n- **2020-04-15**: Added guidance on List permissions.\n- **2019-10-18**: Added guidance on annotations.\n- **2019-08-01**: Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership.\n- **2019-07-30**: Added guidance about documenting the ordering behavior.\n- **2019-05-29**: Added an explicit prohibition on arbitrary fields in standard\n  methods.\n"}
