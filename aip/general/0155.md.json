{"text":"---\nid: 155\nstate: approved\ncreated: 2019-05-06\nplacement:\n  category: design-patterns\n  order: 40\n---\n\n# Request identification\n\nIt is sometimes useful for an API to have a unique, customer-provided\nidentifier for particular requests. This can be useful for several purposes,\nsuch as de-duplicating requests from parallel processes, ensuring the safety of\nretries, or auditing.\n\nThe most important purpose for request IDs is to provide idempotency\nguarantees: allowing the same request to be issued more than once without\nsubsequent calls having any effect. In the event of a network failure, the\nclient can retry the request, and the server can detect duplication and ensure\nthat the request is only processed once.\n\n## Guidance\n\nAPIs **may** add a `string request_id` parameter to request messages (including\nthose of standard methods) in order to uniquely identify particular requests.\n\n```proto\nmessage CreateBookRequest {\n  // The parent resource where this book will be created.\n  // Format: publishers/{publisher}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The book to create.\n  Book book = 2 [(google.api.field_behavior) = REQUIRED];\n\n  // A unique identifier for this request. Restricted to 36 ASCII characters.\n  // A random UUID is recommended.\n  // This request is only idempotent if a `request_id` is provided.\n  string request_id = 3 [(google.api.field_info).format = UUID4];\n}\n```\n\n- Providing a request ID **must** guarantee idempotency.\n  - If a duplicate request is detected, the server **should** return the\n    response for the previously successful request, because the client most\n    likely did not receive the previous response.\n  - APIs **may** choose any reasonable timeframe for honoring request IDs.\n- The `request_id` field **must** be provided on the request message to which\n  it applies (and it **must not** be a field on resources themselves).\n- Request IDs **should** be optional.\n- Request IDs **should** be able to be UUIDs, and **may** allow UUIDs to be the\n  only valid format. The format restrictions for request IDs **must** be\n  documented.\n  - Request IDs that are UUIDs **must** be annotated with the\n    `google.api.FieldInfo.Format` value `UUID4` using the extension\n    `(google.api.field_info).format = UUID4`. See [AIP-202](./0202.md) for more.\n\n### Stale success responses\n\nIn some unusual situations, it may not be possible to return an identical\nsuccess response. For example, a duplicate request to create a resource may\narrive after the resource has not only been created, but subsequently updated;\nbecause the service has no other need to retain the historical data, it is no\nlonger feasible to return an identical success response.\n\nIn this situation, the method **may** return the current state of the resource\ninstead. In other words, it is permissible to substitute the historical success\nresponse with a similar response that reflects more current data.\n\n## Further reading\n\n- For which codes to retry, see [AIP-194](https://aip.dev/194).\n- For how to retry errors in client libraries, see\n  [AIP-4221](https://aip.dev/4221).\n\n## Rationale\n\n### Using UUIDs for request identification\n\nWhen a value is required to be unique, leaving the format open-ended can lead to\nAPI consumers incorrectly providing a duplicate identifier. As such,\nstandardizing on a universally unique identifier drastically reduces the chance\nfor collisions when done correctly.\n\n## Changelog\n\n- **2023-10-02**: Add UUID format extension guidance.\n- **2019-08-01**: Changed the examples from \"shelves\" to \"publishers\", to\n  present a better example of resource ownership.\n"}
